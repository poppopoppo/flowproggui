§ cll_i # { {} k } 
	$ k ⊢ k,k0 
	∎ { k0 k }
§ cll # { v p } 
	_cla◂◂cll_i { {} p v } ⊢ { k p v } 
	∎ { v p k }  
\\§ eml = _emt 
§ @.arr_of_lst_i { c i l } 
	$ l ⊢ 
	∐ _cns◂{ a l } . 
		_inc c ⊢ c 
		arr_of_lst_i { c i l } ⊢ { c v }
		_dec c ⊢ c 
		_exc_q { v c a } ⊢ { v c _ } 
		∎ { c v } 
	∐. _nil◂{} . 
		_mk_arr { c i } ⊢ { c _ v } 
		∎ { c v } 
§ arr_of_lst # { l i } 
	arr_of_lst_i { %[ 0r ] i l } ⊢ { c v } 
	∎ v  
§ eml = _id 
§ op_err◂◂{ M F } x 
	F x ⊢ 
	? y .
		∎ y 
	∐. _ . 
		_emt %[ "op_err:" ] ⊢ _ 
		_emt %[ M ] ⊢ _ 
		∎|		
§ smt o 
	∐ o ⊢ _some◂a .
		∎ a 
	∐. . 
		» "smt 0" _ ⊢ ee0 
		_emt ee0 ⊢ _ 
		∎| 
§ smt_err◂◂E o 
	∐ o ⊢ _some◂a .
		∎ a 
	∐. . 
		_emt %[ "smt_err 0" ] ⊢ _ 
		_emt %[ E ] ⊢ _ 
		∎| 
§ smt_err_r { o e } 
	∐ o ⊢ _some◂a .
		∎ a 
	∐. . 
		_emt %[ "smt_err 0" ] ⊢ _ 
		_emt e ⊢ _ 
		∎| 
§ nnt o 
	∐ o ⊢ _none◂{} .
		∎ {} 
	∐. . 
		» "nnt 0" _ ⊢ ee0 
		_emt ee0 ⊢ _ 
		∎| 
§ nnt_emt { o x } 
	∐ o ⊢ _none◂{} .
		∎ x
	∐. . 
		» "nnt_emt 0" _ ⊢ ee0 
		_emt ee0 ⊢ _ 
		_emt x ⊢ _ 
		∎| 
§ nnt_err { o e }  
	∐ o ⊢ _none◂{} .
		∎ {} 
	∐. . 
		» "nnt 0" _ ⊢ ee0 
		_emt ee0 ⊢ _ 
		_emt e ⊢ _ 
		∎| 
§ nnt_err_T◂◂E o 
	∐ o ⊢ _none◂{} . 
		∎ {} 
	∐. . 
		_emt %[ "nnt_err_T" ] ⊢ _ 
		_emt %[ E ] ⊢ _ 
		∎| 
§ setge { x y } 
	∐ y'=<x' .
		∎ { x y %[ 1r ] }
	∐. . 
		∎ { x y %[ 0r ] }
§ set_q # { v i a } 
	_exc_q { v i a } ⊢ { v i _ } 
	∎ { v i }
§ set_o # { v i a } 
	$ _some◂a ⊢ o 
	set_q { v i o } ⊢ { v i } 
	∎ { v i }
§ get_q = _lod_q 
§ exc_q = _exc_q
§ mk_arr = _mk_arr
§ arr_of_lst = _arr_of_lst 
§ arr_of_lst_len # l 
  arr_of_lst l ⊢ a 
  _arr_len a ⊢ { a n } 
  ∎ { a n }

§ exc_tv # { tv i v0 } 
  _some v0 ⊢ v0 
  _exc_q { tv i v0 } ⊢ { tv i v0 } 
  smt_err◂◂"exc_tv" v0 ⊢ v0 
  ∎ { tv i v0 } 
  \[
§ lod_tv # { tv i } 
  _lod_q { tv i } ⊢ { tv i v } 
  smt_err◂◂"lod_tv" v ⊢ v 
  ∎ { tv i v } 
\]
§ lod_tv { tv i } 
	_lod_q { tv i } ⊢ { tv i v } 
	$ v ⊢ 
	∐ _some◂v . 
		∎ { tv i v } 
	∐. _none◂{} . 
		_emt %[ "lod_tv" ] ⊢ _ 
		_arr_len tv ⊢ { tv l } 
		_emt l ⊢ _ 
		_emt i ⊢ _ 
		∎| 
§ set_tv # { tv i v } 
  _some v ⊢ v 
  _exc_q { tv i v } ⊢ { tv i v } 
  nnt v ⊢ {} 
  ∎ { tv i }
§ get_tv # { tv i } 
	_exc_q { tv i ‹› } ⊢ { tv i v } 
	smt v ⊢ v
	∎ { tv i v }
§ MAX_tv = 1628000r 
§ ini_tv # {} 
  mk_arr { %[ MAX_tv ] ‹› } ⊢ { _ _ tv }
  ∎ tv 
§ ini_tv_n # n 
  _none {} ⊢ o 
  mk_arr { n o } ⊢ { n _ tv } 
  ∎ { n tv }
§ rep_movsb # { c0 s0 o0 s1 o1 } 
  _rep_movsb { c0 s0 o0 s1 o1 } ⊢ { c0 s0 o0 s1 o1 } 
  _add { o0 c0 } ⊢ { o0 c0 } 
  _add { o1 c0 } ⊢ { o1 c0 }
  ∎ { c0 s0 o0 s1 o1 }

§ @.byt +s8 
	∐. _byt ⊢ { b } 
		∎ _some◂b 
§§ CST 
	§ not_0 = 0xffffffffffffffffr
	∎∎
§§ chr 
	§ nl = 10r 
	§ tab = 9r 
	§ slsh = 92r 
	§ dq = 34r 
	§ sq = 39r 
	§ a = 97r
	§ n = 110r 
	§ t = 116r 
	§ z = 122r
	§ A = 65r
	§ Z = 90r
	§ d_0 = 48r 
	§ d_9 = 57r
	§ null = 0r 
	∎∎ 
§ blt◂◂S { s x } 
	_s8_len %[ S ] ⊢ { d l } 
	rep_movsb { l d %[ 0r ] s x } ⊢ { _ _ _ s x } 
	∎ { s x }
§ PS = 4096r 
§ HP = 2048r 
§ KB = 1024r 
§ non = _none 
¶ sum3 ◂ a',b',c' 
	∐ c0 : a' 
	∐ c1 : b' 
	∐ c2 : c'

¶ sum2 a0',a1' 
	∐ in0 : a0' 
	∐ in1 : a1' 
§ op_x◂◂F k 
	$ k ⊢ k,k0 
	F k0 ⊢ a 
	∎ { k a } 
§ op_x_v◂◂F # { v k } 
	$ k ⊢ k,k0 
	F { v k0 } ⊢ { v a } 
	∎ { v k a }
§ @.eof +s8
	∐ _byt !| ⊢ { _ } 
		∎ _none◂{}
	∐. ⊢ { } 
		∎ _some◂{} 
§ @.nl_eof +s8
	∐# "\n" ⊢ { {} } 
		∎ _some◂{} 
	∐.# eof ⊢ { {} } 
		∎ _some◂{}
§ @.for◂◂F { v n i }
	∐ n'<>i' . 
		$ i ⊢ i,i0 
		F { v i0 } ⊢ v 
		_inc i ⊢ i 
		for◂◂F { v n i } ⊢| 
	∐. . 
		∎ { v n } 
§ for_0◂◂F # { v n } 
	for◂◂F { v n %[ 0r ] } ⊢|
§ hdl_err◂◂F { v e }  
	F v ⊢ 
	? y . 
		∎ { y e } 
	∐. _ . 
		_emt %[ "hdl_err" ] ⊢ _ 
		_emt e ⊢ _ 
		∎| 
§§ bl 
	¶ t 
		∐ t : {} 
		∐ f : {}
	§ and { b0 b1 } 
		∐ b0 ⊢ t◂{}; b1 ⊢ t◂{} . 
			∎ t◂{}
		∐. . 
			∎ f◂{}
	§ or { b0 b1 } 
		∐ b0 ⊢ f◂{}; b1 ⊢ f◂{} . 
			∎ f◂{}
		∐. . 
			∎ t◂{}
	§ sub { b0 b1 } 
		∐ b1 ⊢ f◂{} . 
			∎ b0 
		∐. . 
			∎ f◂{}
	§ not b 
		∐ b ⊢ f◂{} . 
			∎ t◂{} 
		∐. . 
			∎ f◂{}
	§ is_t b 
		∐ b ⊢ t◂{} . 
			∎ {} 
		∐. . 
			_emt %[ "is_t:0" ] ⊢ _ 
			∎|
	∎∎
§ t = bl.t 
§ f = bl.f
§ err s 
	_emt s ⊢ _ 
	∎| 

§ mk_none_arr # n 
	mk_arr { n _none◂{} } ⊢ { n _ v } 
	∎ { n v }

§ mk_nil_arr # n 
	mk_arr { n _nil◂{} } ⊢ { n _ v } 
	∎ { n v }

\[
unsigned long
    hash(unsigned char *str)
    {
        unsigned long hash = 5381;
        int c;

        while (c = *str++)
            hash = ((hash << 5) + hash) + c; /* hash * 33 + c */

        return hash;
    }
\]
§§ s8 
	§ @.itr_i◂◂F { v s l i } 
		∐ l'<>i' . 
			_lds { s i } ⊢ { s i b } 
			$ i ⊢ i,i0 
			F { v i0 b } ⊢ v 
			_inc i ⊢ i 
			itr_i◂◂F { v s l i } ⊢| 
		∐. . 
			∎ { v s } 
	§ itr◂◂F # { v s } 
		_s8_len s ⊢ { s l } 
		itr_i◂◂F { v s l %[ 0r ] } ⊢| 
	\[
	§§ hsh 
		§ f_i { h i b } 
			$ h ⊢ h,h0 
			_shl { h %[ 5r ] } ⊢ { h _ } 
			_add { h h0 } ⊢ { h _ } 
			_add { h b } ⊢ { h _ } 
			∎ h 
		§ f s 
			_s8_len s ⊢ { s l } 
			itr◂◂f_i { %[ 5381r ] s } ⊢| 
		∎∎
	§§ hsh_tbl 
		¶ bgt a' = _lst◂{ _s8 a' }
		¶ t◂a' = _arr◂(bgt◂a')
		§ N = 0xffr 
		§ ini {} 
			mk_nil_arr %[ N ] ⊢ { _ v } 
			∎ v 
		
		∎∎
	\]
	∎∎
§§ rp8 
	¶ @.t 
		∐ nd : { t _r64 t } 
		∐ lf : _s8 
		∐ e : {} 
		∐ chr : _r64 
	
	§ of_s8◂s = lf◂s 
	§ len r 
		$ r ⊢ 
		∐ nd◂{ r0 l r1 } .
			$ l ⊢ l,l0 
			∎ { nd◂{ r0 l0 r1 } l }
		∐ chr◂c .
			∎ { chr◂c %[ 1r ] }  
    ∐ e◂{} . 
			∎ { e◂{} %[ 0r ] } 
		∐. lf◂s . 
			_s8_len s ⊢ { s l } 
			∎ { lf◂s l }
	§ add_s8 # { e s } 
		_s8_len s ⊢ { s l } 
		len e ⊢ { e le } 
		_add { l le } ⊢ { l le } 
		∎ nd◂{ %e %l lf◂%s }  
	§ pfx_s8 { s e } 
		_s8_len s ⊢ { s l } 
		len e ⊢ { e le } 
		_add { l le } ⊢ { l le } 
		∎ nd◂{ lf◂%s %l %e }
	§ add_chr # { e c } 
		len e ⊢ { e le } 
		_inc le ⊢ le 
		∎ nd◂{ %e %le chr◂%c } 
	§ pfx_chr # { c e } 
		len e ⊢ { e le } 
		_inc le ⊢ le 
		∎ nd◂{ chr◂%c le e } 
	§ cct # { r0 r1 }
		len r0 ⊢ { r0 l0 } 
		len r1 ⊢ { r1 l1 } 
		_add { l0 l1 } ⊢ { l0 l1 } 
		∎ nd◂{ r0 l0 r1 }
	§ @.mk_s8_i { r s i }
		$ r ⊢ 
		∐ nd◂{ r0 l r1 } .
			mk_s8_i { r0 s i } ⊢ { r0 s i } 
			mk_s8_i { r1 s i } ⊢ { r1 s i }
			∎ { nd◂{ r0 l r1 } s i }
		∐ e◂{} . 
			∎ { e◂{} s i } 
		∐ chr◂c . 
			_sts { s i c } ⊢ { s i c }
			_inc i ⊢ i
			∎ { chr◂%c s i }
		∐. lf◂s0 . 
			_s8_len s0 ⊢ { s0 l0 } 
			rep_movsb { l0 s0 %[ 0r ] s i } ⊢ { l0 s0 i0 s i }
			∎ { lf◂%s0 s i } 
	§ mk_s8 # r 
		len r ⊢ { r l }
		_mlc_s8 l ⊢ { l s }
		mk_s8_i { r s %[ 0r ] } ⊢ { r s i }
		∎ { r s }
	§ @.to_s8_i { r s i }
		$ r ⊢ 
		∐ nd◂{ r0 lm r1 } .
			$ lm ⊢ _ 
			to_s8_i { r0 s i } ⊢ { s i } 
			to_s8_i { r1 s i } ⊢|
		∐ e◂{} . 
			∎ { s i } 
		∐ chr◂c . 
			_sts { s i c } ⊢ { s i _ }
			_inc i ⊢ i
			∎ { s i }
		∐. lf◂s0 . 
			_s8_len s0 ⊢ { s0 l0 } 
			» 0r _ ⊢ i0 
			rep_movsb { l0 s0 i0 s i } ⊢ { _ _ _ s i }
			∎ { s i } 
	§ to_s8 # r 
		len r ⊢ { r l }
		_mlc_s8 l ⊢ { l s }
		to_s8_i { r s %[ 0r ] } ⊢ { s _ }
		∎ s
	§ in_s8 # x 
		to_s8 x ⊢ s 
		∎ of_s8◂s
	∎∎
§ incq # n 
	_add { n %[ 8r ] } ⊢ { n _ } 
	∎ n 

§ decq # n 
	_sub { n %[ 8r ] } ⊢ { n _ } 
	∎ n 

§ lod_o # { v i } 
	_lod_q { v i } ⊢ { v i o } 
	smt_err◂◂"lod_o" o ⊢ a 
	∎ { v i a } 
§ set_o # { v i a } 
	_some a ⊢ o 
	set_q { v i o } ⊢ { v i } 
	∎ { v i }
¶ iso a' 
	∐ iso : a' 
§ inv # a 
	$ a ⊢ iso◂a 
	∎ a  

§ KB = 1024r 
§ inc_x # x 
	$ x ⊢ x,x0 
	_inc x0 ⊢ x0 
	∎ { x x0 } 
§ max { x y } 
	∐ x'=<y' . 
		$ y ⊢ y,y0 
		∎ { x y y0 } 
	∐. . 
		$ x ⊢ x,x0 
		∎ { x y x0 }
§ min { x y } 
	∐ x'=<y' . 
		$ x ⊢ x,x0
		∎ { x y x0 } 
	∐. . 
		$ y ⊢ y,y0 
		∎ { x y y0 }
§ cns1◂a = _cns◂{ a _nil◂{} } 
§ cns2◂{ a0 a1 } = _cns◂{ a0 _cns◂{ a1 _nil◂{} } }
§ cns3◂{ a0 a1 a2 } = _cns◂{ a0 _cns◂{ a1 _cns◂{ a2 _nil◂{} } } }
§ cns4◂{ a0 a1 a2 a3 } = _cns◂{ a0 _cns◂{ a1 _cns◂{ a2 _cns◂{ a3 _nil◂{} } } } }
§ cns5◂{ a0 a1 a2 a3 a4 } = _cns◂{ a0 _cns◂{ a1 _cns◂{ a2 _cns◂{ a3 _cns◂{ a4 _nil◂{} } } } } }

§§ arr 
	§ @.mlt_i◂◂M { v0 v1 l i } 
		∐ l'=i' . 
			∎ { v0 v1 } 
		∐. . 
			_lod_q { v0 i } ⊢ { v0 i b0 } 
			_lod_q { v1 i } ⊢ { v1 i b1 }
			M { b0 b1 } ⊢ b2 
			exc_q { v0 i b2 } ⊢ { v0 i _ } 
			_inc i ⊢ i 
			mlt_i◂◂M { v0 v1 l i } ⊢|  
	§ mlt◂◂M { v0 v1 } 
		_arr_len v0 ⊢ { v0 l0 } 
		_arr_len v1 ⊢ { v1 l1 } 
		∐ l0'=l1' . 
			mlt_i◂◂M { v0 v1 l0 %[ 0r ] } ⊢| 
		∐. . 
			_emt %[ "op2 0" ] ⊢ _ 
			∎| 
	§ @.fnd_lft_i◂◂T { a l i } 
		∐ l'=i' . 
			$ _none◂{} ⊢ o
			∎ { a o } 
		∐. . 
			_lod_q { a i } ⊢ { a i v } 
			T { i v } ⊢ { i v b } 
			∐ b ⊢ bl.t◂{} . 
				_some { i v } ⊢ o 
				∎ { a o }
			∐. . 
				_inc i ⊢ i 
				fnd_lft_i◂◂T { a l i } ⊢| 
	§ fnd_lft◂◂T # a 
		_arr_len a ⊢ { a l } 
		fnd_lft_i◂◂T { a l %[ 0r ] } ⊢|
	§ @.itr_lft_i◂◂F { a s l i } 
		∐ l'=i' . 
			∎ { a s } 
		∐. . 
			_lod_q { a i } ⊢ { a i v } 
			$ i ⊢ i,i0 
			F { s i0 v } ⊢ s 
			_inc i ⊢ i 
			itr_lft_i◂◂F { a s l i } ⊢| 
	§ itr_lft◂◂F # { a s }
		_arr_len a ⊢ { a l } 
		itr_lft_i◂◂F { a s l %[ 0r ] } ⊢| 
	∎∎

¶ @.p_lst ◂ a'
 	∐ p_cns : { a' p_lst◂a' }
	∐ p_end : a'

§ @.rev_i { l0 l1 }
	$ l1 ⊢ 
	∐ _nil◂{} .
		∎ l0
	∐. _cns◂{ hd tl } .
		rev_i { ⟦ hd < l0 ⟧ tl } ⊢|
§ rev # l
	rev_i { ⟦⟧ l } ⊢ l0
	∎ l0
§ @.apnd { l0 l1 }
	$ l0 ⊢ 
	∐ _cns◂{ hd l0 } . 
		apnd { l0 l1 } ⊢ l 
		$ _cns◂{ hd l } ⊢ l 
		∎ l 
	∐. _nil◂{} . 
		∎ l1 
§ @.rev_apnd { l0 l1 }
	$ l0 ⊢ 
	∐ _cns◂{ hd l0 } . 
		$ _cns◂{ hd l1 } ⊢ l1 
		rev_apnd { l0 l1 } ⊢|
	∐. _nil◂{} . 
		∎ l1 
§ @.pop_n { n l }
	∐ n'=0r . 
		$ _nil◂{} ⊢ r 
		∎ { r l } 
	∐. .
		_dec n ⊢ n 
		$ l ⊢ 
		∐ _cns◂{ a l } . 
			pop_n { n l } ⊢ { r l } 
			$ _cns◂{ a r } ⊢ r 
			∎ { r l } 
		∐. _nil◂{} . 
			∎ { _nil◂{} _nil◂{} }

§ @.s8_of_s8_lst_i { l sl }
	$ sl ⊢ 
	∐ _cns◂{ s sl } . 
		_s8_len s ⊢ { s b }
		_add { l b } ⊢ { l b } 
		s8_of_s8_lst_i { l sl } ⊢ { sr n } 
		» 0r _ ⊢ o0 
		$ b ⊢ b,b0 
		rep_movsb { b s o0 sr n } ⊢ { b s o0 sr n } 
		∎ { sr n } 
	∐. _nil◂{} . 
		_mlc_s8 l ⊢ { l sr } 
		» 0r _ ⊢ o 
		∎ { sr o }
§ s8_of_s8_lst # l 
	s8_of_s8_lst_i { %[ 0r ] l } ⊢ { s n } 
	∎ s 

§ @.assoc { l k }
	∐ l ⊢ _cns◂{ { k0 o0 } l } .
		∐ k'=k0' .
			∐ o0 ⊢ _some◂v0 .
				$ v0 ⊢ v0,v1
				∎ { _cns◂{ { k0 _some◂v0 } l } k _some◂v1 }
			∐. .
				∎ { _cns◂{ { k0 o0 } l } k _none◂{} }
		∐. .
			assoc { l k } ⊢ { l k r0 }
			∎ { _cns◂{ { k0 o0 } l } k r0 }
	∐. .
		∎ { l k _none◂{} }	

§§ opn 
	§ eq_T◂◂E { a b } 
		∐ a ⊢ _some◂a; b ⊢ _some◂b . 
			E { a b } ⊢ { a b t } 
			∎ { _some◂a _some◂b t } 
		∐ a ⊢ _none◂{}; b ⊢ _none◂{} . 
			∎ { _none◂{} _none◂{} bl.t◂{} } 
		∐. . 
			∎ { a b bl.f◂{} }
	§ pnt◂◂P { v o } 
		$ o ⊢ 
		∐ _some◂a . 
			P { v a } ⊢ { v s } 
			^ s ⊢ _,s 
				"_some◂" 0' // 
			∎ { v s } 
		∐. _none◂{} . 
			∎ { v %[ "_none◂{}" ] }
	§ eq_st_T◂◂E { e a b }
		∐ a ⊢ _some◂a; b ⊢ _some◂b . 
			E { e a b } ⊢ { e a b t } 
			∎ { e _some◂a _some◂b t } 
		∐ a ⊢ _none◂{}; b ⊢ _none◂{} . 
			∎ { e _none◂{} _none◂{} bl.t◂{} } 
		∐. . 
			∎ { e a b bl.f◂{} } 
	∎∎
§§ lst
	¶ t a' = _lst◂a' 
	§ assoc = assoc 
	§ rev = rev 
	§ apnd = apnd 
	
	§ 
		@.stx_line◂◂G +s8 
			∐# G stx_line◂◂G ⊢ { a l } 
				∎ _some◂_cns◂{ a l } 
			∐.# ⊢ { } 
				∎ _some◂_nil◂{}
	§
		@.stx_synt◂◂G +s8 
			∐* G stx_line◂◂G ⊢ { a l } 
				∎ _some◂_cns◂{ a l } 
			∐.* ⊢ { } 
				∎ _some◂_nil◂{}
	§
		@.stx_cmm_tl◂◂G +s8
			∐# "," !| G stx_cmm_tl◂◂G ⊢ { {} a l } 
				∎ _some◂_cns◂{ a l } 
			∐.# ⊢ { } 
				∎ _some◂_nil◂{} 
	
	§
		@.stx_cmm◂◂H +s8 
			∐# H stx_cmm_tl◂◂H ⊢ { a l } 
				∎ _some◂_cns◂{ a l } 
			∐.# ⊢ { } 
				∎ _some◂_nil◂{} 
		
		§ @.eq_v◂◂{ E D } { v l0 l1 } 
		∐ l0 ⊢ _cns◂{ p0 l0 }; l1 ⊢ _cns◂{ p1 l1 } .
			E { v p0 p1 } ⊢ { v p0 p1 b0 } 
			eq_v◂◂{ E D } { v l0 l1 } ⊢ { v l0 l1 b1 } 
			bl.and { b0 b1 } ⊢ b 
			∎ { v _cns◂{ p0 l0 } _cns◂{ p1 l1 } b }
		∐ l0 ⊢ _nil◂{}; l1 ⊢ _nil◂{} . 
			∎ { v _nil◂{} _nil◂{} bl.t◂{} }
		∐. . 
			D { v l0 l1 } ⊢|
	§ eq_v_exn # { v l0 l1 } 
		_emt %[ "eq_v 0" ] ⊢ _ 
		∎| 
	§ eq_v_f # { v l0 l1 } 
		∎ { v l0 l1 bl.f◂{} }
	§ eq_v_err◂◂E # { v l0 l1 } 
		eq_v◂◂{ E eq_v_exn } { v l0 l1 } ⊢|  
	§ eq_v_f◂◂E # { v l0 l1 } 
	 	eq_v◂◂{ E eq_v_f } { v l0 l1 } ⊢| 

	§ e_u◂◂E # { {} x y } 
		E { x y } ⊢ { x y b }
		∎ { {} x y b }
	§ eq◂◂E # { l0 l1 } 
		eq_v_f◂◂(e_u◂◂E) { {} l0 l1 } ⊢ { {} l0 l1 b } 
		∎ { l0 l1 b }

	§ @.fld_lr◂◂{ F0 F1 F2 } { v l } 
		$ l ⊢ 
		∐ _cns◂{ a l } .
			F0 { v a } ⊢ { v b } 
			fld_lr◂◂{ F0 F1 F2 } { v l } ⊢ w 
			F1 { w b } ⊢ w 
			∎ w 
		∐. _nil◂{} . 
			F2 v ⊢ w 
			∎ w 
	§ @.fld_l◂◂F { v l }
		$ l ⊢ 
		∐ _cns◂{ a l } .
			F { v a } ⊢ v 
			\\_emt %[ "fld_l D0" ] ⊢ _ 
			fld_l◂◂F { v l } ⊢| 
		∐. _nil◂{} . 
			\\_emt %[ "fld_l D1" ] ⊢ _ 
			∎ v
	§ @.fld_r◂◂F { v l } 
		$ l ⊢ 
		∐ _cns◂{ a l } . 
			fld_r◂◂F { v l } ⊢ v 
			F { a v } ⊢ v 
			∎ v 
		∐. _nil◂{} . 
			∎ v 
	§ @.pp_l◂◂{ F S } { e v l } 
		$ l ⊢ 
		∐ _cns◂{ a l } . 
			F { v a } ⊢ { v s }
			rp8.add_s8 { e s } ⊢ e 
			∐ l ⊢ _cns◂{ a l } . 
				rp8.add_s8 { e %[ S ] } ⊢ e 
				F { v a } ⊢ { v s }
				rp8.add_s8 { e s } ⊢ e 
				pp_l◂◂{ F S } { e v l } ⊢|
			∐. . 
				∎ { e v }
		∐. _nil◂{} . 
			∎ { e v } 
	§ @.pnt_l◂◂{ F S } { v l } 
		$ rp8.e◂{} ⊢ e 
		pp_l◂◂{ F S } { e v l } ⊢ { e v } 
		rp8.to_s8 e ⊢ s 
		∎ { v s } 
	§ @.pnt◂◂{ F S } l 
		$ l ⊢ 
		∐ _cns◂{ a l } .
			F a ⊢ s 
			∐ l ⊢ _nil◂{} . 
				∎ s
			∐. . 
				pnt◂◂{ F S } l ⊢ s1  
				^ s,s1 ⊢ _,_,sr 
					0' S 1' // 
				∎ sr  
		∐. _nil◂{} . 
			∎ %[ "" ] 
	\\[
	§ @.map_l◂◂F { v l } 
		$ l ⊢ 
		∐ _cns◂{ a l } . 
			F { v a } ⊢ { v b } 
			map_l◂◂F { v l } ⊢ { v l } 
			$ _cns◂{ b l } ⊢ l 
			∎ { v l } 
		∐. _nil◂{} .
			$ _nil◂{} ⊢ l 
			∎ { v l } 
	\\]
	\[
	§ @.map_l◂◂F { v l } 
		∐ l ⊢_cns◂{ a0 l }; l ⊢ _cns◂{ a1 l } . 
			F { v a0 } ⊢ { v b0 } 
			F { v a1 } ⊢ { v b1 } 
			map_l◂◂F { v l } ⊢ { v l } 
			∎ { v ⟦ b0 b1 < l ⟧ } 
		∐ l ⊢ _cns◂{ a0 l }; l ⊢ _nil◂{} .
			F { v a0 } ⊢ { v b0 } 
			∎ { v ⟦ b0 ⟧ } 
		∐. l ⊢ _nil◂{} .
			∎ { v ⟦⟧ } 
			\]
	§ @.map_l_x◂◂F { v l } 
		$ l ⊢ 
		∐ _cns◂{ a l } .
			F { v a } ⊢ { v b c } 
			map_l_x◂◂F { v l } ⊢ { v l lx } 
			∎ { v _cns◂{ %b l } _cns◂{ %c lx } }
		∐. _nil◂{} . 
			∎ { v _nil◂{} _nil◂{} }
	§ @.map_r◂◂F { v l } 
		$ l ⊢ 
		∐ _cns◂{ a l } . 
			map_r◂◂F { v l } ⊢ { v l } 
			F { v a } ⊢ { v b } 
			$ _cns◂{ b l } ⊢ l 
			∎ { v l } 
		∐. _nil◂{} .
			$ _nil◂{} ⊢ l 
			∎ { v l }

	§ @.len l 
		$ l ⊢ 
		∐ _cns◂{ a l } . 
			len l ⊢ { l n } 
			$ _cns◂{ a l } ⊢ l 
			_inc n ⊢ n 
			∎ { l n } 
		∐. _nil◂{} . 
			» 0r _ ⊢ n 
			$ _nil◂{} ⊢ l 
			∎ { l n }
	§ @.csm { l a } 
		$ l ⊢ 
		∐ _cns◂{ x l } . 	
			∐ x'=a' . 
				csm { l a } ⊢| 
			∐. . 
				csm { l a } ⊢ { l a } 
				$ _cns◂{ x l } ⊢ l 
				∎ { l a }
		∐. _nil◂{} . 
			$ _nil◂{} ⊢ l 
			∎ { l a }
	§ @.nth { l i } 
		$ l ⊢ 
		∐ _cns◂{ a l } . 
			∐ i'=0r . 
				∎ { a l } 
			∐. . 
				_dec i ⊢ i 
				nth { l i } ⊢ { b l } 
				$ _cns◂{ a l } ⊢ l 
				∎ { b l } 
		∐. _nil◂{} . 
			» "nth 0" _ ⊢ se 
			_emt se ⊢ se 
			∎| 
	§ @.prj { l i } 
		$ l ⊢ 
		∐ _cns◂{ a l } . 
			∐ i'=0r . 
				∎ a 
			∐. . 
				_dec i ⊢ i 
				prj { l i } ⊢|
		∐. _nil◂{} . 
			» "prj 0" _ ⊢ se 
			_emt se ⊢ se 
			_emt i ⊢ i 
			∎| 
	§ @.add { l a } 
		$ l ⊢ 
		∐ _cns◂{ b l } . 
			∐ a'=b' . 
				$ _cns◂{ b l } ⊢ l 
				∎ l 
			∐. . 
				add { l a } ⊢ l 
				$ _cns◂{ b l } ⊢ l 
				∎ l 
		∐. _nil◂{} . 
			$ _nil◂{} ⊢ l 
			$ _cns◂{ a l } ⊢ l 
			∎ l 
	∎∎
§§ log 
	¶ t = { rp8.t _lst◂rp8.t }
	§ ini◂{} = { rp8.e◂{} _nil◂{} } 
	§ push◂{ t x } = { rp8.e◂{} _cns◂{ t x } } 
	§ pop { t x } 
		$ x ⊢ 
		∐ _cns◂{ e x } . 
			∎ { t { e x } }  
		∐. _nil◂{} . 
			∎ { t { rp8.e◂{} _nil◂{} } } 
			
	§ add_s8 { { t l } s } 
		rp8.add_s8 { t s } ⊢ t
		∎ { t l } 
	§ emt_i { {} e } 
		rp8.mk_s8 e ⊢ { e s } 
		_emt s ⊢ _ 
		∎ { {} e } 
	§ emt { t l }
			lst.map_r◂◂emt_i { {} l } ⊢ { {} l } 
			rp8.mk_s8 t ⊢ { t s } 
			_emt s ⊢ _ 
			∎ { t l }
	∎∎
\\[
§ subst { sl r0 } 
	assoc { sl r0 } ⊢ { sl r0 o } 
	$ o ⊢ 
	∐ _some◂r1 . 
		∎ { sl r1 } 
	∐. _none◂{} . 
		∎ { sl r0 } 
\\]
\\§ @.subst_lst = lst.map_l◂◂subst 
§§ p_lst 
	§ @.map_l◂◂F { v l } 
		$ l ⊢ 
		∐ p_cns◂{ a l } . 
			F { v a } ⊢ { v b } 
			map_l◂◂F { v l } ⊢ { v l } 
			∎ { v p_cns◂{ b l } } 
		∐. p_end◂a .
			F { v a } ⊢ { v b } 
			∎ { v p_end◂b } 
	§ @.fld_l◂◂F { v l }
		$ l ⊢ 
		∐ p_cns◂{ a l } . 
			F { v a } ⊢ v 
			fld_l◂◂F { v l } ⊢| 
		∐. p_end◂a .
			F { v a } ⊢|
	∎∎
§§ hsh_tbl 
	§§  el
		§ @.asc { { s {} } l } 
			$ l ⊢ 
			∐ _cns◂{ { t v } l } . 
				∐ s'=t' . 
					$ v ⊢ v,v0 
					∎ { { s ‹ v0 › } ⟦ { t v } < l ⟧  }
				∐. . 
					asc { { s {} } l } ⊢ { { s o } l } 
					∎ { { s o } ⟦ { t v } < l ⟧  }
			∐. _nil◂{} . 
				∎ { { s ‹› } ⟦⟧ }
		§ @.get { { s {} } l } 
			$ l ⊢ 
			∐ _cns◂{ { t v } l } . 
				∐ s'=t' . 
					∎ { { s ‹ v › } l }
				∐. . 
					get { { s {} } l } ⊢ { { s o } l } 
					∎ { { s o } ⟦ { t v } < l ⟧ }
			∐. _nil◂{} . 
				∎ { { s ‹› } ⟦⟧ }
		§ @.set { { s w } l } 
			$ l ⊢ 
			∐ _cns◂{ { t v } l } . 
				∐ s'=t' . 
					∎ { { s ‹ v › } ⟦ { t w } < l ⟧ }
				∐. . 
					set { { s w } l } ⊢ { { s o } l } 
					∎ { { s o } ⟦ { t v } < l ⟧ }
			∐. _nil◂{} . 
				$ s ⊢ s,s0
				∎ { { s ‹› } ⟦ { s0 w } ⟧ } 
		\[
		§ @.la◂◂F { { s d } l }
			$ l ⊢ 
			∐ _cns◂{ { t v } l } . 
				∐ s'=t' . 
					$ s ⊢ s,s0 
					F { d s0 v } ⊢ { d v } 
					∎ { { s d } ⟦ { t v } < l ⟧ }
				∐. . 
					la◂◂F { { s d } l } ⊢ { { s d } l } 
					∎ { { s d } ⟦ { t v } < l ⟧ }
			∐. _nil◂{} . 
				∎ { { s d } ⟦⟧ }
				\]
		∎∎
	§ ini # n 
		_shl { %[ 1r ] n } ⊢ { l n }  
		_mk_arr { l ⟦⟧ } ⊢ { l _ a } 
		_dec l ⊢ l 
		∎ { l a } 
	§ f◂◂{ F H } # { { m a } { s v } }
		H s ⊢ { s h } 
		_and { h m } ⊢ { h m } 
		_exc_q { a h ⟦⟧ } ⊢ { a h l }
		F { { s v } l } ⊢ { { s w } l }
		_exc_q { a h l } ⊢ { a h _ } 
		∎ { { m a } { s w } } 
	§ asc◂◂H # { t s } 
		f◂◂{ el.asc H } { t { s {} } } ⊢| 
	§ get◂◂H # { t s } 
		f◂◂{ el.get H } { t { s {} } } ⊢|
	§ set◂◂H # { t { s v } } 
		f◂◂{ el.set H } { t { s v } } ⊢| 
	\[
	§ la◂◂{ H F } # { t { s d } }
		f◂◂{ el.la H } { t { s d } } ⊢|
	\]
	§ @.itr_i◂◂F { { { m a } n v } i } 
    ∐ n'<>i' . 
      _lod_q { a i } ⊢ { a i l } 
      lst.fld_l◂◂F { v l } ⊢ v 
      _inc i ⊢ i 
      itr_i◂◂F { { { m a } n v } i } ⊢|
    ∐. .
      ∎ { { m a } v }
  § itr◂◂F # { { m a } v }
    _arr_len a ⊢ { a n } 
  	itr_i◂◂F { { { m a } n v } %[ 0r ] } ⊢|
	§ @.rb_i◂◂F { { { m a } n v } i } 
    ∐ n'<>i' .
      _exc_q { a i ⟦⟧ } ⊢ { a i l } 
      lst.fld_l◂◂F { v l } ⊢ v 
      _inc i ⊢ i 
      rb_i◂◂F { { { m a } n v } i } ⊢|
    ∐. . 
      ∎ { { m a } v }
  § rb◂◂F # { { m a } v }
    _arr_len a ⊢ { a n } 
  	rb_i◂◂F { { { m a } n v } %[ 0r ] } ⊢|
	§ @.fld_i◂◂F { { { m a } n v } i } 
    ∐ n'=i' .
      ∎ v
    ∐. . 
      _exc_q { a i ⟦⟧ } ⊢ { a i l } 
      lst.fld_l◂◂F { v l } ⊢ v 
      _inc i ⊢ i 
      fld_i◂◂F { { { m a } n v } i } ⊢|
  § fld◂◂F # { v { m a } }
    _arr_len a ⊢ { a n } 
  	fld_i◂◂F { { { m a } n v } %[ 0r ] } ⊢|
	§ is_empty_i # { b _ } 
		∎ bl.f◂{} 
	§ is_empty # a 
		itr◂◂is_empty_i { a bl.t◂{} } ⊢| 
	§§ s8 
		¶ t a' = { _r64 _arr◂(_lst◂{ _s8 a' }) } 
		§ SEED = 0xf7f765d79dabbacer
		§ M = 0xc6a4a7935bd1e995r
		§ R = 47r 
		\[
		§ @.hsh_i { { s n h } i } 
			∐ i'<>n' . 
				_lds64 { s i } ⊢ { s i k } 
				_add { i %[ 8r ] } ⊢ { i _ } 
				_imul { k %[ M ] } ⊢ { k _ } 
				$ k ⊢ k,k0 
				_shr { k0 %[ R ] } ⊢ { k0 _ } 
				_xor { k k0 } ⊢ { k _ }
				_imul { k %[ M ] } ⊢ { k _ } 
				_xor { h k } ⊢ { h _ } 
				_imul { h %[ M ] } ⊢ { h _ } 
				hsh_i { { s n h } i } ⊢| 
			∐. .
				∎ { s n h }
		§ @.hsh_m { { s h m } { x n } } 
			∐ x'<>0r . 
				_dec n ⊢ n 
				_lds { s n } ⊢ { s n r } 
  	    _shl { r x } ⊢ { r x } 
				_sub { x %[ 8r ] } ⊢ { x _ } 
  	    _xor { h r } ⊢ { h _ } 
				hsh_m { { s h m } { x n } } ⊢| 
			∐. . 
				_imul { h m } ⊢ { h _ } 
				∎ { s h } 
		§ hsh s 
			_s8_len s ⊢ { s l } 
			$ l ⊢ l,n,m 
			_and { m %[ 7r ] } ⊢ { m _ } 
			_shr { n %[ 3r ] } ⊢ { n _ } 
			_shl { n %[ 3r ] } ⊢ { n _ } 
			_imul { %[ M ] l } ⊢ { h l } 
			_xor { h %[ SEED ] } ⊢ { h _ } 
  	  hsh_i { { s n h } %[ 0r ] } ⊢ { s n h } 
  	  _add { n m } ⊢ { n m } 
			hsh_m { { s h m } { %[ 48r ] n } } ⊢ { s h } 
  	  $ h ⊢ h,h0 
			_shr { h0 %[ R ] } ⊢ { h0 _ } 
			_xor { h h0 } ⊢ { h _ } 
			_imul { h %[ M ] } ⊢ { h _ } 
			$ h ⊢ h,h0 
			_shr { h0 %[ R ] } ⊢ { h0 _ } 
			_xor { h h0 } ⊢ { h _ } 
			∎ { s h }
		\]
		§ hsh = _s8_hsh 
		§ asc = asc◂◂hsh 
		§ set = set◂◂hsh 
		§ get = get◂◂hsh
		\[
		§ la◂◂F { t { s d } } 
			la◂◂{ hsh F } { t { s d } } ⊢| 
	§% 
    $ %[ "e" ] ⊢ s 
    \\_lds64 { s %[ 0r ] } ⊢ { s _ x } 
    \\_emt x ⊢ _ 
    hsh s ⊢ { _ h }  
		_emt h ⊢ _ 
		∎|
	\]
		∎∎
	§§ r64 
		§ hsh # x 
			$ x ⊢ x,h 
			_shl { h %[ 32r ] } ⊢ { h _ } 
			_add { h %[ 1r ] } ⊢ { h _ } 
			_imul { h x } ⊢ { h x } 
			∎ { x h }
		§ asc = asc◂◂hsh 
		§ set = set◂◂hsh 
		§ get = get◂◂hsh
		\[
		§ la◂◂F { t { s d } } 
			la◂◂{ hsh F } { t { s d } } ⊢| 
		\]
		∎∎
	∎∎
§
	@.esc_s8 +s8 
		∐ "\n" esc_s8 ⊢ { {} e0 }
			rp8.pfx_s8 { %[ "\\n" ] e0 } ⊢ e0 
			∎ _some◂e0 
		∐ "\t" esc_s8 ⊢ { {} e0 }
			rp8.pfx_s8 { %[ "\\t" ] e0 } ⊢ e0 
			∎ _some◂e0 		
		∐ "\\" esc_s8 ⊢ { {} e0 }
			rp8.pfx_s8 { %[ "\\\\" ] e0 } ⊢ e0 
			∎ _some◂e0
		∐ "\"" esc_s8 ⊢ { {} e0 }
			rp8.pfx_s8 { %[ "\\\"" ] e0 } ⊢ e0 
			∎ _some◂e0
		
		∐ _byt esc_s8 ⊢ { b e0 }
			∐ b'=0r . 
				rp8.pfx_s8 { %[ "\\0" ] e0 } ⊢ e0 
				∎ _some◂e0
			∐. . 
				rp8.pfx_chr { b e0 } ⊢ e0 
				∎ _some◂e0
		∐. ⊢ { } 
			∎ _some◂rp8.e◂{}
§§ esc_s8 
	§ @.lp { s es l i0 i1 }
		∐ l'=i0' . 
			∎ { s es l i1 }
		∐. . 
			_lds { s i0 } ⊢ { s i0 c } 
			_inc i0 ⊢ i0 
			∐ c'=chr.nl . 
				_sts { es i1 %[ chr.slsh ] } ⊢ { es i1 _ } 
				_inc i1 ⊢ i1 
				_sts { es i1 %[ chr.n ] } ⊢ { es i1 _ } 
				_inc i1 ⊢ i1 
				lp { s es l i0 i1 } ⊢| 
			∐ c'=chr.tab . 
				_sts { es i1 %[ chr.slsh ] } ⊢ { es i1 _ } 
				_inc i1 ⊢ i1 
				_sts { es i1 %[ chr.t ] } ⊢ { es i1 _ } 
				_inc i1 ⊢ i1 
				lp { s es l i0 i1 } ⊢| 
			∐ c'=chr.slsh . 
				_sts { es i1 %[ chr.slsh ] } ⊢ { es i1 _ } 
				_inc i1 ⊢ i1 
				_sts { es i1 %[ chr.slsh ] } ⊢ { es i1 _ } 
				_inc i1 ⊢ i1 
				lp { s es l i0 i1 } ⊢| 
			∐ c'=chr.dq . 
				_sts { es i1 %[ chr.slsh ] } ⊢ { es i1 _ } 
				_inc i1 ⊢ i1 
				_sts { es i1 %[ chr.dq ] } ⊢ { es i1 _ } 
				_inc i1 ⊢ i1 
				lp { s es l i0 i1 } ⊢| 
			∐ c'=0r . 
				_sts { es i1 %[ chr.slsh ] } ⊢ { es i1 _ } 
				_inc i1 ⊢ i1 
				_sts { es i1 %[ chr.d_0 ] } ⊢ { es i1 _ } 
				_inc i1 ⊢ i1 
				lp { s es l i0 i1 } ⊢| 
			∐. . 
				_sts { es i1 c } ⊢ { es i1 _ } 
				_inc i1 ⊢ i1 
				lp { s es l i0 i1 } ⊢| 
	§ f # s 
		_s8_len s ⊢ { s l } 
		$ l ⊢ l,x 
		_shl { x %[ 2r ] } ⊢ { x _ } 
		_mlc_s8 x ⊢ { x es0 } 
		lp { s es0 l %[ 0r ] %[ 0r ] } ⊢ { s es0 l i1 }
		_mlc_s8 i1 ⊢ { i1 es1 } 
		rep_movsb { i1 es0 %[ 0r ] es1 %[ 0r ] } ⊢ { _ _ _ es1 _ } 
		∎ { s es1 }
	∎∎
§ mk_esc_s8 = esc_s8.f 
§
	@.stg_ltr +s8
	∐. "\"" stg_ltr_seq ⊢ { {} cl }
		rp8.to_s8 cl ⊢ s
		_some s ⊢ a
		∎ a
	@.stg_ltr_seq +s8
	∐ "\n" !| ⊢ { xx } 
		$ _none◂{} ⊢ a 
		∎ a 
	∐ "\\" stg_ltr_sp stg_ltr_seq ⊢ { {} c0 cl }
		rp8.pfx_chr { c0 cl } ⊢ cl 
		_some cl ⊢ a
		∎ a
	∐ "\"" ⊢ { {} }
		∎ _some◂rp8.e◂{}
	∐. _byt stg_ltr_seq ⊢ { c0 cl }
		rp8.pfx_chr { c0 cl } ⊢ cl 
		_some cl ⊢ a
		∎ a
	@.stg_ltr_sp +s8
	∐ "\\" ⊢ { {} }
		∎ _some◂%[ 92r ]
	∐ "\"" ⊢ { {} }
		∎ _some◂%[ 34r ]
	∐ "n" ⊢ { {} }
		∎ _some◂%[ 10r ]
	∐ "t" ⊢ { {} }
		∎ _some◂%[ 9r ]
	∐. "0" ⊢ { {} }
		∎ _some◂%[ 0r ]

§
	@.dgt +s8
	∐. _byt ⊢ { c }
		∐ c'=<57r; 48r=<c' . 
			∎ _some◂c
		∐. .
			∎ _none◂{}
  §
	@.ch_l +s8
	∐. _byt ⊢ { c }
		∐ c'=<122r; 97r=<c' . 
			∎ _some◂c
		∐. .
			∎ _none◂{}

§
	@.ch_u +s8
	∐. _byt ⊢ { c }
		∐ c'=<90r; 65r=<c' . 
			_some c ⊢ a
			∎ a
		∐. .
			$ _none◂{} ⊢ a
			∎ a

§
	@.ch_a +s8
	∐ ch_u ⊢ { c }
		_some c ⊢ a
		∎ a 
	∐. ch_l ⊢ { c }
		_some c ⊢ a
		∎ a

§
	@.word +s8
	∐. ch_a word_tl ⊢ { c0 cl }
		rp8.pfx_chr { c0 cl } ⊢ cl 
		rp8.to_s8 cl ⊢ s 
		_some s ⊢ a
		∎ a
	@.word_tl +s8
	∐ word_hd word_tl ⊢ { c tl }
		rp8.pfx_chr { c tl } ⊢ l 
		_some l ⊢ a
		∎ a
	∐. ⊢ { }
		$ rp8.e◂{} ⊢ l 
		_some l ⊢ a 
		∎ a
	@.word_hd +s8
	∐ ch_a ⊢ { c }
		_some c ⊢ a
		∎ a
	∐ dgt ⊢ { c }
		_some c ⊢ a
		∎ a
	∐. "_" ⊢ { {} }
		» 95r _ ⊢ c
		_some c ⊢ a
		∎ a

§
	@.prm_word +s8
	∐ "_" word ⊢ { {} s }
		^ s ⊢ s,sr 
			"_" 0' // 
		_some sr ⊢ a 
		∎ a
	∐. word ⊢ { s }
		_some s ⊢ a
		∎ a
§ 
	@.reg_word  +s8
		∐ "%" !| prm_word ⊢ { {} w }
			_some w ⊢ a 
			∎ a 
		∐. prm_word ⊢ { w } 
			_some w ⊢ a 
			∎ a 
§ 
	@.tpl_word  +s8
		∐ "%" !| word ⊢ { {} w } 
			∎ _some◂w 
		∐. word ⊢ { w } 
			∎ _some◂w 
§§ OpADL
	§§ reg_ptn
		¶ @.t ◂ a'
			∐ rcd : _lst◂(t◂a')
			∐ atm : a'
		§ atm_a p 
			∐ p ⊢ atm◂a . 
				∎ a 
			∐. . 
				∎|  
		§ 
			@.stx◂◂G +s8
				∐# "{" lst.stx_line◂◂stx◂◂G "}" ⊢ { {} l {} }
					∎ _some◂rcd◂l 
				∐.# G ⊢ { a } 
					∎ _some◂atm◂a 

		§ @.eq_v◂◂E { v c0 c1 } 
			∐ c0 ⊢ atm◂a0; c1 ⊢ atm◂a1 . 
				E { v a0 a1 } ⊢ { v a0 a1 b } 
				∎ { v atm◂a0 atm◂a1 b }
			∐ c0 ⊢ rcd◂l0; c1 ⊢ rcd◂l1 . 
				lst.eq_v_err◂◂(eq_v◂◂E) { v l0 l1 } ⊢ { v l0 l1 b } 
				rcd l0 ⊢ c0 
				rcd l1 ⊢ c1 
				∎ { v c0 c1 b } 
			∐. . 
				∎ { v c0 c1 f◂{} } 
		§ 
			@.map_l◂◂F { v p } 
				$ p ⊢ 
				∐ rcd◂l . 
					map_l_lst◂◂F { v l } ⊢ { v l } 
					∎ { v rcd◂l } 
				∐. atm◂a . 
					F { v a } ⊢ { v b } 
					∎ { v atm◂b } 
			@.map_l_lst◂◂F { v l } 
				$ l ⊢ 
				∐ _cns◂{ p l } . 
					map_l◂◂F { v p } ⊢ { v p } 
					map_l_lst◂◂F { v l } ⊢ { v l } 
					∎ { v _cns◂{ p l } } 
				∐. _nil◂{} . 
					∎ { v ⟦⟧ }
		§ 
			@.map_l_x◂◂F { v p } 
				$ p ⊢ 
				∐ rcd◂l . 
					map_l_x_lst◂◂F { v l } ⊢ { v l lx }
					∎ { v rcd◂%l rcd◂%lx } 
				∐. atm◂a . 
					F { v a } ⊢ { v a ax } 
					∎ { v atm◂a ax } 
			@.map_l_x_lst◂◂F { v l } 
				$ l ⊢ 
				∐ _cns◂{ p l } . 
					map_l_x◂◂F { v p } ⊢ { v p px } 
					map_l_x_lst◂◂F { v l } ⊢ { v l lx } 
					∎ { v _cns◂{ p l } _cns◂{ px lx } }
				∐. _nil◂{} . 
					∎ { v _nil◂{} _nil◂{} } 

		§ 
			@.map_l_atm◂◂F { v p }  
				$ p ⊢ 
				∐ rcd◂l . 
					map_l_atm_lst◂◂F { v l } ⊢ { v l } 
					∎ { v rcd◂l } 
				∐. atm◂a . 
					F { v a } ⊢|
			@.map_l_atm_lst◂◂F { v l } 
				$ l ⊢ 
				∐ _cns◂{ p l } . 
					map_l_atm◂◂F { v p } ⊢ { v p } 
					map_l_atm_lst◂◂F { v l } ⊢ { v l } 
					∎ { v _cns◂{ p l } } 
				∐. _nil◂{} . 
					∎ { v ⟦⟧ }
		§ 
			@.fld_l◂◂F { v p } 
				$ p ⊢ 
				∐ rcd◂l . 
					fld_l_lst◂◂F { v l } ⊢| 
				∐. atm◂a . 
					F { v a } ⊢| 
			@.fld_l_lst◂◂F { v l } 
				$ l ⊢ 
				∐ _cns◂{ p l } . 
					fld_l◂◂F { v p } ⊢ v 
					fld_l_lst◂◂F { v l } ⊢| 
				∐. _nil◂{} . 
					∎ v 
			
		§ 
			@.pp_l◂◂P { e v p } 
				$ p ⊢ 
				∐ rcd◂l . 
					rp8.add_s8 { e %[ "{ " ] } ⊢ e 
					pp_l_lst◂◂P { e v l } ⊢ { e v } 
					rp8.add_s8 { e %[ "}" ] } ⊢ e  
					∎ { e v } 
				∐. atm◂a . 
					P { v a } ⊢ { v s } 
					rp8.add_s8 { e s } ⊢ e 
					∎ { e v } 
			@.pp_l_lst◂◂P { e v l } 
				$ l ⊢ 
				∐ _cns◂{ p l } . 
					pp_l◂◂P { e v p } ⊢ { e v } 
					rp8.add_s8 { e %[ " " ] } ⊢ e 
					pp_l_lst◂◂P { e v l } ⊢| 
				∐. _nil◂{} . 
					∎ { e v }
		§ pnt_l◂◂P { v p } 
			$ rp8.e◂{} ⊢ e 
			pp_l◂◂P { e v p } ⊢ { e v } 
			rp8.to_s8 e ⊢ s 
			∎ { v s } 
		§ pnt_l_lst◂◂P { v l } 
			$ rp8.e◂{} ⊢ e 
			pp_l_lst◂◂P { e v l } ⊢ { e v } 
			rp8.to_s8 e ⊢ s 
			∎ { v s } 
		§ unt◂{} = rcd◂_nil◂{} 
		§ cns1◂a = rcd◂cns1◂a 
		§ cns2◂{ a0 a1 } = rcd◂cns2◂{ a0 a1 }
		§ cns3◂{ a0 a1 a2 } = rcd◂cns3◂{ a0 a1 a2 }
		§ cns4◂{ a0 a1 a2 a3 } = rcd◂cns4◂{ a0 a1 a2 a3 } 
		§ cns5◂{ a0 a1 a2 a3 a4 } = rcd◂cns5◂{ a0 a1 a2 a3 a4 }
		∎∎
	§§ RP = reg_ptn
	
	§§ rset
		¶ t = _arr◂bl.t 
		§ N = 80000r 
		§ ini # {} 
			mk_arr { %[ N ] bl.f◂{} } ⊢ { _ _ v } 
			∎ v 
		§ max_t_i { m i b } 
			∐ b ⊢ bl.t◂{} . 
				∎ i 
			∐. . 
				∎ m 
		§ max_t # v 
			arr.itr_lft◂◂max_t_i { v %[ 0r ] } ⊢| 

		§§ pnt 
			§ lp_i { s j b }
				∐ b ⊢ bl.t◂{} . 
					_sts { s j %[ 49r ] } ⊢ { s _ _ } 
					∎ s
				∐. . 
					_sts { s j %[ 48r ] } ⊢ { s _ _ } 
					∎ s 					 
			§ @.lp { v i s j }
				∐ i'=j' . 
					» 49r _ ⊢ c 
					_sts { s j c } ⊢ { s j c } 
					∎ { v s } 
				∐. . 
					_lod_q { v j } ⊢ { v j b } 
					∐ b ⊢ bl.t◂{} . 
						» 49r _ ⊢ c 
						_sts { s j c } ⊢ { s j c } 
						_inc j ⊢ j 
						lp { v i s j } ⊢| 
					∐. . 
						» 48r _ ⊢ c 
						_sts { s j c } ⊢ { s j c } 
						_inc j ⊢ j 
						lp { v i s j } ⊢|   
			§ f # v 
				max_t v ⊢ { v i } 
				_inc i ⊢ i 
				_mlc_s8 i ⊢ { i s } 
				_dec i ⊢ i 
				» 0r _ ⊢ j
				lp { v i s j } ⊢|
			∎∎
		§ set_t # { v0 i } 
			exc_q { v0 i t◂{} } ⊢ { v0 i b } 
			∎ { v0 i }
		§ set_f # { v0 i } 
			exc_q { v0 i f◂{} } ⊢ { v0 i b } 
			∎ { v0 i }
		§ and = arr.mlt◂◂bl.and 
		§ or = arr.mlt◂◂bl.or
		§ sub = arr.mlt◂◂bl.sub 
		§ min_f_i # { i b } 
			$ b ⊢ b,b0 
			bl.not b0 ⊢ b0 
			∎ { i b b0 } 
		§ min_f v 
			arr.fnd_lft◂◂min_f_i v ⊢ { v o } 
			smt_err◂◂"min_f" o ⊢ { i _ } 
			∎ { v i }
		§ min_f_s_i { i b } 
			∐ 8r=<i' . 
				$ b ⊢ b,b0 
				bl.not b0 ⊢ b0 
				∎ { i b b0 }
			∐. . 
				∎ { i b bl.f◂{} } 
		§ min_f_s # v 
			arr.fnd_lft◂◂min_f_s_i v ⊢ { v o } 
			smt_err◂◂"min_f_s" o ⊢ { i _ } 
			∎ { v i }
		§ min_t_i # { i b } 
			$ b ⊢ b,b0 
			∎ { i b b0 } 
		§ min_t # v 
			arr.fnd_lft◂◂min_t_i v ⊢ { v o } 
			smt_err◂◂"min_t" o ⊢ { i _ } 
			∎ { v i }
		§ is_zero_i { i b } 
			$ b ⊢ b,b0 
			∎ { i b b0 } 
		§ is_zero v 
			arr.fnd_lft◂◂is_zero_i v ⊢ { v o } 
			∐ o ⊢ _none◂{} . 
				∎ { v bl.t◂{} }
			∐. . 
				∎ { v bl.f◂{} }
		∎∎
		
		§§ type 
			¶
			@.id = _r64 
			@.t_atm v'
				∐ dta : { id _lst◂(t◂v') }
				∐ imp : { t◂v' t◂v' }
				∐ ct_imp : { t◂v' t◂v' }
				∐ abs : { v' t◂v' }
				∐ var : v'
			@.t v' = RP.t◂(t_atm◂v')
			@.aux v' = { _lst◂v' _lst◂(t◂v') } 
			@.aux_vct v' = _arr◂(aux◂v')
			@.exp v'
				∐ type_k : t◂v'  
				∐ app : { exp◂v' exp◂v' }
			@.var v'
				∐ var_l : _r64
				∐ var_q : _r64 
				∐ var_ln : t◂v'
				##∐ var_app : { t◂v' t◂v' }
				∐ var_i : {}  
			§ 
				@.fld_atm◂◂{ F ABS VAR } { v k } 
					$ k ⊢ 
					∐ dta◂{ ax0 ql0 } . 
						RP.fld_l_lst◂◂(fld_atm◂◂{ F ABS VAR }) { v ql0 } ⊢| 
					∐ imp◂{ k0 k1 } . 
						RP.fld_l◂◂(fld_atm◂◂{ F ABS VAR }) { v k0 } ⊢ v 
						RP.fld_l◂◂(fld_atm◂◂{ F ABS VAR }) { v k1 } ⊢| 
					∐ imp◂{ k0 k1 } . 
						RP.fld_l◂◂(fld_atm◂◂{ F ABS VAR }) { v k0 } ⊢ v 
						RP.fld_l◂◂(fld_atm◂◂{ F ABS VAR }) { v k1 } ⊢| 
					∐ abs◂{ vv0 k0 } .
						ABS { v { vv0 k0 } } ⊢| 
					∐. var◂i0 . 
						VAR { v i0 } ⊢| 
			§ newvar_i # { tv_n tv } 
			var_i {} ⊢ v
			set_tv { tv tv_n v } ⊢ { tv tv_n } 
			$ tv_n ⊢ tv_n,tv_n0 
			_inc tv_n ⊢ tv_n 
			∎ { tv_n tv tv_n0 }
		§ newvar_l # { tv_n tv lv } 
			$ lv ⊢ lv,lv0 
			set_tv { tv tv_n var_l◂lv0 } ⊢ { tv tv_n } 
			inc_x tv_n ⊢ { tv_n0 tv_n } 
			∎ { tv_n tv lv RP.atm◂var◂tv_n0 }
		§ newvar_q # { tv_n tv lv } 
			$ lv ⊢ lv,lv0 
			var_q lv0 ⊢ v
			set_tv { tv tv_n v } ⊢ { tv tv_n } 
			$ tv_n ⊢ tv_n,tv_n0 
			_inc tv_n ⊢ tv_n 
			var tv_n0 ⊢ y  
			RP.atm y ⊢ y 
			∎ { tv_n tv lv y }
		§ newvar_ln # { tv_n tv y } 
			var_ln y ⊢ v 
			set_tv { tv tv_n v } ⊢ { tv tv_n }
			$ tv_n ⊢ tv_n,tv_n0 
			_inc tv_n ⊢ tv_n 
			∎ { tv_n tv tv_n0 }
		§§ t_axm 
  		§§ id 
				§ r64 = 0r 
  			§ s8 = 1r 
				§ arr = 2r  
				§ Clr = 3r 
				§ pt = 4r 
  			§ lst = 5r 
  			§ opn = 6r 
				§ r32 = 7r 
				§ r16 = 8r 
				§ r8 = 9r 
  			§ r4 = 10r 
				§ r2 = 11r 

				§ ext = 12r 
				§ grm = 13r 
				§ arr0 = 14r 
				∎∎
			§ N0 = 15r 
			
			§ t_imp◂i = RP.atm◂imp◂i 
			§ t_ct_imp◂{ i0 i1 } = RP.atm◂ct_imp◂{ i0 i1 } 
			§ t_ct_imp2◂{ i0 i1 i2 } = t_ct_imp◂{ i0 t_ct_imp◂{ i1 i2 } }
			§ t_ct_imp3◂{ i0 i1 i2 i3 } = t_ct_imp◂{ i0 t_ct_imp◂{ i1 t_ct_imp◂{ i2 i3 } } }
			§ t_dta◂d = RP.atm◂dta◂d
			§ t_var◂i = RP.atm◂var◂i 
			§ unt◂{} = RP.rcd◂_nil◂{} 
			§ r64◂{} = t_dta◂{ %[ id.r64 ] _nil◂{} } 
			§ s8◂{} = t_dta◂{ %[ id.s8 ] _nil◂{} }
			§ r64_p2◂{} = RP.cns2◂{ r64◂{} r64◂{} } 
			§ r64_op2◂{} = t_imp◂{ r64_p2◂{} r64_p2◂{} } 
			§ r64_op1◂{} = t_imp◂{ r64◂{} r64◂{} } 
			§ lst◂y = t_dta◂{ %[ id.lst ] _cns◂{ %y _nil◂{} } } 
			§ opn◂y = t_dta◂{ %[ id.opn ] _cns◂{ %y _nil◂{} } }
			§ grm◂y = t_dta◂{ %[ id.grm ] _cns◂{ %y _nil◂{} } } 
			§ arr◂y = t_dta◂{ %[ id.arr ] _cns◂{ %y _nil◂{} } } 
			§ Clr◂y = t_dta◂{ %[ id.Clr ] _cns◂{ y _nil◂{} } }
			§ pt◂y = t_dta◂{ %[ id.pt ] _cns◂{ %y _nil◂{} } }
			\[
				§ clr y 
				∎ t_dta◂{ %[ id.clr ] _cns◂{ %y _nil◂{} } }
			§ ext {} 
				∎ t_dta◂{ %[ id.ext ] _nil◂{} } 
			\]
			§ prs◂y = t_imp◂{ RP.cns2◂{ s8◂{} r64◂{} } RP.cns3◂{ s8◂{} r64◂{} y } }
			§ prs_opn◂y = t_imp◂{ RP.cns2◂{ s8◂{} r64◂{} } RP.cns3◂{ s8◂{} r64◂{} opn◂y } }
			∎∎
		\[
		§ of_var # { {} i } 
			∎ { {} RP.atm◂var◂i }
		\]
		§§ X = t_axm
			§ pnt_dta_i a  
				=+ a' 
				∐ 
					∎ %[ "_r64" ] 
				∐ 
					∎ %[ "_s8" ]
				∐
					∎ %[ "_arr" ] 
				∐ 
					∎ %[ "_Clr" ] 
				∐ 
					∎ %[ "_pt" ] 
				∐ 
					∎ %[ "_lst" ] 
				∐ 
					∎ %[ "_opn" ] 
				∐. 
					^ a ⊢ a,s 
						"_t" 0d' // 
					∎ s 
			§ @.pnt_type_k { tv k } 
			$ k ⊢ 
			∐ RP.rcd◂l .
				pnt_type_k_lst { tv l } ⊢ { tv s } 
				^ s ⊢ s,sr 
					"{ " 0' "}" // 
				∎ { tv sr } 
			∐. RP.atm◂ak . 
				$ ak ⊢ 
				∐ dta◂{ a l } . 
					pnt_dta { tv l } ⊢ { tv s }
					pnt_dta_i a ⊢ sa  
					^ sa,s ⊢ sa,s,sr 
						0' "◂" 1' // 
					∎ { tv sr } 
				∐ imp◂{ k0 k1 } . 
					pnt_type_k { tv k0 } ⊢ { tv s0 }  
					pnt_type_k { tv k1 } ⊢ { tv s1 } 
					^ s0,s1 ⊢ s0,s1,sr 
						"(" 0' "→" 1' ")" // 
					∎ { tv sr } 
				∐ ct_imp◂{ k0 k1 } . 
					pnt_type_k { tv k0 } ⊢ { tv s0 }  
					pnt_type_k { tv k1 } ⊢ { tv s1 } 
					^ s0,s1 ⊢ s0,s1,sr 
						"(" 0' "→→" 1' ")" // 
					∎ { tv sr } 
				∐ abs◂{ a k0 } . 
					pnt_type_k { tv k0 } ⊢ { tv s0 } 
					^ a,s0 ⊢ a,s0,sr 
							"\\" 0d' "' . " 1' //
					∎ { tv sr }  
				∐. var◂i . 
					lod_tv { tv i } ⊢ { tv i v } 
					$ v ⊢ 
					∐ var_l◂lv . 
						^ i,lv ⊢ i,lv,sr 
							0d' "''" "(" 1d' ")" // 
						∎ { tv sr } 
					∐ var_q◂lv .
						^ i,lv ⊢ i,lv,sr 
							0d' "'" "(" 1d' ")" // 
						∎ { tv sr }
					∐ var_i◂{} . 
						^ i ⊢ i,sr 
							"?" 0d' // 
						∎ { tv sr }
					∐. var_ln◂kx . 
						pnt_type_k { tv kx } ⊢ { tv sx } 
						^ i,sx ⊢ i,sx,sr 
							0d' "'" "(=" 1' ")" // 
						∎ { tv sr }
			@.pnt_type_k_lst = lst.pnt_l◂◂{ pnt_type_k " " }
			@.pnt_dta # { tv l } 
				rev l ⊢ l 
				lst.pnt_l◂◂{ pnt_type_k "◂" } { tv l } ⊢| 
			§§ eq_t 
			§ 
				@.f { tv y0 y1 }
					∐ y0 ⊢ RP.atm◂ak; ak ⊢ var◂i0 . 
						lod_tv { tv i0 } ⊢ { tv i0 v0 } 
						∐ v0 ⊢ var_ln◂y2 . 
							f { tv y2 y1 } ⊢|
						∐ v0 ⊢ var_q◂lv0 . 
							l0 { tv i0 y1 } ⊢| 
						∐. .  
							∎ { tv bl.f◂{} }
					∐ y1 ⊢ RP.atm◂ak; ak ⊢ var◂i1 . 
						lod_tv { tv i1 } ⊢ { tv i1 v0 } 
						∐ v0 ⊢ var_ln◂y2 . 
							f { tv y0 y2 } ⊢|
						∐ v0 ⊢ var_q◂lv . 
							l0 { tv i1 y0 } ⊢|
						∐. .  
							∎ { tv bl.f◂{} }
					∐ y0 ⊢ RP.rcd◂r0 ; y1 ⊢ RP.rcd◂r1 . 
						f_lst { tv r0 r1 } ⊢| 
					∐ y0 ⊢ RP.atm◂ak0; ak0 ⊢ dta◂{ a0 l0 }; y1 ⊢ RP.atm◂ak1; ak1 ⊢ dta◂{ a1 l1 } . 
						∐ a0'=a1' . 
							f_lst { tv l0 l1 } ⊢|
						∐. . 
							∎ { tv bl.f◂{} }
					∐ y0 ⊢ RP.atm◂ak0; ak0 ⊢ imp◂{ y0_0 y0_1 }; y1 ⊢ RP.atm◂ak1; ak1 ⊢ imp◂{ y1_0 y1_1 } . 
						f { tv y0_0 y1_0 } ⊢ { tv b }   
						∐ b ⊢ bl.t◂{} . 
							f { tv y0_1 y1_1 } ⊢|
						∐. . 
							∎ { tv b }
					∐ y0 ⊢ RP.atm◂ak0; ak0 ⊢ ct_imp◂{ y0_0 y0_1 }; y1 ⊢ RP.atm◂ak1; ak1 ⊢ ct_imp◂{ y1_0 y1_1 } . 
						f { tv y0_0 y1_0 } ⊢ { tv b }   
						∐ b ⊢ bl.t◂{} . 
							f { tv y0_1 y1_1 } ⊢|
						∐. . 
							∎ { tv b }
					∐. . 
						∎ { tv bl.f◂{} }
			@.l0 { tv i0 y1 } 
				∐ y1 ⊢ RP.atm◂a1; a1 ⊢ var◂i1 . 
					lod_tv { tv i1 } ⊢ { tv i1 v0 } 
					∐ v0 ⊢ var_ln◂y2 . 
						l0 { tv i0 y2 } ⊢|
					∐ v0 ⊢ var_q◂lv0 . 
						∐ i0'=i1' . 
							∎ { tv bl.t◂{} }
						∐. . 
							∎ { tv bl.f◂{} }
					∐. .  
						∎ { tv bl.f◂{} }
				∐. . 
					∎ { tv bl.f◂{} }
			@.f_lst { tv l0 l1 }
				∐ l0 ⊢ _cns◂{ y0 l0 }; l1 ⊢ _cns◂{ y1 l1 } . 
					f { tv y0 y1 } ⊢ { tv b }
					∐ b ⊢ bl.t◂{} .  
						f_lst { tv l0 l1 } ⊢| 
					∐. .
						∎ { tv b }
				∐ l0 ⊢ _nil◂{}; l1 ⊢ _nil◂{} . 
					∎ { tv bl.t◂{} }  
				∐. . 
					∎ { tv bl.f◂{} } 		
			∎∎
		§§ cmp_t
			§ 
				@.f { tv y0 y1 cl }
					∐ y1 ⊢ RP.atm◂ak; ak ⊢ var◂i1 . 
						lod_tv { tv i1 } ⊢ { tv i1 v0 } 
						∐ v0 ⊢ var_ln◂y2 . 
							f { tv y0 y2 cl } ⊢|
						∐ v0 ⊢ var_q◂lv . 
							assoc { cl i1 } ⊢ { cl i1 o } 
							∐ o ⊢ _some◂yt . 
								eq_t.f { tv yt y0 } ⊢ { tv bt }  
								∎ { tv bt cl }
							∐. . 
								∎ { tv bl.t◂{} _cns◂{ { %i1 _some◂y0 } cl } } 
						∐. .  
							∎ { tv bl.f◂{} cl }
					∐ y0 ⊢ RP.atm◂ak; ak ⊢ var◂i0 . 
						lod_tv { tv i0 } ⊢ { tv i0 v0 } 
						∐ v0 ⊢ var_ln◂y2 . 
							f { tv y2 y1 cl } ⊢|
						∐ v0 ⊢ var_q◂v2 . 
							##» "cmp_t 1" _ ⊢ ee0 
							##_emt ee0 ⊢ _ 
							##∎|
							∎ { tv bl.f◂{} cl }
						∐. .  
							» "cmp_t 0" _ ⊢ ee0 
							_emt ee0 ⊢ _ 
							∎| 
					∐ y0 ⊢ RP.rcd◂r0 ; y1 ⊢ RP.rcd◂r1 . 
						f_lst { tv r0 r1 cl } ⊢| 
					∐ y0 ⊢ RP.atm◂ak0; ak0 ⊢ dta◂{ a0 l0 }; y1 ⊢ RP.atm◂ak1; ak1 ⊢ dta◂{ a1 l1 } . 
						∐ a0'=a1' . 
							f_lst { tv l0 l1 cl } ⊢|
						∐. . 
							∎ { tv bl.f◂{} cl }
					∐ y0 ⊢ RP.atm◂ak0; ak0 ⊢ imp◂{ y0_0 y0_1 }; y1 ⊢ RP.atm◂ak1; ak1 ⊢ imp◂{ y1_0 y1_1 } . 
						f { tv y0_0 y1_0 cl } ⊢ { tv b cl }   
						∐ b ⊢ bl.t◂{} . 
							f { tv y0_1 y1_1 cl } ⊢|
						∐. . 
							∎ { tv b cl }
					∐ y0 ⊢ RP.atm◂ak0; ak0 ⊢ ct_imp◂{ y0_0 y0_1 }; y1 ⊢ RP.atm◂ak1; ak1 ⊢ ct_imp◂{ y1_0 y1_1 } . 
						f { tv y0_0 y1_0 cl } ⊢ { tv b cl }   
						∐ b ⊢ bl.t◂{} . 
							f { tv y0_1 y1_1 cl } ⊢|
						∐. . 
							∎ { tv b cl }
					∐. . 
						∎ { tv bl.f◂{} cl }
			@.f_lst { tv l0 l1 cl }
				∐ l0 ⊢ _cns◂{ y0 l0 }; l1 ⊢ _cns◂{ y1 l1 } . 
					f { tv y0 y1 cl } ⊢ { tv b cl }
					∐ b ⊢ bl.t◂{} .  
						f_lst { tv l0 l1 cl } ⊢| 
					∐. .
						∎ { tv b cl }
				∐ l0 ⊢ _nil◂{}; l1 ⊢ _nil◂{} . 
					∎ { tv t◂{} cl }  
				∐. . 
					∎ { tv bl.f◂{} cl } 				
			§ eqv { tv y0 y1 } 
				$ y0 ⊢ y0,y0_0
				$ y1 ⊢ y1,y1_0 
				f { tv y0_0 y1_0 ⟦⟧ } ⊢ { tv bl _ }
				$ y0 ⊢ y0,y0_0
				$ y1 ⊢ y1,y1_0 
				f { tv y1_0 y0_0 ⟦⟧ } ⊢ { tv br _ }
				bl.and { bl br } ⊢ b 
				∎ { tv y0 y1 b }
			§ @.eqv_lst { tv l0 l1 } 
				∐ l0 ⊢ _cns◂{ y0 l0 }; l1 ⊢ _cns◂{ y1 l1 } .
					eqv { tv y0 y1 } ⊢ { tv y0 y1 b0 } 
					eqv_lst { tv l0 l1 } ⊢ { tv l0 l1 b1 } 
					bl.and { b0 b1 } ⊢ b 
					∎ { tv ⟦ y0 < l0 ⟧ ⟦ y1 < l1 ⟧ b }
				∐ l0 ⊢ _nil◂{}; l1 ⊢ _nil◂{} . 
					∎ { tv ⟦⟧ ⟦⟧ bl.t◂{} }
				∐. . 
					_emt %[ "eqv_lst 0" ] ⊢ _ 
					_emt { l0 l1 } ⊢ _ 
					∎| 
			∎∎
		
		§ @.occurs { { tv i0 lv0 } y1 } 
			∐ y1 ⊢ RP.rcd◂l1 . 
				occurs_lst { { tv i0 lv0 } l1 } ⊢| 
			∐ y1 ⊢ RP.atm◂ak; ak ⊢ dta◂{ a1 l1 } . 
				occurs_lst { { tv i0 lv0 } l1 } ⊢| 
			∐ y1 ⊢ RP.atm◂ak; ak ⊢ imp◂{ y1_0 y1_1 } . 
				occurs { { tv i0 lv0 } y1_0 } ⊢ { tv i0 lv0 } 
				occurs { { tv i0 lv0 } y1_1 } ⊢|
			∐ y1 ⊢ RP.atm◂ak; ak ⊢ ct_imp◂{ y1_0 y1_1 } . 
				occurs { { tv i0 lv0 } y1_0 } ⊢ { tv i0 lv0 } 
				occurs { { tv i0 lv0 } y1_1 } ⊢|  
			∐ y1 ⊢ RP.atm◂ak; ak ⊢ var◂i1 . 
				∐ i0'=i1' . 
					_emt { i0 lv0 } ⊢ { i0 lv0 } 
					∎| 
				∐. . 
					lod_tv { tv i1 } ⊢ { tv i1 v1 } 
					$ v1 ⊢ 
					∐ var_ln◂y2 . 
						occurs { { tv i0 lv0 } y2 } ⊢| 
					∐ var_l◂lv1 . 
						∐ lv1'=<lv0' . 
							∎ { tv i0 lv0 }
						∐. . 
							$ lv0 ⊢ lv0,lv0_0 
							exc_tv { tv i1 var_l◂lv0_0 } ⊢ { tv i1 _ }
							∎ { tv i0 lv0 } 
					∐ var_i◂{} .
						∎ { tv i0 lv0 } 
				
					∐. var_q◂lv1 .
						_emt { i1 lv1 } ⊢ a 
						_emt %[ "occurs 0" ] ⊢ _ 
						∎| 
			∐. . 
				_emt { i0 lv0 } ⊢ { i0 lv0 } 
				_emt %[ "occurs 1" ] ⊢ _ 
				∎|
			@.occurs_lst = lst.fld_l◂◂occurs 
		§§ unify 
		§ 
			@.f { tv y0 y1 }
				∐ y0 ⊢ RP.atm◂ak; ak ⊢ var◂i0 . 
					f_l0 { tv i0 y1 } ⊢| 
				∐ y1 ⊢ RP.atm◂ak; ak ⊢ var◂i1 . 
					f_l0 { tv i1 y0 } ⊢| 
				∐ y0 ⊢ RP.rcd◂r0 ; y1 ⊢ RP.rcd◂r1 . 
					f_lst { tv r0 r1 } ⊢| 
				∐ y0 ⊢ RP.atm◂ak0; ak0 ⊢ dta◂{ a0 l0 }; y1 ⊢ RP.atm◂ak1; ak1 ⊢ dta◂{ a1 l1 } . 
					∐ a0'=a1' . 
						f_lst { tv l0 l1 } ⊢|
					∐. . 
						pnt_type_k_lst { tv l0 } ⊢ { tv l0s } 
						pnt_type_k_lst { tv l1 } ⊢ { tv l1s } 
						pnt_dta_i a0 ⊢ a0s 
						pnt_dta_i a1 ⊢ a1s 
						_emt { a0s l0s a1s l1s } ⊢ a
						_emt %[ "unify 0" ] ⊢ se 
						∎| 
				∐ y0 ⊢ RP.atm◂ak0; ak0 ⊢ imp◂{ y0_0 y0_1 }; y1 ⊢ RP.atm◂ak1; ak1 ⊢ imp◂{ y1_0 y1_1 } . 
					f { tv y0_0 y1_0 } ⊢ tv  
					f { tv y0_1 y1_1 } ⊢|
				∐ y0 ⊢ RP.atm◂ak0; ak0 ⊢ ct_imp◂{ y0_0 y0_1 }; y1 ⊢ RP.atm◂ak1; ak1 ⊢ ct_imp◂{ y1_0 y1_1 } . 
					f { tv y0_0 y1_0 } ⊢ tv  
					f { tv y0_1 y1_1 } ⊢|
				∐. . 
					pnt_type_k { tv y0 } ⊢ { tv y0s } 
					pnt_type_k { tv y1 } ⊢ { tv y1s } 
					_emt { y0s y1s } ⊢ { y0s y1s } 
					» "unify 1" _ ⊢ se 
					_emt se ⊢ se 
					∎|
			@.f_lst { tv l0 l1 }
				∐ l0 ⊢ _cns◂{ y0 l0 }; l1 ⊢ _cns◂{ y1 l1 } . 
					f { tv y0 y1 } ⊢ tv 
					f_lst { tv l0 l1 } ⊢| 
				∐ l0 ⊢ _nil◂{}; l1 ⊢ _nil◂{} . 
					∎ tv 
				∐. . 
					» "unify.f_lst 2" _ ⊢ se 
					_emt se ⊢ se 
					_emt { l0 l1 } ⊢ { l0 l1 }
					∎|  
			@.f_l0 { tv i0 y1 }   
				lod_tv { tv i0 } ⊢ { tv i0 v0 } 
				∐ v0 ⊢ var_ln◂y2 . 
					f { tv y2 y1 } ⊢|
				∐ v0 ⊢ var_l◂lv .  
					f_l1 { tv i0 lv y1 } ⊢|
				∐. . 
					» "unify 3" _ ⊢ se 
					_emt se ⊢ se 
					∎|  
			@.f_l1 { tv i0 lv y1 } 
				∐ y1 ⊢ RP.atm◂ak1; ak1 ⊢ var◂i1 . 
					∐ i0'=i1' . 
						∎ tv 
					∐. .
						lod_tv { tv i1 } ⊢ { tv i1 v1 }
						∐ v1 ⊢ var_ln◂y2 . 
							f_l1 { tv i0 lv y2 } ⊢|  
						∐ v1 ⊢ var_l◂lv1 . 
							\\setge { lv lv1 } ⊢ { lv lv1 b }
							∐ lv1'=<lv' . 
								exc_tv { tv i0 var_ln◂RP.atm◂var◂i1 } ⊢ { tv i0 _ } 
								∎ tv
							∐. .  
								exc_tv { tv i1 var_ln◂RP.atm◂var◂i0 } ⊢ { tv i1 _ } 
								∎ tv 
						∐ v1 ⊢ var_q◂_ . 
							_emt %[ "unify 4.0" ] ⊢ _ 
							∎|
						∐. . 
							_emt %[ "unify 4" ] ⊢ se 
							∎|  
				∐. .  
					$ y1 ⊢ y1,y1_0 
					occurs { { tv i0 lv } y1 } ⊢ { tv i0 lv }
					exc_tv { tv i0 var_ln◂y1_0 } ⊢ { tv i0 _ } 
					∎ tv 
			§ f_emt { tv y0 y1 } 
				$ y0 ⊢ y0,y00
				$ y1 ⊢ y1,y10
				pnt_type_k { tv y00 } ⊢ { tv y0s } 
				pnt_type_k { tv y10 } ⊢ { tv y1s } 
				f { tv y0 y1 } ⊢
				? tv .
					∎ tv 
				∐. _ . 
					_emt %[ "unify.f_emt" ] ⊢ _ 
					_emt { y0s y1s } ⊢ _ 
					∎|
			∎∎ 
		§ @.unifys { tv y0 ys } 
			$ ys ⊢ 
			∐ _cns◂{ %y1 %ys } . 
				$ y0 ⊢ y0,y00 
				unify.f { tv y0 y1 } ⊢ tv 
				unifys { tv y00 ys } ⊢|
			∐. _nil◂{} . 
				∎ { tv y0 } 	
		§ 
			@.map_k◂◂{ DTA ABS VAR } { v p }  
				$ p ⊢ 
				∐ RP.rcd◂l . 
					map_k_lst◂◂{ DTA ABS VAR } { v l } ⊢ { v l } 
					∎ { v RP.rcd◂l } 
				∐. RP.atm◂a . 
					map_k_atm◂◂{ DTA ABS VAR } { v a } ⊢|
			@.map_k_lst◂◂{ DTA ABS VAR } { v l } 
				$ l ⊢ 
				∐ _cns◂{ p l } . 
					map_k◂◂{ DTA ABS VAR } { v p } ⊢ { v p } 
					map_k_lst◂◂{ DTA ABS VAR } { v l } ⊢ { v l } 
					∎ { v _cns◂{ %p %l } } 
				∐. _nil◂{} . 
					∎ { v _nil◂{} }
			@.map_k_atm◂◂{ DTA ABS VAR } { v a } 
				$ a ⊢ 
				∐ dta◂{ ax lx } . 
					DTA { v { ax lx } } ⊢| 
				∐ imp◂{ k0 k1 } . 
					map_k◂◂{ DTA ABS VAR } { v k0 } ⊢ { v k0 } 
					map_k◂◂{ DTA ABS VAR } { v k1 } ⊢ { v k1 } 
					∎ { v RP.atm◂imp◂{ k0 k1 } }
				∐ ct_imp◂{ k0 k1 } .
					map_k◂◂{ DTA ABS VAR } { v k0 } ⊢ { v k0 } 
					map_k◂◂{ DTA ABS VAR } { v k1 } ⊢ { v k1 } 
					∎ { v RP.atm◂ct_imp◂{ k0 k1 } }
				∐ abs◂{ a0 y0 } . 
					ABS { v { a0 y0 } } ⊢| 
				∐. var◂i0 . 
					VAR { v i0 } ⊢| 
		§§ inst 
			§ 
				@.al_dta # { v { a l } } 
					lst { v l } ⊢ { v l }
					∎ { v RP.atm◂dta◂{ %a %l } } 
				@.al_abs { { tv_n tv lv al } { a0 y0 } }
					assoc { al a0 } ⊢ { al a0 o } 
					nnt o ⊢ {} 
					newvar_i { tv_n tv } ⊢ { tv_n tv ia }
					$ ia ⊢ ia,ia0 
					$ a0 ⊢ a0,a0_0 
					al { { tv_n tv lv _cns◂{ { a0 _some◂%ia } al } } y0 } ⊢ { { tv_n tv lv al } y0 } 
					$ _cns◂{ { a0_0 _none◂{} } al } ⊢ al  
					∎ { { tv_n tv lv al } RP.atm◂abs◂{ %ia0 %y0 } }
				@.al_var { { tv_n tv lv al } i0 } 
					assoc { al i0 } ⊢ { al i0 o } 
					$ o ⊢ 
					∐ _some◂i1 . 
						∎ { { tv_n tv lv al } RP.atm◂var◂%i1 } 
					∐. _none◂{} . 
						lod_tv { tv i0 } ⊢ { tv i0 v0 } 
						∐ v0 ⊢ var_ln◂y0 . 
							al { { tv_n tv lv al } y0 } ⊢|
						∐ v0 ⊢ var_q◂lvq .
							$ tv_n ⊢ tv_n,tv_n_0
							newvar_l { tv_n tv lv } ⊢ { tv_n tv lv y0 } 
							∎ { { tv_n tv lv _cns◂{ { %i0 _some◂%tv_n_0 } %al } } y0 }  
						∐ v0 ⊢ var_i◂{} . 
							_emt %[ "inst 4" ] ⊢ se 
							∎| 
						∐. . 
							∎ { { tv_n tv lv al } RP.atm◂var◂%i0 } 
				@.atm = map_k_atm◂◂{ al_dta al_abs al_var }
				@.al = map_k◂◂{ al_dta al_abs al_var } 
				@.lst = map_k_lst◂◂{ al_dta al_abs al_var }
			∎∎
		§ inst # { tv_n tv lv y } 
			$ _nil◂{} ⊢ al 
			inst.al { { tv_n tv lv al } y } ⊢ { { tv_n tv lv al } y } 
			∎ { tv_n tv lv y }   
		§ inst_lst # { tv_n tv lv l al } 
			inst.lst { { tv_n tv lv al } l } ⊢ { { tv_n tv lv al } l } 
			∎ { tv_n tv lv l al }
		§ inst_al # { tv_n tv lv t al } 
			inst.al { { tv_n tv lv al } t } ⊢ { { tv_n tv lv al } t } 
			∎ { tv_n tv lv t al }
		§§ gen 
			§ 
				@.gen_dta # { v { a l } } 
					gen_lst { v l } ⊢ { v l }
					∎ { v RP.atm◂dta◂{ %a %l } }
				@.gen_abs # { v { a y0 } } 
					gen { v y0 } ⊢ { v y0 } 
					∎ { v RP.atm◂abs◂{ %a %y0 } }
				@.gen_var { { tv_n tv lv } i }
					lod_tv { tv i } ⊢ { tv i v } 
					$ v ⊢ 
					∐ var_ln◂y1 . 
						gen { { tv_n tv lv } y1 } ⊢|
					∐ var_l◂lv1 .
						∐ lv1'=<lv' . 
							∎ { { tv_n tv lv } RP.atm◂var◂%i }
						∐. .
							$ lv ⊢ lv,lv_0 
							exc_tv { tv i var_q◂%lv_0 } ⊢ { tv i _ } 
							∎ { { tv_n tv lv } RP.atm◂var◂%i }
					∐ var_q◂_ . 
						∎ { { tv_n tv lv } RP.atm◂var◂%i } 
					∐. var_i◂{} . 
						∎ { { tv_n tv lv } RP.atm◂var◂%i } 
				@.gen = map_k◂◂{ gen_dta gen_abs gen_var }
				@.gen_lst = map_k_lst◂◂{ gen_dta gen_abs gen_var }
			∎∎
		§ @.gen # { tv_n tv lv y } 
				gen.gen { { tv_n tv lv } y } ⊢ { { tv_n tv lv } y } 
				∎ { tv_n tv lv y } 
			@.gen_lst # { tv_n tv lv l } 
				gen.gen_lst { { tv_n tv lv } l } ⊢ { { tv_n tv lv } l } 
				∎ { tv_n tv lv l } 
				
		§ iug { tv_n tv lv y0 y1 } 
			_inc lv ⊢ lv 
			inst { tv_n tv lv y0 } ⊢ { tv_n tv lv y0 } 
			inst { tv_n tv lv y1 } ⊢ { tv_n tv lv y1 } 
			$ y0 ⊢ y0,y00 
			$ y1 ⊢ y1,y10
			unify.f_emt { tv y00 y10 } ⊢ tv
			_dec lv ⊢ lv 
			gen { tv_n tv lv y0 } ⊢ { tv_n tv lv y0 }
			∎ { tv_n tv lv y0 y1 }  
		§ iug_imp { tv_n tv lv ys yd y1 } 
			_inc lv ⊢ lv 
			inst { tv_n tv lv ys } ⊢ { tv_n tv lv ys }
			inst { tv_n tv lv yd } ⊢ { tv_n tv lv yd } 
			inst { tv_n tv lv y1 } ⊢ { tv_n tv lv y1 }
			$ ys ⊢ ys,ys0
			$ yd ⊢ yd,yd0 
			imp { ys0 yd0 } ⊢ yi 
			RP.atm yi  ⊢ yi 
			$ y1 ⊢ y1,y10
			unify.f_emt { tv yi y10 } ⊢ tv
			_dec lv ⊢ lv 
			gen { tv_n tv lv y1 } ⊢ { tv_n tv lv y1 }
			∎ { tv_n tv lv ys yd y1 }  
		§ iug_imp_d { tv_n tv lv ys y1 } 
			_inc lv ⊢ lv 
			inst { tv_n tv lv ys } ⊢ { tv_n tv lv ys }
			newvar_l { tv_n tv lv } ⊢ { tv_n tv lv yd } 
			inst { tv_n tv lv y1 } ⊢ { tv_n tv lv y1 }
			$ ys ⊢ ys,ys0
			$ yd ⊢ yd,yd0 
			$ y1 ⊢ y1,y10
			unify.f_emt { tv RP.atm◂imp◂{ %ys0 %yd0 } y10 } ⊢ tv
			_dec lv ⊢ lv 
			gen { tv_n tv lv y1 } ⊢ { tv_n tv lv y1 }
			∎ { tv_n tv lv ys yd y1 }  
		§ iug_ct_imp_d { tv_n tv lv ys y1 } 
			_inc lv ⊢ lv 
			inst { tv_n tv lv ys } ⊢ { tv_n tv lv ys }
			newvar_l { tv_n tv lv } ⊢ { tv_n tv lv yd } 
			inst { tv_n tv lv y1 } ⊢ { tv_n tv lv y1 }
			$ ys ⊢ ys,ys0
			$ yd ⊢ yd,yd0 
			$ y1 ⊢ y1,y10
			unify.f_emt { tv RP.atm◂ct_imp◂{ %ys0 %yd0 } y10 } ⊢ tv
			_dec lv ⊢ lv 
			gen { tv_n tv lv y1 } ⊢ { tv_n tv lv y1 }
			∎ { tv_n tv lv ys yd y1 }  
		§ of_var_i # { { tv_n tv lv al } v } 
			inst_al { tv_n tv lv RP.atm◂var◂v al } ⊢ { tv_n tv lv v al } 
			∎ { { tv_n tv lv al } v }
		§ iug_axm # { tv_n tv vl kl yl } 
			inst_lst { tv_n tv %[ 0r ] kl ⟦⟧ } ⊢ { tv_n tv lv kl al }
			inst_lst { tv_n tv lv yl al } ⊢ { tv_n tv lv yl al }
			lst.map_l◂◂of_var_i { { tv_n tv lv al } vl } ⊢ { { tv_n tv lv al } vl }
			\\inst_lst { tv_n tv lv vl al } ⊢ { tv_n tv lv vl _ }
			unify.f_lst { tv vl yl } ⊢ tv
			_dec lv ⊢ lv 
			gen_lst { tv_n tv lv kl } ⊢ { tv_n tv _ kl } 
			∎ { tv_n tv kl }
		§ iug_axm_i # { tv_n tv vl k yl } 
			inst_al { tv_n tv %[ 0r ] k ⟦⟧ } ⊢ { tv_n tv lv k al }
			inst_lst { tv_n tv lv yl al } ⊢ { tv_n tv lv yl al }
			lst.map_l◂◂of_var_i { { tv_n tv lv al } vl } ⊢ { { tv_n tv lv al } vl }
			\\inst_lst { tv_n tv lv vl al } ⊢ { tv_n tv lv vl _ }
			unify.f_lst { tv vl yl } ⊢ tv
			\\unify.f { tv v y } ⊢ tv
			_dec lv ⊢ lv 
			gen { tv_n tv lv k } ⊢ { tv_n tv _ k } 
			∎ { tv_n tv k }
		§§ inst_cl 
			§ 
				@.cl_dta { v { a l } } 
					lst { v l } ⊢ { v l }
					∎ { v RP.atm◂dta◂{ %a %l } } 
				@.cl_abs { { tv_n tv cl } { a0 y0 } }
					_emt %[ "inst_cl.cl_abs 0" ] ⊢ _ 
					∎| 
				@.cl_var { { tv_n tv cl } i0 } 
					lod_tv { tv i0 } ⊢ { tv i0 v0 } 
					∐ v0 ⊢ var_ln◂y0 . 
						cl { { tv_n tv cl } y0 } ⊢|
					∐ v0 ⊢ var_q◂lvq .
						assoc { cl i0 } ⊢ { cl i0 o } 
						$ o ⊢ 
						∐ _some◂i1 . 
							∎ { { tv_n tv cl } RP.atm◂var◂%i1 } 
						∐. _none◂{} . 
							∎ { { tv_n tv cl } RP.atm◂var◂%i0 }  
						∐ v0 ⊢ var_i◂{} . 
							_emt %[ "inst_cl 5" ] ⊢ _ 
							∎|
						∐. . 
							_emt %[ "inst_cl 4" ] ⊢ _ 
							∎| 
				@.atm = map_k_atm◂◂{ cl_dta cl_abs cl_var }
				@.cl = map_k◂◂{ cl_dta cl_abs cl_var } 
				@.lst = map_k_lst◂◂{ cl_dta cl_abs cl_var }
			∎∎
		§ 
			@.inst_cl # { tv_n tv y cl } 
				inst_cl.cl { { tv_n tv cl } y } ⊢ { { tv_n tv cl } y } 
				∎ { tv_n tv y cl } 
				
			@.inst_cl_lst # { tv_n tv l cl } 
				inst_cl.lst { { tv_n tv cl } l } ⊢ { { tv_n tv cl } l } 
				∎ { tv_n tv l cl }
			
		§ add_t # { tv_n tv ns e y } 
			newvar_ln { tv_n tv y } ⊢ { tv_n tv i0 } 
			_some i0 ⊢ o 
			$ _cns◂{ { e o } ns } ⊢ ns 
			∎ { tv_n tv ns } 
		
		§ inst_imp { tv_n tv lv y } 
			inst { tv_n tv lv y } ⊢ { tv_n tv lv y }
			newvar_l { tv_n tv lv } ⊢ { tv_n tv lv y0 }
			newvar_l { tv_n tv lv } ⊢ { tv_n tv lv y1 } 
			$ y0 ⊢ y0,y0_0 
			$ y1 ⊢ y1,y1_0 
			imp { y0_0 y1_0 } ⊢ y2 
			RP.atm y2 ⊢ y2 
			unify.f_emt { tv y y2 } ⊢ tv 
			∎ { tv_n tv lv y0 y1 }
		§ add_e { tv_n tv evv ev ev_n ns e k y } 
			newvar_ln { tv_n tv y } ⊢ { tv_n tv i0 } 
			set_tv { ev ev_n i0 } ⊢ { ev ev_n }
			set_tv { evv ev_n k } ⊢ { evv ev_n } 
			$ ev_n ⊢ ev_n,n0 
			_inc ev_n ⊢ ev_n 
			_some n0 ⊢ o 
			$ _cns◂{ { e o } ns } ⊢ ns 
			∎ { tv_n tv evv ev ev_n ns }
		
		§ of_arr { tv_n tv y } 
			inst { tv_n tv %[ 1r ] y } ⊢ { tv_n tv lv y }
			newvar_l { tv_n tv lv } ⊢ { tv_n tv lv v } 
			$ v ⊢ v,v0 
			unify.f { tv X.arr◂v0 y } ⊢ tv 
			_dec lv ⊢ lv 
			gen { tv_n tv lv v } ⊢ { tv_n tv lv v }
			∎ { tv_n tv v }
		∎∎ 
		§§ T = type
		§§ TX = T.t_axm			

		§§ ast
			¶ @.name
				∐ mdl_n : { _s8 name }
				∐ fst_n : _s8
			§ @.pnt_name n
				∐ n ⊢ mdl_n◂{ w n } .
					pnt_name n ⊢ s
					^ w,s ⊢ w,s,sr
						0' "." 1' //
					∎ sr
				∐. n ⊢ fst_n◂w .
					∎ w 
		§§ hp 
			§§ id 
				§ Clr = 0r 
				§ pt = 1r 
				∎∎ 
			¶ 
				@.t 
					∐ opq : {}
					∐ arr : type.t◂_r64 
					∐ r64 : {} 
					∐ id : { _r64 type.t◂_r64 } 
				@.adt 
					∐ hp : t 
					∐ sgm : type.t◂_r64
					∐ btm : {} 
			§ 
				@.pnt h
					$ h ⊢ 
					∐ r64◂{} . 
						^ _ ⊢ sr 
							"r" // 
						∎ sr 
					∐ arr◂_ .
							\\pnt h ⊢ sh 
							^ _ ⊢ s 
								"{| ? " "|}" // 
							∎ s 
					\[
					∐ Clr◂_ . 
						∎ %[ "<<| ? |>>" ]
					\]
					∐ id◂_ . 
						∎ %[ "[| _ |]" ]
					∐. opq◂{} . 
						» "{| l |}" _ ⊢ s 
						∎ s  
					@.pnt_lst # l 
						lst.pnt◂◂{ pnt "" } l ⊢| 
			∎∎ 
		¶
			@.rt r',e' = RP.t◂(rt_atm◂r'◂e') 
			@.tag_id = _r64 
			@.rt_atm r',e'
				∐ hp : { r' hp.t }
				∐ hp_im : cst◂e'  
				∐ btm : {} 
				∐ stt_adt : { _r64 _r64 rt◂r'◂e' } 
				∐ dyn_adt : { { _r64 _lst◂(type.t◂_r64) } r' r' }
			@.re_atm r',e',v' 
				∐ re_agl : { e' re_ptn◂r'◂e'◂v' }
				∐ re_reg : r' 
				∐ re_v : v' 
			@.re_ptn r',e',v' = RP.t◂(re_atm◂r'◂e'◂v')
			@.src r',e' = re_atm◂r'◂e'◂(cst◂e')
			@.mtc_atm r',e' = re_atm◂r'◂e'◂(_opn◂r')
			@.src_ptn r',e' = re_ptn◂r'◂e'◂(cst◂e')
			@.SP r',e' = src_ptn◂r'◂e'
			@.MP r',e' = re_ptn◂r'◂e'◂(_opn◂r')
			@.ct_ptn e' = RP.t◂(cst◂e')
			@.pt_m = _r64 
			@.var = _r64 
			@.op_id = _r64 
			@.ftr_id = _r64 
			@.op_v = _r64 
			@.cst_v e' = { op_id var cst◂e' _opn◂op_v }
			@.lc e' = lc_code◂_r64◂_r64◂(nxp◂e'◂(mtc_op◂_r64◂e'))
			@.cst e' 
				∐ k_op_gnr : { _opn◂{ _r64 RP.t◂e' } _r64 _opn◂(ct_ptn◂e') MP◂_r64◂e' _r64 bl.t lc◂e' _r64 }
				∐ k_app : { ct_ptn◂e' ct_ptn◂e' } 
				\\∐ k_tpl : { { _r64 RP.t◂e' } ct_ptn◂e' }
				∐ k_var : { _r64 _r64 } 
				∐ k_op_axm : { _r64 _lst◂(ct_ptn◂e') } 
				∐ k_r64 : _r64 
				∐ k_s8 : _s8 
				∐ k_arr : _arr◂(ct_ptn◂e')
				∐ k_name : e' 
				∐ k_agl : { e' ct_ptn◂e' }
				∐ k_ctr : { _r64 _r64 _r64 }
				∐ k_ply : { RP.t◂_r64 SP◂_r64◂e' _r64 }
			\[
			@.ce v' 
				∐ ce_app : { ce◂v' ce◂v' } 
				∐ ce_atm : v' 
			@.ce_ptn e' = RP.t◂(ce◂(RP.t◂(cst◂e')))
			\]
			@.fmt
				∐ fmt_s : {}
				∐ fmt_d : {}
				∐ fmt_x : {}
				∐ fmt_p : {}
			@.exp_s8◂e' 
				∐ exp_s8_cst : cst◂e'
				∐ exp_s8_idx : { fmt _r64 }
				∐ exp_s8_for : { _r64 cst◂e' } 
			@.tpl_ptn t' = RP.t◂t' 
			@.lc_code r',e',m'
				∐ jmp : { ct_ptn◂e' SP◂r'◂e' }
				∐ seq : { lc_line◂r'◂e' lc_code◂r'◂e'◂m' }
				∐ mtc : m'
				∐ op_exh : { ct_ptn◂e' SP◂r'◂e' MP◂r'◂e' lc_code◂r'◂e'◂m' lc_code◂r'◂e'◂m' }
				∐ tj : { r' _lst◂(lc_code◂r'◂e'◂m') lc_code◂r'◂e'◂m' }
				∐ ret : _opn◂{ SP◂r'◂e' _lst◂r' }
				∐ exn : exn◂r'◂e' 
			@.exn r',e' = _r64 
			@.nxp ◂ e',m' 
					∐ nx_m : _pt◂(p◂e'◂m')
					\\ ∐ nx_m : p◂{ m' _opn◂(_pt◂nxp◂e'◂k')
					\\∐ nx_e : e'
					∐ nx_e : { _lst◂_r64 _lst◂_r64 lc_code◂_r64◂e'◂(nxp◂e'◂m') }
			\\@.lc e' = lc_code◂_r64◂_r64◂(nxp◂e'◂(mtc_op◂_r64◂e'))
			@.p ◂ e',m' 
				∐ p : { m' _opn◂(_pt◂(p◂e'◂m')) _opn◂(nxp◂e'◂m') nxp◂e'◂m' }  
			\[
			@.nx r',e'
				∐ nx_e : { _lst◂r' _lst◂r' lc_code◂r'◂e' }
				∐ nx_m : { mtc_op◂r'◂e' _opn◂(nx◂r'◂e') nx◂r'◂e' } 
			\]
			@.lc_mtc r',e' = p_lst◂{ _lst◂(mtc_op◂r'◂e') mtc_etr◂r'◂e' }
			@.lc_line r',e'
				∐ op_name : { ct_ptn◂e' bl.t SP◂r'◂e' MP◂r'◂e' }
				∐ op_exp_s8 : { _lst◂(exp_s8◂e') _lst◂(src◂r'◂e') _lst◂(mtc_atm◂r'◂e') }
			@.mtc_etr r',e'
				∐ mtc_rmf : lc_mtc◂r'◂e'
				∐ mtc_code : { _lst◂r' _lst◂r' lc_code◂r'◂e'◂(lc_mtc◂r'◂e') }
			@.mtc_op r',e'
				∐ mtc_id : { SP◂r'◂e' MP◂r'◂e' }
				∐ mtc_test : { mtc_test test_var◂r'◂e' test_var◂r'◂e' }
				\\∐ mtc_cmp_test : { test_var◂r'◂e' test_var◂r'◂e' } 
			@.mtc_test 
				∐ test_eq : {} 
				∐ test_neq : {} 
				∐ test_cmp : {}
			@.test_var r',e'
				∐ test_cst : cst◂e'
				∐ test_var : r'
		§ op_call◂{ c s m } = op_name◂{ c bl.f◂{} s m } 
		§ op_inl◂{ c s m } = op_name◂{ c bl.t◂{} s m } 
		
		§ 
			@.map_l_rt_reg_atm◂◂F { v a } 
				∐ a ⊢ hp◂{ r0 h } . 
					F { v r0 } ⊢ { v r0 } 
					∎ { v hp◂{ r0 h } }
				∐ a ⊢ stt_adt◂{ ia nn pa } . 
					RP.map_l◂◂(map_l_rt_reg_atm◂◂F) { v pa } ⊢ { v pa }
					∎ { v stt_adt◂{ ia nn pa } }
				∐ a ⊢ dyn_adt◂{ { ax al } ri rd } . 
					F { v ri } ⊢ { v ri } 
					F { v rd } ⊢ { v rd } 
					∎ { v dyn_adt◂{ { ax al } ri rd } }
				∐. . 
					∎ { v a }
		§ @.ctr_of_k { evv c } 
			∐ c ⊢ k_ctr◂c . 
				∎ { evv c } 
			∐ c ⊢ k_name◂i . 
				lod_tv { evv i } ⊢ { evv i c } 
				ctr_of_k { evv c } ⊢| 
			∐. . 
				» "ast.ctr_of_k 0" _ ⊢ ee0 
				_emt ee0 ⊢ _ 
				∎|
		§ @.agl_of_cst { evv c } 
			∐ c ⊢ k_name◂i . 
				lod_tv { evv i } ⊢ { evv i c } 
				agl_of_cst { evv c } ⊢| 
			∐ c ⊢ k_agl◂{ v c } . 
				ctr_of_k { evv k_name◂%v } ⊢ { evv { i n v } }
				∎ { evv { i n v c } } 
			∐. . 
				_emt %[ "agl_of_cst 0" ] ⊢ _ 
				∎| 
		§ @.rt_atm_of_ct_atm { evv c } 
			∐ c ⊢ k_agl◂{ v c } . 
				rt_of_ct { evv c } ⊢ { evv k } 
				ctr_of_k { evv k_name◂%v } ⊢ { evv { i n v } } 
				∎ { evv stt_adt◂{ i n k } } 
			∐ c ⊢ k_name◂i . 
				lod_tv { evv i } ⊢ { evv i c } 
				rt_atm_of_ct_atm { evv c } ⊢| 
			∐. . 
				∎ { evv hp_im◂c }
			@.rt_of_ct = RP.map_l◂◂rt_atm_of_ct_atm
		§ @.op_of_k { evv c } 
			∐ c ⊢ k_name◂i . 
				lod_tv { evv i } ⊢ { evv i c } 
				op_of_k { evv c } ⊢| 
			∐. . 
				∎ { evv c }
		§ op_of_k { evv c } 
			$ c ⊢ 
			∐ RP.atm◂c . 
				op_of_k { evv c } ⊢| 
			∐. RP.rcd◂l . 
				∎| 
			
		§ 
			
			@.eq_ct_ptn = RP.eq_v◂◂eq_ct
			@.eq_ct_lst = lst.eq_v_err◂◂eq_ct_ptn 
			
			@.eq_ct { evv c0 c1 } 
				∐ c0 ⊢ k_name◂i0 . 
					lod_tv { evv i0 } ⊢ { evv i0 c2 } 
					eq_ct { evv c2 c1 } ⊢ { evv _ c1 b } 
					∎ { evv k_name◂i0 c1 b } 
				∐ c1 ⊢ k_name◂i1 . 
					lod_tv { evv i1 } ⊢ { evv i1 c2 } 
					eq_ct { evv c0 c2 } ⊢ { evv c0 c2 b } 
					∎ { evv c0 k_name◂i1 b }
				∐ c0 ⊢ k_op_gnr◂{ o_t0 o_n0 ok0 dp0 r_n0 ib0 lc0 v0 }; c1 ⊢ k_op_gnr◂{ o_t1 o_n1 ok1 dp1 r_n1 ib1 lc1 v1 }; o_n0'=o_n1' . 
					opn.eq_st_T◂◂eq_ct_ptn { evv ok0 ok1 } ⊢ { evv ok0 ok1 b }
					∎ { evv k_op_gnr◂{ o_t0 o_n0 ok0 dp0 r_n0 ib0 lc0 v0 } k_op_gnr◂{ o_t1 o_n1 ok1 dp1 r_n1 ib1 lc1 v1 } b }
				∐ c0 ⊢ k_r64◂x0; c1 ⊢ k_r64◂x1; x0'=x1' . 
					∎ { evv k_r64◂x0 k_r64◂x1 bl.t◂{} }
				∐ c0 ⊢ k_s8◂s0; c1 ⊢ k_s8◂s1; s0'=s1' . 
					∎ { evv k_s8◂s0 k_s8◂s1 t◂{} }
				∐ c0 ⊢ k_ctr◂{ i0 n0 v0 }; c1 ⊢ k_ctr◂{ i1 n1 v1 }; i0'=i1' . 
					∎ { evv k_ctr◂{ i0 n0 v0 } k_ctr◂{ i1 n1 v1 } t◂{} }
				∐ c0 ⊢ k_agl◂{ v0 k0 }; c1 ⊢ k_agl◂{ v1 k1 } . 
					lod_tv { evv v0 } ⊢ { evv v0 kv0 } 
					lod_tv { evv v1 } ⊢ { evv v1 kv1 } 
					eq_ct { evv kv0 kv1 } ⊢ { evv kv0 kv1 b0 } 
					eq_ct_ptn { evv k0 k1 } ⊢ { evv k0 k1 b1 } 
					bl.and { b0 b1 } ⊢ b 
					∎ { evv k_agl◂{ v0 k0 } k_agl◂{ v1 k1 } b }
				∐ c0 ⊢ k_op_axm◂{ n0 l0 }; c1 ⊢ k_op_axm◂{ n1 l1 }; n0'=n1' . 
					lst.eq_v_err◂◂eq_ct_ptn { evv l0 l1 } ⊢ { evv l0 l1 b } 
					∎ { evv k_op_axm◂{ n0 l0 } k_op_axm◂{ n1 l1 } b }
				∐ c0 ⊢ k_app◂{ k0 k1 }; c1 ⊢ k_app◂{ k2 k3 } . 
					eq_ct_ptn { evv k0 k2 } ⊢ { evv k0 k2 b0 } 
					eq_ct_ptn { evv k1 k3 } ⊢ { evv k1 k3 b1 } 
					bl.and { b0 b1 } ⊢ b 
					∎ { evv k_app◂{ k0 k1 } k_app◂{ k2 k3 } b }
				∐. . 
					∎ { evv c0 c1 bl.f◂{} }
		§ @.r64_of_k { evv c } 
			∐ c ⊢ k_r64◂x . 
				∎ { evv x } 
			∐ c ⊢ k_name◂i . 
				lod_tv { evv i } ⊢ { evv i c } 
				r64_of_k { evv c } ⊢| 
			∐ c ⊢ k_var◂ _ . 
				_emt %[ "ast.r64_f 1" ] ⊢ _ 
				∎| 
			∐. . 
				» "ast.r64_of 0" _ ⊢ ee0 
				_emt ee0 ⊢ _ 
				∎|
		§ @.s8_of_k { evv c } 
			∐ c ⊢ k_s8◂s . 
				∎ { evv s } 
			∐ c ⊢ k_name◂i . 
				lod_tv { evv i } ⊢ { evv i c } 
				s8_of_k { evv c } ⊢| 
			∐. . 
				» "ast.s8_of_k 0" _ ⊢ ee0 
				_emt ee0 ⊢ _ 
				∎|    
		§§ pnt 
			§ 
				@.cst { evv c }
					∐ c ⊢ k_r64◂x . 
						^ x ⊢ x,sr
						0d' "r" //
						∎ { evv sr } 
					∐ c ⊢ k_s8◂s . 
						mk_esc_s8 s ⊢ { s ss } 
						^ ss ⊢ ss,sr
						"\"" 0' "\"" // 
						∎ { evv sr }
					∐ c ⊢ k_name◂i . 
						
						^ i ⊢ i,si 
							"#" 0d' // 
						∎ { evv si }
					∐ c ⊢ k_op_axm◂{ ax _ } . 
						^ ax ⊢ _,sr 
							".#" 0d' //
						∎ { evv sr }
					∐ c ⊢ k_op_gnr◂{ _ n _ _ _ _ _ _ } . 	
						^ n ⊢ _,s 
							"→[ " 0d' "]" // 
						∎ { evv s }	
					∐ c ⊢ k_app◂_ .
						∎ { evv %[ "?:k_app" ] }
					∐ c ⊢ k_var◂_ . 
						∎ { evv %[ "?:k_var" ] } 
					∐. .  
						» " ? " _ ⊢ sr 
						∎ { evv sr } 
				@.cst_n { evv c }
					∐ c ⊢ k_r64◂x . 
						^ x ⊢ x,sr
						0d' "r" //
						∎ { evv sr } 
					∐ c ⊢ k_s8◂s . 
						mk_esc_s8 s ⊢ { s ss } 
						^ ss ⊢ ss,sr
						"\"" 0' "\"" // 
						∎ { evv sr }
					∐. . 
						» " ? " _ ⊢ sr 
						∎ { evv sr } 
				@.ct_ptn = RP.pnt_l◂◂cst
				@.ct_ptn_lst = lst.pnt_l◂◂{ ct_ptn " " } 
			§
				@.src { evv s } 
					$ s ⊢ 
					∐ re_agl◂{ e sp } .
						##cst_n { evv e } ⊢ { evv se } 
						src_ptn { evv sp } ⊢ { evv ss } 
						^ ss ⊢ _,sr 
							"?◂" 0' // 
						∎ { evv sr } 
					∐ re_reg◂w .
						∎ { evv w } 
					∐. re_v◂c .
						cst_n { evv c } ⊢ { evv sc }
						^ sc ⊢ sc,sr
							"%[ " 0' " ] " // 
						∎ { evv sr }
				@.src_ptn = RP.pnt_l◂◂src 
			§	src_ptn_lst = lst.pnt_l◂◂{ src_ptn " " }
			§	
				@.mtc_atm { evv a } 
					$ a ⊢ 
					∐ re_agl◂{ n mp } .
						mtc_ptn { evv mp } ⊢ { evv smp } 
						\\pnt_name n ⊢ sn 
						^ smp ⊢ smp,sr
							"?◂" 0' // 
						∎ { evv sr }
					∐ re_reg◂w . 
						^ w ⊢ w,sr
							"%" 0' // 
						∎ { evv sr } 
					∐. re_v◂o . 
						» "_" _ ⊢ sr
						∎ { evv sr } 
				@.mtc_ptn = RP.pnt_l◂◂mtc_atm
			§ mtc_ptn_lst = lst.pnt_l◂◂{ mtc_ptn " " }
		§	
			@.lc_code { evv dn lc ep0 }
					$ lc ⊢ 
					∐ jmp◂{ n s } . 
						src_ptn { evv s } ⊢ { evv ss } 
						^ dn,ss ⊢ dn,ss,sr 
							0'*"\t" "? " 1' " ⊢|\n" // 
						rp8.add_s8 { ep0 sr } ⊢ ep0 
						∎ { evv dn ep0 } 
					∐ seq◂{ ll lc } .
						lc_line { evv dn ll ep0 } ⊢ { evv dn ep0 }
						lc_code { evv dn lc ep0 } ⊢|
					∐ mtc◂m .
						lc_mtc { { evv dn ep0 } m } ⊢|
					∐ ret◂_ .
						^ dn ⊢ dn,s
							0'*"\t" "∎ ..\n" //
						rp8.add_s8 { ep0 s } ⊢ ep0 
						∎ { evv dn ep0 }
					∐ op_exh◂{ op sp dp le lx } . 
						∎ { evv dn ep0 }
					∐ tj◂{ x v r } . 
						∎ { evv dn ep0 }
					∐. exn◂ne .
						^ dn ⊢ dn,sr
							0'*"\t" "∎|\n" //
						rp8.add_s8 { ep0 sr } ⊢ ep0 
						∎ { evv dn ep0 }
		
				@.exp_s8 { evv p } 
					$ p ⊢ 
					∐ exp_s8_cst◂c . 
						cst_n { evv c } ⊢|
					∐ exp_s8_idx◂{ f x } .
						^ x ⊢ _,sr 
							0d' ".'" //
						∎ { evv sr } 
					∐. exp_s8_for◂{ n c } . 
						cst_n { evv c } ⊢ { evv sc } 
						^ n,sc ⊢ _,_,sr 
							0d' "*" 1' // 
						∎ { evv sr }  
				@.lc_line { evv dn o ep0 }
					∐ o ⊢ op_name◂{ n ib s d } .
						src_ptn { evv s } ⊢ { evv ss }
						mtc_ptn { evv d } ⊢ { evv sd } 
						##pnt_name n ⊢ sn
						##ct_ptn { evv n } ⊢ { evv sn } 
						^ dn,ss,sd ⊢ dn,ss,sd,sr
							0'*"\t" "? " 1' " ⊢ " 2' "\n" //
						rp8.add_s8 { ep0 sr } ⊢ ep0 
						∎ { evv dn ep0 }
					∐. o ⊢ op_exp_s8◂{ l sl dl } .
						^ dn ⊢ dn,sr
							0'*"\t" "^ .." " ⊢ .." "\n"
							0'*"\t" "\t" //
						rp8.add_s8 { ep0 sr } ⊢ ep0
						lst.pp_l◂◂{ exp_s8 " " } { ep0 evv l } ⊢ { ep0 evv } 
						rp8.add_s8 { ep0 %[ " //\n" ] } ⊢ ep0
						∎ { evv dn ep0 }
				@.mtc_etr { { evv dn ep0 } e } 
					$ e ⊢ 
					∐ mtc_rmf◂m0 .
						_inc dn ⊢ dn 
						lc_mtc { { evv dn ep0 } m0 } ⊢ { evv dn ep0 }
						_dec dn ⊢ dn 
						∎ { evv dn ep0 }
					∐. mtc_code◂{ _ _ lc } .
						_inc dn ⊢ dn
						lc_code { evv dn lc ep0 } ⊢ { evv dn ep0 }
						_dec dn ⊢ dn 
						∎ { evv dn ep0 }
				@.lc_mtc_prd # { { evv dn ep0 } { l e } }
					mtc_etr { { evv dn ep0 } e } ⊢| 
				@.lc_mtc = p_lst.fld_l◂◂lc_mtc_prd
				@.rt_atm { evv a } 
					$ a ⊢ 					
					∐ hp◂{ r h } . 
						hp.pnt h ⊢ sh
						^ r,sh ⊢ r,sh,sr 
							0d' "'" "(= " 1' " )" // 
						∎ { evv sr }
					∐ hp_im◂v . 
						cst { evv v } ⊢ { evv sv } 
						^ sv ⊢ sv,sr 
							"%[ " 0' " ]" // 
						∎ { evv sr } 
					∐ btm◂{} . 
						∎ { evv %[ "-" ] }
					∐ dyn_adt◂{ { ax al } ri rd } .
						^ ax,ri,rd ⊢ _,_,_,s 
							1d' "'(" 0d' ")◂" 2d' "'" // 
						∎ { evv s }  
					∐. stt_adt◂{ c n p } .
						rt { evv p } ⊢ { evv sp }  
						^ c,n,sp ⊢ c,n,sp,sr 
							0d' "(<" 1d' ")◂" 2' // 
						∎ { evv sr }  
				@.rt = RP.pnt_l◂◂rt_atm 
				@.rt_lst = lst.pnt_l◂◂{ rt " " } 
			∎∎
	
		¶ 
			@.type_var 
				∐ app : { type type } 
				∐ type_name : name 
				∐ type_var : _s8 
				∐ type_ln : T.t◂type 
			@.type = T.t◂type_var

		§§ grm 
			¶ 
				@.act r',e' 
					∐ act_cns : { _lst◂(mtc_atm◂r'◂e') MP◂r'◂e' lc_code◂r'◂e'◂(lc_mtc◂r'◂e') rle_flg rle◂e' _opn◂{ MP◂r'◂e' act◂r'◂e' } act◂r'◂e' }
					∐ act_end : { _lst◂(mtc_atm◂r'◂e') MP◂r'◂e' lc_code◂r'◂e'◂(lc_mtc◂r'◂e') rle_flg rle◂e' _opn◂{ MP◂r'◂e' act◂r'◂e' } }
				@.rle_flg
					∐ lex : {}
					∐ synt : {}
					∐ line : {}
				@.rle e'
					∐ ptn_cut : rle_cut◂e'
					∐ ptn_seq : { ct_ptn◂e' rle◂e' }
					∐ ptn_end : {}
				@.rle_cut e' = _lst◂(ptn◂e')
				@.ptn e' = ct_ptn◂e'
			§§ pnt  
				§ 
					@.act { evv dn g ep0 }
						$ g ⊢ 
						∐ act_cns◂{ dl dp lc o ps gc g } .
							pnt.mtc_ptn { evv dp } ⊢ { evv sdp } 
							^ dn,sdp ⊢ dn,sdp,sr
								0'*"\t" "∐ .. ⊢ " 1' "\n" // 
							rp8.add_s8 { ep0 sr } ⊢ ep0 
							_inc dn ⊢ dn
							pnt.lc_code { evv dn lc ep0 } ⊢ { evv dn ep0 }
							_dec dn ⊢ dn
							act { evv dn g ep0 } ⊢| 
						∐. act_end◂{ drl dp lc o ps gc } .
							pnt.mtc_ptn { evv dp } ⊢ { evv sdp } 
							^ dn,sdp ⊢ dn,sdp,sr
								0'*"\t" "∐ .. ⊢ " 1' "\n" // 
							rp8.add_s8 { ep0 sr } ⊢ ep0 
							_inc dn ⊢ dn
							pnt.lc_code { evv dn lc ep0 } ⊢ { evv dn ep0 }
							_dec dn ⊢ dn
							∎ { evv dn ep0 }
					@.rle { evv dn ps ep0 }
						$ ps ⊢ 
						∐ ptn_cut◂cps .
							^ _ ⊢ sr
								" !| " //
							rp8.add_s8 { ep0 sr } ⊢ ep0
							rle_cut { evv dn cps ep0 } ⊢| 
						∐ ptn_seq◂{ p ps } .
							^ _ ⊢ sr
								" .. "  //
							rp8.add_s8 { ep0 sr } ⊢ ep0
							rle { evv dn ps ep0 } ⊢|  
						∐. ptn_end◂{} .
							∎ { evv dn ep0 }
					@.rle_cut { evv dn ps ep0 }
						$ ps ⊢ 
						∐ _cns◂{ p ps } .
							^ _ ⊢ sr
								" .. "  //
							rp8.add_s8 { ep0 sr } ⊢ ep0 
							rle_cut { evv dn ps ep0 } ⊢|  
						∐. _nil◂{} .
							∎ { evv dn ep0 } 
				∎∎
			§ act_regs # {} 
				∎ _cns◂{ re_reg◂%[ "_n" ] _cns◂{ re_reg◂%[ "_r" ] _nil◂{} } }
			∎∎
		¶
			@.file = _lst◂glb_etr
			@.glb_etr
				∐ mdl_etr : { _s8 mdl_etr }
				∐ lc_etr : { _s8 lc_etr }
				∐ lc_qlq_etr : _lst◂{ _s8 lc_etr }
				∐ dt_etr : { _s8 dt_etr }
				∐ dt_qlq_etr : _lst◂{ _s8 dt_etr }
				∐ lc_cst : lc_code◂_s8◂name◂(lc_mtc◂_s8◂name)
			@.mdl_etr
				∐ mdl_def : _lst◂glb_etr
				∐ mdl_ln : name
			@.lc_etr
				∐ lc_def : { _opn◂(RP.t◂_s8) MP◂_s8◂name _opn◂type bl.t lc_code◂_s8◂name◂(lc_mtc◂_s8◂name) }
				∐ lc_ln : cst◂name
				∐ lc_ply : { RP.t◂_s8 SP◂_s8◂name }
				∐ lc_grm : { _opn◂(RP.t◂_s8) grm.act◂_s8◂name } 
			@.dt_etr
				∐ dt_def : { _lst◂_s8 _lst◂{ _s8 type } }
				∐ dt_ln : { _lst◂_s8 type }
		§ of_tpl_ptn_atm # { {} w } 
			∎ { {} k_name◂fst_n◂w }
		§ of_tpl_ptn # p 
			RP.map_l◂◂of_tpl_ptn_atm { {} p } ⊢ { {} p } 
			∎ p
		§§ pnt_file
			§ lc_etr0 = lc_etr 
			§ dt_etr0 = dt_etr
			§ dt_def0 = dt_def 
			§ dt_qlq_etr0 = dt_qlq_etr
			§ lc_qlq_etr0 = lc_qlq_etr
			##§ type_rcd0 = type_rcd 
			§ 
				@.f { evv dn f ep0 } 
					$ f ⊢ 
					∐ _cns◂{ hd tl } .
						glb_etr { evv dn hd ep0 } ⊢ { evv dn ep0 }
						f { evv dn tl ep0 } ⊢| 
					∐. _nil◂{} .
						∎ { evv dn ep0 }
				@.glb_etr { evv dn e ep0 }
					$ e ⊢ 
					∐ mdl_etr◂{ w me } .
						$ me ⊢ 
						∐ mdl_def◂el .
							^ dn,w ⊢ dn,w,sr
								0'*"\t" "§§ " 1' "\n" // 
							rp8.add_s8 { ep0 sr } ⊢ ep0 
							_inc dn ⊢ dn
							f { evv dn el ep0 } ⊢ { evv dn ep0 }
							_dec dn ⊢ dn
							^ dn ⊢ dn,sr 
								0'*"\t" "\t" "∎∎\n" // 
							rp8.add_s8 { ep0 sr } ⊢ ep0
							∎ { evv dn ep0 }
						∐. mdl_ln◂n .
							pnt_name n ⊢ sn
							^ dn,w,sn ⊢ dn,w,sn,sr
								0'*"\t" "§§ " 1' " = " 2' "\n" //
							rp8.add_s8 { ep0 sr } ⊢ ep0
							∎ { evv dn ep0 }
				
					∐ lc_etr0◂{ w lce } .
						^ dn,w ⊢ dn,w,sr
							0'*"\t" "§ " 1' //
						rp8.add_s8 { ep0 sr } ⊢ ep0 
						_inc dn ⊢ dn
						lc_etr { evv dn lce ep0 } ⊢ { evv dn ep0 }
						_dec dn ⊢ dn
						∎ { evv dn ep0 }
					∐ lc_qlq_etr0◂q .
						^ dn ⊢ dn,sr
							0'*"\t" "§ \n" //
						rp8.add_s8 { ep0 sr } ⊢ ep0 
						_inc dn ⊢ dn
						lc_qlq_etr { evv dn q ep0 } ⊢ { evv dn ep0 }
						_dec dn ⊢ dn
						∎ { evv dn ep0 }
					∐ dt_etr0◂{ w d } .
						^ dn,w ⊢ dn,w,sr
							0'*"\t" "¶ " 1' //
						rp8.add_s8 { ep0 sr } ⊢ ep0 
						dt_etr { evv dn d ep0 } ⊢| 
					∐ lc_cst◂lc .
						^ _ ⊢ sr
							"% \n" //
						rp8.add_s8 { ep0 sr } ⊢ ep0 
						_inc dn ⊢ dn
						pnt.lc_code { evv dn lc ep0 } ⊢ { evv dn ep0 }
						_dec dn ⊢ dn
						∎ { evv dn ep0 }
					∐. dt_qlq_etr0◂q .
						^ dn ⊢ dn,sr
							0'*"\t" "¶\n" //
						rp8.add_s8 { ep0 sr } ⊢ ep0 
						_inc dn ⊢ dn
						dt_qlq_etr { evv dn q ep0 } ⊢ { evv dn ep0 }
						_dec dn ⊢ dn
						∎ { evv dn ep0 }
				@.dt_qlq_etr { evv dn q ep0 }
					$ q ⊢ 
					∐ _cns◂{ { w d } q } .
						^ dn,w ⊢ dn,w,sr
							0'*"\t" "@." 1' "\n" // 
						rp8.add_s8 { ep0 sr } ⊢ ep0 
						dt_etr { evv dn d ep0 } ⊢ { evv dn ep0 } 
						dt_qlq_etr { evv dn q ep0 } ⊢|
					∐. _nil◂{} .
						∎ { evv dn ep0 }
				@.dt_etr { evv dn e ep0 }
					$ e ⊢ 
					∐ dt_def0◂{ a l } .
						^ _ ⊢ sr
							"\n" //
						rp8.add_s8 { ep0 sr } ⊢ ep0 
						_inc dn ⊢ dn
						dt_def { evv dn l ep0 } ⊢ { evv dn ep0 }
						_dec dn ⊢ dn
						∎ { evv dn ep0 }
					∐. dt_ln◂{ a t } .
						type t ⊢ st
						^ _ ⊢ sr
							" = " //
						rp8.add_s8 { ep0 sr } ⊢ ep0 
						∎ { evv dn ep0 }
				@.dt_def { evv dn l ep0 }
					$ l ⊢ 
					∐ _cns◂{ { w t } l } .
						type t ⊢ st
						^ dn,w,st ⊢ dn,w,st,sr
							0'*"\t" "∐ " 1' " : " 2' "\n" //
						dt_def { evv dn l ep0 } ⊢|
					∐. _nil◂{} .
						∎ { evv dn ep0 }
				@.type # t 
					∎ %[ "?type" ] 

				@.lc_etr { evv dn e ep0 }
					$ e ⊢ 
					∐ lc_def◂{ o_t dp dt ib lc } .
						∐ dt ⊢ _some◂dt . 
							type dt ⊢ sdt 
							pnt.mtc_ptn { evv dp } ⊢ { evv sdp }
							^ sdp,sdt ⊢ sdp,sdt,sr
								" " 0' " : " 1' "\n" //
							rp8.add_s8 { ep0 sr } ⊢ ep0 
							_inc dn ⊢ dn
							pnt.lc_code { evv dn lc ep0 } ⊢ { evv dn ep0 }
							_dec dn ⊢ dn
							∎ { evv dn ep0 }
						∐. . 
							pnt.mtc_ptn { evv dp } ⊢ { evv sdp }
							^ sdp ⊢ sdp,sr
								" " 0' " : \n" //
							rp8.add_s8 { ep0 sr } ⊢ ep0 
							_inc dn ⊢ dn
							pnt.lc_code { evv dn lc ep0 } ⊢ { evv dn ep0 }
							_dec dn ⊢ dn
							∎ { evv dn ep0 }
					∐ lc_grm◂{ g_o ge } . 
						∎ { evv dn ep0 } 
					∐ lc_ln◂c .
						pnt.cst_n { evv c } ⊢ { evv sc }
						^ sc ⊢ sc,sr
							" = " 0' "\n" //
						rp8.add_s8 { ep0 sr } ⊢ ep0 
						∎ { evv dn ep0 }
					∐. lc_ply◂{ x p } . 
						rp8.add_s8 { ep0 %[ "◂ .. = .." ] } ⊢ ep0
						∎ { evv dn ep0 }
					
				@.lc_qlq_etr { evv dn q ep0 }
					$ q ⊢ 
					∐ _cns◂{ { w le } q } .  
						^ dn,w ⊢ dn,w,sr
							0'*"\t" "@." //
						rp8.add_s8 { ep0 sr } ⊢ ep0 
						lc_etr { evv dn le ep0 } ⊢ { evv dn ep0 } 
						lc_qlq_etr { evv dn q ep0 } ⊢| 
					∐. _nil◂{} .
						∎ { evv dn ep0 }				
			∎∎
		¶ k_of a',b' 
			∐ hp_of : b' 
			∐ im_of : a' 
		§ r64_of_rt { evv p }
			∐ p ⊢ RP.atm◂a . 
				∐ a ⊢ hp◂{ r0 h0 }; h0 ⊢ hp.r64◂{} . 
					hp_of r0 ⊢ a 
					∎ { evv a }
				∐ a ⊢ hp_im◂iv . 
					r64_of_k { evv iv } ⊢ { evv x } 
					im_of x ⊢ x  
					∎ { evv x } 
				∐. . 
					RP.atm a ⊢ p 
					» "r64_of_rt 0" _ ⊢ ee0 
					_emt ee0 ⊢ _ 
					pnt.rt { evv p } ⊢ { evv sp } 
					_emt sp ⊢ _ 
					∎| 
			∐. . 
				» "r64_of_rt 1" _ ⊢ ee0 
				_emt ee0 ⊢ _ 
				∎| 
		§ s8_of_rt { evv p }
			∐ p ⊢ RP.atm◂a . 
				∐ a ⊢ hp◂{ r0 h0 }; h0 ⊢ hp.opq◂{} . 
					hp_of r0 ⊢ a 
					∎ { evv a }
				∐ a ⊢ hp◂{ r0 h0 } . 
					_emt %[ "s8_of_rt 5" ] ⊢ _ 
					∎|
				∐ a ⊢ hp_im◂iv . 
					s8_of_k { evv iv } ⊢ { evv x } 
					im_of x ⊢ x  
					∎ { evv x } 
				∐ a ⊢ btm◂{} .
					_emt %[ "s8_of_rt 2" ] ⊢ _ 
					∎|
				∐ a ⊢ stt_adt◂_ .
					_emt %[ "s8_of_rt 3" ] ⊢ _ 
					∎|
				∐ a ⊢ dyn_adt◂_ .
					_emt %[ "s8_of_rt 4" ] ⊢ _ 
					∎|
				∐. . 
					» "s8_of_rt 0" _ ⊢ ee0 
					_emt ee0 ⊢ _ 
					∎| 
			∐. . 
				» "s8_of_rt 1" _ ⊢ ee0 
				_emt ee0 ⊢ _ 
				∎|
		§ arr_of_rt { evv p }
			∐ p ⊢ RP.atm◂a; a ⊢ hp◂{ r0 h0 }; h0 ⊢ hp.arr◂h . 
				∎ { evv { r0 h } }
			∐. . 
				_emt %[ "arr_of_rt 0" ] ⊢ _ 
				∎| 
		∎∎
	§§ stt_v 
		§ 
			@.mk_lst { l p }
				$ p ⊢ 
				∐ RP.rcd◂l0 . 
					mk_lst_lst { l l0 } ⊢| 
				∐. RP.atm◂a . 
					$ a ⊢ 
					∐ ast.hp◂{ r h } .
						∎ ⟦ r < l ⟧ 
					∐ ast.hp_im◂_ . 
						∎ l
					∐ ast.btm◂{} . 
						∎ l 
					∐ ast.dyn_adt◂{ { ax al } ri rd } .
						∎ ⟦ ri rd < l ⟧ 
					∐. ast.stt_adt◂{ i n p } . 
						mk_lst { l p } ⊢|
			@.mk_lst_lst = lst.fld_l◂◂mk_lst
			

			§ mk_lst_i # { l { _ p } } 
				mk_lst { l p } ⊢|
			§	mk_lst_env # { irv l } 
				hsh_tbl.itr◂◂mk_lst_i { irv l } ⊢|
			§ r64_reg◂r = RP.atm◂ast.hp◂{ %r ast.hp.r64◂{} }
			§ r64_im◂x = RP.atm◂ast.hp_im◂ast.k_r64◂%x 
			§ s8_reg◂r = RP.atm◂ast.hp◂{ %r ast.hp.opq◂{} }  
			§ s8_im◂s = RP.atm◂ast.hp_im◂ast.k_s8◂%s
			§ arr_reg◂{ r h } = RP.atm◂ast.hp◂{ %r ast.hp.arr◂%h }   
			§ id_reg◂{ r i h } = RP.atm◂ast.hp◂{ r ast.hp.id◂{ i h } } 
			§ Clr_reg◂{ r h } = id_reg◂{ r %[ ast.hp.id.Clr ] h } 
			§ pt_reg◂{ r h } = id_reg◂{ r %[ ast.hp.id.pt ] h } 
			§ ptns_of_env_i # { l { i p } } 
				∎ _cns◂{ p l } 
			§ ptns_of_env # v 
				hsh_tbl.rb◂◂ptns_of_env_i { v ⟦⟧ } ⊢| 
			∎∎
	§ mk_app_i # { p a } 
		∎ RP.atm◂T.var◂ast.app◂{ p a } 
	§ mk_app = lst.fld_l◂◂mk_app_i
	§§ e_axm 
		§ mk_arr = 0r 
		§ exc_q = 1r 
		§ set_q = 2r 
			§ get_q = 3r 
			§ lod_q = 4r 
			§ args = 5r 
			§ mlc_s8 = 6r 
			§ s8_len = 7r 
			§ emt = 8r 
			§ inc = 9r 
			§ dec = 10r 
			§ add = 11r 
			§ sub = 12r 
			§ imul = 13r
			§ sts = 14r 
			§ lds = 15r 
			§ setge = 16r 
			§ rep_movsb = 17r 
			§ nil = 18r 
			§ cns = 19r 
			§ some = 20r 
			§ none = 21r
			§ in_fn = 22r
			§ emt_s8_to = 23r 
			§ cd = 24r  
			§ byt = 25r

			§ mk_clr = 26r 
			§ alp = 27r 
			§ frp = 28r 
			§ mkp = 29r
			§ dlp = 30r

			§ arr_len = 31r 
			§ arr_of_lst = 32r

			§ scf_d = 33r 
			§ scf_x = 34r 
			§ dlt0 = 35r 
			§ info = 36r 
			§ rpc = 37r
			§ getchar = 38r 

			§ shl = 39r 
			§ shr = 40r 

			§ app = 41r 
			§ and = 42r 
			§ or = 43r
			
			§ prs = 44r 
			§ opn_exn = 45r 
			§ id = 46r 
			§ c_call = 47r
			§ xor = 48r  
			§ lds64 = 49r 
			§ s8_hsh = 50r
			§ dlt = 51r
			§ cst = 52r
			§ psc = 53r  
			§ synt = 54r 
			§ line = 55r 
			§ grm = 56r
			§ grm_ftr = 57r 
			§ ftr = 58r 
			§ inl = 59r 
			§ tj = 60r 
			§ ala = 61r 

			§ cli = 62r 
			§ clp = 63r 
			§ cla = 64r 
			§ cln = 65r 
			§ cls = 66r 
			\[
			§ mk_arr0 = 59r 
			§ set_q0 = 60r 
			§ of_arr0 = 61r 
	\]
	§ N = 67r 
	\[
	§ slv_i { { tv tv_n } i w t } 
		newvar_ln { tv_n tv t } ⊢ { tv_n tv v } 
		_exc_q { i { w v } } ⊢ { i _ }
		_inc i ⊢ i 
		∎ { { tv tv_n } i }
	\]
	§ slv_name i  
		=+ i' 
		∐ 
			∎ %[ "_mk_arr" ] 
		∐		
			∎ %[ "_exc_q" ]
		∐ 
			∎ %[ "_set_q" ]
		∐ 		
			∎ %[  "_get_q"  ]
		∐ 			
			∎ %[  "_lod_q"  ]
		∐  		
			∎ %[  "_args"  ]
		∐ 		
			∎ %[  "_mlc_s8"  ]
		∐	
			∎ %[  "_s8_len"  ]
		∐
			∎ %[  "_emt"  ]
		∐ 		
			∎ %[  "_inc"  ]
		∐ 		
			∎ %[  "_dec"  ]
		∐ 		
			∎ %[  "_add"  ]
		∐ 		
			∎ %[  "_sub"  ]
		∐ 		
			∎ %[  "_imul"  ]
		∐  		
			∎ %[  "_sts"  ]
		∐ 
			∎ %[  "_lds"  ]
		∐ 
			∎ %[  "_setge"  ]
		∐ 
			∎ %[  "_rep_movsb"  ]
		∐ 
			∎ %[  "_nil"  ]
		∐ 
			∎ %[  "_cns"  ]
		∐ 
			∎ %[  "_some"  ]
		∐ 
			∎ %[  "_none"  ]
		∐ 
			∎ %[  "_in_fn"  ]
		∐ 
			∎ %[  "_emt_s8_to"  ]
		∐ 
			∎ %[  "_cd"  ]
		∐ 
			∎ %[  "_byt"  ]
		∐ 
			∎ %[  "_0"  ]
		∐ 
			∎ %[  "_1"  ]
		∐ 
			∎ %[  "_2"  ]
		∐ 
			∎ %[  "_3"  ]
		∐ 
			∎ %[  "_4"  ]
		∐ 
			∎ %[  "_arr_len"  ]
		∐ 
			∎ %[  "_arr_of_lst"  ]
		∐ 
			∎ %[  "_scf_d"  ]
		∐ 
			∎ %[  "_scf_x"  ]
		∐ 
			∎ %[  "_dlt0"  ]
		∐ 
			∎ %[  "_info"  ]
		∐ 
			∎ %[  "_rpc"  ]
		∐ 
			∎ %[  "_getchar"  ]
		∐ 
			∎ %[  "_shl"  ]
		∐ 
			∎ %[  "_shr"  ]
		∐ 
			∎ %[  "_app"  ]
		∐ 
			∎ %[  "_and"  ]
		∐ 
			∎ %[  "_or"  ]
		∐ 
			∎ %[  "_prs"  ]
		∐ 
			∎ %[  "_5"  ]
		∐ 
			∎ %[  "_id"  ]
		∐ 
			∎ %[  "_6"  ]
		∐ 
			∎ %[  "_xor"  ]
		∐ 
			∎ %[  "_lds64"  ]
		∐ 
			∎ %[  "_s8_hsh"  ]
		∐ 
			∎ %[  "_dlt"  ]
		∐ 
			∎ %[  "_cst"  ]
		∐ 
			∎ %[  "_psc"  ]
		∐ 
			∎ %[  "_synt"  ]
		∐ 
			∎ %[  "_line"  ]
		∐ 
			∎ %[  ".grm"  ]
		∐ 
			∎ %[  ".grm_ftr"  ]
		∐ 
			∎ %[  "_ftr"  ]
		∐ 
			∎ %[  "_inl"  ]
		∐	
			∎ %[  "_tj"  ]
		∐ 
			∎ %[ "_ala" ] 
		∐ 
			∎ %[ "_cli" ] 
		∐ 
			∎ %[ "_clp" ] 
		∐ 
			∎ %[ "_cla" ]
		∐ 
			∎ %[ "_cln" ] 
		∐ 
			∎ %[ "_cls" ]
		∐. 
			∎| 
	§ slv { { tv tv_n } i }  
		$ %[ 0r ] ⊢ lv 
		=+ i' 
		∐ 
			T.newvar_q { tv_n tv lv } ⊢ { tv_n tv lv yv }
			$ yv ⊢ yv,yv0,yv1
			∎ { { tv tv_n } TX.t_imp◂{ RP.cns2◂{ TX.r64◂{} %yv0 } RP.cns3◂{ TX.r64◂{} %yv TX.arr◂yv1 } } }
		∐		
			T.newvar_q { tv_n tv lv } ⊢ { tv_n tv lv yv }
			$ yv ⊢ yv,yv0,yv1 
			$ TX.arr◂yv1 ⊢ ya,ya0 
			∎ { { tv tv_n } TX.t_imp◂{ RP.cns3◂{ ya TX.r64◂{} yv0 } RP.cns3◂{ ya0 TX.r64◂{} yv } } }
		∐ 			
			T.newvar_q { tv_n tv lv } ⊢ { tv_n tv lv yv }
			$ yv ⊢ yv,yv0 
			$ TX.arr◂yv ⊢ ya,ya0 
			∎ { { tv tv_n } TX.t_imp◂{ RP.cns3◂{ ya TX.r64◂{} yv0 } RP.cns2◂{ ya0 TX.r64◂{} } } }
		∐ 		
			T.newvar_q { tv_n tv lv } ⊢ { tv_n tv lv yv }
			$ yv ⊢ yv,yv0 
			$ TX.arr◂yv ⊢ ya,ya0 
			∎ { { tv tv_n } TX.t_imp◂{ RP.rcd◂_cns◂{ ya0 _cns◂{ TX.r64◂{} _nil◂{} } } RP.rcd◂_cns◂{ ya _cns◂{ TX.r64◂{} _cns◂{ yv0 _nil◂{} } } } } }
		∐ 			
			T.newvar_q { tv_n tv lv } ⊢ { tv_n tv lv yv }
			$ yv ⊢ yv,yv0 
			$ TX.arr◂yv ⊢ ya,ya0 
			∎ { { tv tv_n } TX.t_imp◂{ RP.cns2◂{ ya0 TX.r64◂{} } RP.cns3◂{ ya TX.r64◂{} yv0 } } }
		∐  		
			∎ { { tv tv_n } TX.lst◂TX.s8◂{} }  
		∐ 		
			∎ { { tv tv_n } TX.t_imp◂{ TX.r64◂{} RP.cns2◂{ TX.r64◂{} TX.s8◂{} } } } 
		∐	
			∎  { { tv tv_n } TX.t_imp◂{ TX.s8◂{} RP.cns2◂{ TX.s8◂{} TX.r64◂{} } } } 
		∐
			T.newvar_q { tv_n tv lv } ⊢ { tv_n tv lv yv }
			$ yv ⊢ yv,yv0 
			∎ { { tv tv_n } TX.t_imp◂{ yv yv0 } } 
		∐ 		
			∎ { { tv tv_n } TX.t_imp◂{ TX.r64◂{} TX.r64◂{} } } 
		∐ 		
			∎ { { tv tv_n } TX.t_imp◂{ TX.r64◂{} TX.r64◂{} } } 
		∐ 		
			∎ { { tv tv_n } TX.r64_op2◂{} } 
		∐ 		
			∎ { { tv tv_n } TX.r64_op2◂{} } 
		∐ 		
			∎ { { tv tv_n } TX.r64_op2◂{} } 
		∐  		
			∎ { { tv tv_n } TX.t_imp◂{ RP.cns3◂{ TX.s8◂{} TX.r64◂{} TX.r64◂{} } RP.cns3◂{ TX.s8◂{} TX.r64◂{} TX.r64◂{} } } } 
		∐ 
			∎ { { tv tv_n } TX.t_imp◂{ RP.cns2◂{ TX.s8◂{} TX.r64◂{} } RP.cns3◂{ TX.s8◂{} TX.r64◂{} TX.r64◂{} } } } 
		∐ 
			∎ { { tv tv_n } TX.t_imp◂{ RP.cns2◂{ TX.r64◂{} TX.r64◂{} } RP.cns3◂{ TX.r64◂{} TX.r64◂{} TX.r64◂{} } } } 
		∐ 
			$ RP.cns5◂{ TX.r64◂{} TX.s8◂{} TX.r64◂{} TX.s8◂{} TX.r64◂{} } ⊢ y_s
			$ y_s ⊢ y_s,y_d 
			∎ { { tv tv_n } TX.t_imp◂{ %y_s %y_d } } 
		∐ 
			T.newvar_q { tv_n tv lv } ⊢ { tv_n tv lv y0 }
			∎ { { tv tv_n } TX.t_imp◂{ RP.rcd◂_nil◂{} TX.lst◂y0 } } 
		∐ 
			T.newvar_q { tv_n tv lv } ⊢ { tv_n tv lv y0 }
			$ y0 ⊢ y0,y1 
			$ TX.lst◂y0 ⊢ y0,y2 
			∎ { { tv tv_n } TX.t_imp◂{ RP.cns2◂{ y1 y0 } %y2 } } 
		∐ 
			T.newvar_q { tv_n tv lv } ⊢ { tv_n tv lv y0 }
			$ y0 ⊢ y0,y1 
			∎ { { tv tv_n } TX.t_imp◂{ y0 TX.opn◂y1 } } 
		∐ 
			T.newvar_q { tv_n tv lv } ⊢ { tv_n tv lv y0 }
			∎ { { tv tv_n } TX.t_imp◂{ RP.rcd◂_nil◂{} %y0 } } 
		∐ 
			∎ { { tv tv_n } TX.t_imp◂{ TX.s8◂{} RP.cns2◂{ TX.s8◂{} TX.s8◂{} } } } 
		∐ 
			∎ { { tv tv_n } TX.t_imp◂{ RP.cns2◂{ TX.s8◂{} TX.s8◂{} } RP.cns2◂{ TX.s8◂{} TX.s8◂{} } } } 
		∐ 
			∎ { { tv tv_n } TX.t_imp◂{ TX.s8◂{} TX.s8◂{} } } 
		∐ 
			∎ { { tv tv_n } TX.grm◂TX.r64◂{} } 
		∐ 
			∎ { { tv tv_n } TX.grm◂TX.r64◂{} } 
		∐ 
			∎ { { tv tv_n } TX.grm◂TX.r64◂{} } 
		∐ 
			∎ { { tv tv_n } TX.grm◂TX.r64◂{} } 
		∐ 
			∎ { { tv tv_n } TX.grm◂TX.r64◂{} } 
		∐ 
			∎ { { tv tv_n } TX.grm◂TX.r64◂{} } 
		∐ 
			T.newvar_q { tv_n tv lv } ⊢ { tv_n tv lv yv }
			$ TX.arr◂yv ⊢ ya,ya0 
			∎ { { tv tv_n } TX.t_imp◂{ ya RP.cns2◂{ ya0 TX.r64◂{} } } } 
		∐ 
			T.newvar_q { tv_n tv lv } ⊢ { tv_n tv lv yv }
			$ yv ⊢ yv,yv0 				
			∎ { { tv tv_n } TX.t_imp◂{ TX.lst◂yv TX.arr◂yv0 } } 
		∐ 
			∎ { { tv tv_n } TX.grm◂TX.r64◂{} } 
		∐ 
			∎ { { tv tv_n } TX.grm◂TX.r64◂{} } 
		∐ 
			T.newvar_q { tv_n tv lv } ⊢ { tv_n tv lv yv }
			∎ { { tv tv_n } TX.t_imp◂{ yv RP.unt◂{} } } 
		∐ 
			∎ { { tv tv_n } TX.t_imp◂{ RP.unt◂{} RP.unt◂{} } } 
		∐ 
			T.newvar_q { tv_n tv lv } ⊢ { tv_n tv lv yv }
			$ yv ⊢ yv,yv0,yv1 
			∎ { { tv tv_n } TX.t_imp◂{ yv RP.cns2◂{ yv0 yv1 } } } 
		∐ 
			∎ { { tv tv_n } TX.t_imp◂{ RP.unt◂{} TX.r64◂{} } } 
		∐ 
			∎ { { tv tv_n } TX.r64_op2◂{} } 
		∐ 
			∎ { { tv tv_n } TX.r64_op2◂{} } 
		∐ 
			T.newvar_q { tv_n tv lv } ⊢ { tv_n tv lv yx }
			$ yx ⊢ yx,yx0 	
			T.newvar_q { tv_n tv lv } ⊢ { tv_n tv lv yy }
			$ yy ⊢ yy,yy0
			∎ { { tv tv_n } TX.t_imp◂{ RP.cns2◂{ TX.t_imp◂{ yx yy } yx0 } yy0 } } 
		∐ 
			∎ { { tv tv_n } TX.r64_op2◂{} } 
		∐ 
			∎ { { tv tv_n } TX.r64_op2◂{} } 
			\\ prs
		∐ 
			T.newvar_q { tv_n tv lv } ⊢ { tv_n tv lv yv } 
			$ yv ⊢ yv,yv0 
			∎ { { tv tv_n } RP.atm◂T.ct_imp◂{ TX.grm◂yv TX.prs_opn◂yv0 } } 
		∐ 
			\\∎| 
			∎ { { tv tv_n } TX.grm◂TX.r64◂{} } 
		∐ 
			T.newvar_q { tv_n tv lv } ⊢ { tv_n tv lv yv }
			$ yv ⊢ yv,yv0 
			∎ { { tv tv_n } TX.t_imp◂{ yv yv0 } } 
		\\ c_call 
		∐ 
			∎ { { tv tv_n } TX.grm◂TX.r64◂{} } 
		∐ 
			∎ { { tv tv_n } TX.r64_op2◂{} } 
		∐ 
			∎ { { tv tv_n } TX.t_imp◂{ RP.cns2◂{ TX.s8◂{} TX.r64◂{} } RP.cns3◂{ TX.s8◂{} TX.r64◂{} TX.r64◂{} } } } 
		\\ s8_hsh 
		∐ 
			∎ { { tv tv_n } TX.t_imp◂{ TX.s8◂{} RP.cns2◂{ TX.s8◂{} TX.r64◂{} } } } 
		∐ 
			T.newvar_q { tv_n tv lv } ⊢ { tv_n tv lv yv }
			∎ { { tv tv_n } TX.t_imp◂{ yv RP.unt◂{} } } 
		∐ 
			T.newvar_q { tv_n tv lv } ⊢ { tv_n tv lv yv }
			$ yv ⊢ yv,yv0 
			∎ { { tv tv_n } RP.atm◂T.ct_imp◂{ yv TX.t_imp◂{ RP.unt◂{} yv0 } } } 
		∐ 
			∎ { { tv tv_n } RP.atm◂T.ct_imp◂{ TX.s8◂{} TX.grm◂RP.unt◂{} } } 
		∐ 
			∎ { { tv tv_n } TX.grm◂RP.unt◂{} } 
		∐ 
			∎ { { tv tv_n } TX.grm◂RP.unt◂{} } 
		∐ 
			T.newvar_q { tv_n tv lv } ⊢ { tv_n tv lv yv }
			$ yv ⊢ yv,yv0 
			∎ { { tv tv_n } RP.atm◂T.ct_imp◂{ TX.prs_opn◂yv0 TX.grm◂yv } }  
		∐ 
			T.newvar_q { tv_n tv lv } ⊢ { tv_n tv lv yv }
			T.newvar_q { tv_n tv lv } ⊢ { tv_n tv lv yw }
			$ yv ⊢ yv,yv0 
			$ yw ⊢ yw,yw0 
			∎ { { tv tv_n } TX.t_ct_imp◂{ TX.t_ct_imp◂{ yw TX.prs_opn◂yv0 } TX.t_ct_imp◂{ yw0 TX.grm◂yv } } }  
		∐ 
			T.newvar_q { tv_n tv lv } ⊢ { tv_n tv lv yv }
			T.newvar_q { tv_n tv lv } ⊢ { tv_n tv lv yw }
			T.newvar_q { tv_n tv lv } ⊢ { tv_n tv lv yx }
			T.newvar_q { tv_n tv lv } ⊢ { tv_n tv lv yy }
			$ yv ⊢ yv,yv0 
			$ yw ⊢ yw,yw0 
			$ yx ⊢ yx,yx0 
			∎ { { tv tv_n } TX.t_ct_imp3◂{ TX.t_ct_imp◂{ yv yw } TX.t_ct_imp◂{ yx yv0 } yx0 yw0 } }  
		∐ 
			T.newvar_q { tv_n tv lv } ⊢ { tv_n tv lv yv }
			T.newvar_q { tv_n tv lv } ⊢ { tv_n tv lv yw }
			$ yv ⊢ yv,yv0 
			$ yw ⊢ yw,yw0 
			∎ { { tv tv_n } TX.t_ct_imp◂{ TX.t_imp◂{ yv yw } TX.t_imp◂{ yv0 yw0 } } }  
		∐	
			T.newvar_q { tv_n tv lv } ⊢ { tv_n tv lv yv }
			T.newvar_q { tv_n tv lv } ⊢ { tv_n tv lv yw }
			$ yv ⊢ yv,yv0,yv1 
			$ yw ⊢ yw,yw0,yw1 
			∎ { { tv tv_n } TX.t_ct_imp◂{ RP.cns2◂{ TX.arr◂TX.t_imp◂{ yv yw } TX.t_imp◂{ yv1 yw1 } } TX.t_imp◂{ RP.cns2◂{ TX.r64◂{} yv0 } yw0 } } }  
		\\ ala 
		∐	
			T.newvar_q { tv_n tv lv } ⊢ { tv_n tv lv yv }
			T.newvar_q { tv_n tv lv } ⊢ { tv_n tv lv yk }
			T.newvar_q { tv_n tv lv } ⊢ { tv_n tv lv yw }
			$ yv ⊢ yv,yv0 
			$ yw ⊢ yw,yw0
			$ yk ⊢ yk,yk0,yk1,yk2
			∎ { { tv tv_n } TX.t_ct_imp◂{ TX.t_imp◂{ RP.cns3◂{ yv TX.r64◂{} yk } RP.cns2◂{ yw yk0 } } TX.t_imp◂{ RP.cns3◂{ yv0 TX.r64◂{} TX.arr◂yk1 } RP.cns2◂{ yw0 TX.arr◂yk2 } } } }  
		\\ cli 
		∐ 
			T.newvar_q { tv_n tv lv } ⊢ { tv_n tv lv yk }
			∎ { { tv tv_n } TX.t_imp◂{ RP.unt◂{} TX.Clr◂yk } }  
		\\ clp 
		∐ 
			T.newvar_q { tv_n tv lv } ⊢ { tv_n tv lv yk }
			$ yk ⊢ yk,yk0,yk1,yk2
			∎ { { tv tv_n } TX.t_imp◂{ RP.cns2◂{ TX.Clr◂yk yk0 } RP.cns2◂{ TX.Clr◂yk1 TX.pt◂yk2 } } }
		\\ cla 
		∐ 
			T.newvar_q { tv_n tv lv } ⊢ { tv_n tv lv yv }
			T.newvar_q { tv_n tv lv } ⊢ { tv_n tv lv yk }
			T.newvar_q { tv_n tv lv } ⊢ { tv_n tv lv yw }
			$ yv ⊢ yv,yv0 
			$ yw ⊢ yw,yw0
			$ yk ⊢ yk,yk0,yk1,yk2,yk3,yk4,yk5
			∎ { { tv tv_n } TX.t_ct_imp◂{ TX.t_imp◂{ RP.cns2◂{ yv yk } RP.cns2◂{ yw yk0 } } TX.t_imp◂{ RP.cns3◂{ yv0 TX.pt◂yk4 TX.Clr◂yk1 } RP.cns3◂{ yw0 TX.pt◂yk5 TX.Clr◂yk2 } } } }  	
		\\ cln 
		∐ 
			T.newvar_q { tv_n tv lv } ⊢ { tv_n tv lv yk }
			$ yk ⊢ yk,yk1,yk2
			∎ { { tv tv_n } TX.t_imp◂{ TX.Clr◂yk RP.cns2◂{ TX.Clr◂yk1 TX.pt◂yk2 } } }
		\\ cls 
		∐ 
			T.newvar_q { tv_n tv lv } ⊢ { tv_n tv lv yk }
			$ yk ⊢ yk,yk0,yk1,yk2,yk3
			∎ { { tv tv_n } TX.t_imp◂{ RP.cns3◂{ TX.Clr◂yk TX.pt◂yk3 yk0 } RP.cns2◂{ TX.Clr◂yk1 TX.pt◂yk2 } } }
		∐. 
			∎| 
							\[
						∐ n'=e_axm.mk_arr0 .
							T.newvar_q { tv_n tv lv } ⊢ { tv_n tv lv yv }
							∎ { { tv tv_n } %[ "_mk_arr0" ] TX.t_imp◂{ RP.cns2◂{ TX.r64◂{} TX.r64◂{} } RP.cns3◂{ TX.r64◂{} TX.r64◂{} TX.arr0◂yv } } }
						∐ n'=e_axm.set_q0 .
							T.newvar_q { tv_n tv lv } ⊢ { tv_n tv lv yv }
							$ yv ⊢ yv,yv0 
							$ TX.arr0◂yv ⊢ ya,ya0 
							∎ { { tv tv_n } %[ "_set_q0" ] TX.t_imp◂{ RP.cns3◂{ ya TX.r64◂{} yv0 } RP.cns2◂{ ya0 TX.r64◂{} } } }										
						∐ n'=e_axm.of_arr0 . 
							T.newvar_q { tv_n tv lv } ⊢ { tv_n tv lv yv }
							$ yv ⊢ yv,yv0 
							∎ { { tv tv_n } %[ "_of_arr0" ] TX.t_imp◂{ TX.arr0◂yv TX.arr◂yv0 } }				
						∐. . 
							_emt n ⊢ _ 
							_emt %[ "slv_op_axm 0" ] ⊢ _ 
							∎|
						\]
			∎∎
		§§ EX = e_axm 
		§ 
		@.exc_tpl { vv t p } 
			$ t ⊢ 
			∐ RP.rcd◂l0 . 
				∐ p ⊢ RP.rcd◂l1 . 
					exc_tpl_lst { vv l0 l1 } ⊢|
				∐. . 
					_emt %[ "exc_tpl 0" ] ⊢ _ 
					∎|  
			∐. RP.atm◂i0 . 
				set_tv { vv i0 p } ⊢ { vv i0 } 
				∎ vv
			@.exc_tpl_lst { vv l0 l1 } 
				∐ l0 ⊢ _cns◂{ t l0 }; l1 ⊢ _cns◂{ p l1 } . 
					exc_tpl { vv t p } ⊢ vv
					exc_tpl_lst { vv l0 l1 } ⊢|
				∐ l0 ⊢ _nil◂{}; l1 ⊢ _nil◂{} . 
					∎ vv
				∐. . 
					∎| 
		
		
		§§ ip
		§ @.id_line_i { { m0 lc } ml }
			$ ml ⊢ 
			∐ _cns◂{ m1 ml } . 
				id_line_i { { m0 lc } ml } ⊢ lc 
				∎ ast.seq◂{ ast.op_call◂{ RP.atm◂ast.k_name◂ast.fst_n◂%[ "_rpc" ] RP.atm◂ast.re_reg◂%[ ".r0" ] RP.cns2◂{ RP.atm◂ast.re_reg◂%[ ".r0" ] m1 } } lc }
			∐. _nil◂{} . 
				∎ ast.seq◂{ ast.op_call◂{ RP.atm◂ast.k_name◂ast.fst_n◂%[ "_id" ] RP.atm◂ast.re_reg◂%[ ".r0" ] m0 } lc }
		§ id_line { sp ml lc } 
			$ ml ⊢ 
			∐ _cns◂{ m0 ml } . 
				∐ ml ⊢ _nil◂{} . 
					∎ ast.seq◂{ ast.op_call◂{ RP.atm◂ast.k_name◂ast.fst_n◂%[ "_id" ] sp m0 } lc }
				∐. . 
					id_line_i { { m0 lc } ml } ⊢ lc 
					∎ ast.seq◂{ ast.op_call◂{ RP.atm◂ast.k_name◂ast.fst_n◂%[ "_id" ] sp RP.atm◂ast.re_reg◂%[ ".r0" ] } lc }
			∐. _nil◂{} . 
				_emt %[ "ip.id_line 0" ] ⊢ _ 
				∎| 
		§§ grm 
			§ seq = ast.seq 
			§ reg◂n = RP.atm◂ast.re_reg◂n 
			§ ret◂p = ast.ret◂‹ { p ⟦⟧ } › 
			§ name◂n = RP.atm◂ast.k_name◂n 
			§ f_name◂n = name◂ast.fst_n◂n 
			§ ct_app◂{ f x } = RP.atm◂ast.k_app◂{ f x }
			§ opc◂{ f x y } = ast.op_call◂{ f x y } 
			§ jmp◂{ f x } = ast.jmp◂{ f x }
			§ rb_r◂lc = ast.seq◂{ opc◂{ f_name◂%[ "_dlt" ] reg◂%[ ".n" ] RP.unt◂{} } ast.seq◂{ opc◂{ f_name◂%[ "_rpc" ] reg◂%[ ".r" ] RP.cns2◂{ reg◂%[ ".r" ] reg◂%[ ".n" ] } } lc } } 
			§ ini◂{} = RP.cns2◂{ reg◂%[ ".s" ] reg◂%[ ".r" ] }
			§ ini_n◂lc = ast.seq◂{ opc◂{ f_name◂%[ "_rpc" ] reg◂%[ ".r" ] RP.cns2◂{ reg◂%[ ".r" ] reg◂%[ ".n" ] } } lc }
			§ env◂{} = RP.cns3◂{ reg◂%[ ".s" ] reg◂%[ ".r" ] reg◂%[ ".n" ] }
			§ re_none◂{} = RP.atm◂ast.re_agl◂{ ast.fst_n◂%[ "_none" ] RP.unt◂{} } 
			§ re_some◂s = RP.atm◂ast.re_agl◂{ ast.fst_n◂%[ "_some" ] s }
			§ mtc_some◂{ o s } = ast.mtc_id◂{ o re_some◂s }
			§ mtc_none◂o = ast.mtc_id◂{ o re_none◂{} }
			§ mtc_opn # { o m lc0 lc1 } 
				$ o ⊢ o,o0 
				∎ ast.mtc◂p_cns◂{ { ⟦ mtc_some◂{ o m } ⟧ lc0 } p_end◂{ ⟦ mtc_none◂o0 ⟧ lc1 } }
			§ op_prs◂g = opc◂{ ct_app◂{ f_name◂%[ "_prs" ] g } RP.cns2◂{ reg◂%[ ".s" ] reg◂%[ ".n" ] } RP.cns3◂{ reg◂%[ ".s" ] reg◂%[ ".n" ] reg◂%[ ".o" ] } }
			§ op_f◂f = opc◂{ f RP.cns2◂{ reg◂%[ ".s" ] reg◂%[ ".n" ] } RP.cns3◂{ reg◂%[ ".s" ] reg◂%[ ".n" ] reg◂%[ ".o" ] } } 
			§ ret_fail◂{} = ret◂RP.cns3◂{ reg◂%[ ".s" ] reg◂%[ ".r" ] re_none◂{} }
			§ ret_succ◂a = ret◂RP.cns3◂{ reg◂%[ ".s" ] reg◂%[ ".n" ] re_some◂a }
			§ mtc_lc◂lc = ast.mtc_code◂{ ⟦⟧ ⟦⟧ lc } 
			§ rN # n 
				^ n ⊢ n,s 
					".r" 0d' // 
				∎ { n s } 
			§ fN # n 
				^ n ⊢ n,s 
					".f" 0d' // 
				∎ { n s }
			§ reg_n # n 
				rN n ⊢ { n s } 
				∎ { n reg◂s } 
			§ f_n { n go } 
				fN n ⊢ { n s } 
				_inc n ⊢ n 
				$ go ⊢ 
				∐ _some◂p . 
					ast.of_tpl_ptn p ⊢ p 
					∎ { n RP.atm◂ast.k_app◂{ f_name◂s p } }
				∐. _none◂{} . 
					∎ { n f_name◂s }
			§ rf { f lc } 
				$ f ⊢ 
				∐ ast.grm.line◂{} .
					∎ { ast.grm.line◂{} ast.seq◂{ op_prs◂f_name◂%[ "_line" ] seq◂{ opc◂{ f_name◂%[ "_dlt" ] reg◂%[ ".o" ] RP.unt◂{} } lc } } }
				∐ ast.grm.synt◂{} . 
					∎ { ast.grm.synt◂{} ast.seq◂{ op_prs◂f_name◂%[ "_synt" ] seq◂{ opc◂{ f_name◂%[ "_dlt" ] reg◂%[ ".o" ] RP.unt◂{} } lc } } }
				∐. ast.grm.lex◂{} .
					∎ { ast.grm.lex◂{} lc }
			§ 
				@.rle { { n f_n el go g m lc f o op_f } r }
					$ r ⊢ 
					∐ ast.grm.ptn_cut◂r . 
						rle_cut { { n f_n el go g m lc f o } r } ⊢|
					∐ ast.grm.ptn_seq◂{ p r } .
						rN n ⊢ { n r0 } 
						$ r0 ⊢ r0,r0_0 
						_inc n ⊢ n 
						$ op_f ⊢ op_f,op_f0 
						rle { { n f_n el go ⟦ reg◂r0_0 < g ⟧ m lc f o op_f0 } r } ⊢ { { n f_n el go f } lcr }
						mtc_opn { reg◂%[ ".o" ] reg◂r0 mtc_lc◂lcr mtc_lc◂rb_r◂jmp◂{ op_f ini◂{} } } ⊢ op0
						$ ast.seq◂{ op_prs◂p op0 } ⊢ lcr 
						rf { f lcr } ⊢ { f lcr } 
						∎ { { n f_n el go f } lcr }
					∐. ast.grm.ptn_end◂{} . 
						rev g ⊢ g  
						$ o ⊢ 
						∐ _some◂{ d a } . 
							etr { f_n el go RP.cns3◂{ m d RP.cns2◂{ reg◂%[ "_r" ] reg◂%[ "_n" ] } } lc } ⊢ { f_n el go f0 } 
							$ opc◂{ f_name◂%[ "_rpc" ] reg◂%[ ".r" ] RP.cns2◂{ reg◂%[ ".r" ] reg◂%[ "_r" ] } } ⊢ op0 
							$ opc◂{ f_name◂%[ "_rpc" ] reg◂%[ ".n" ] RP.cns2◂{ reg◂%[ ".n" ] reg◂%[ "_n" ] } } ⊢ op1 
							$ opc◂{ f0 RP.cns3◂{ RP.rcd◂g reg◂%[ ".t" ] RP.cns2◂{ reg◂%[ "_r" ] reg◂%[ "_n" ] } } reg◂%[ ".o" ] } ⊢ op2
							$ op_f ⊢ op_f,op_f0 
							mtc_opn { reg◂%[ ".o" ] reg◂%[".a" ] mtc_lc◂ret_succ◂reg◂%[ ".a" ] mtc_lc◂rb_r◂jmp◂{ op_f0 ini◂{} } } ⊢ op3
							$ ast.seq◂{ op0 ast.seq◂{ op1 ast.seq◂{ op2 op3 } } } ⊢ lcr

							grm { { n f_n el go } a } ⊢ { { n f_n el go } f1 } 
							mtc_opn { reg◂%[ ".o" ] reg◂%[ ".t" ] mtc_lc◂lcr mtc_lc◂rb_r◂jmp◂{ op_f ini◂{} } } ⊢ op0
							$ ast.seq◂{ op_f◂f1 op0 } ⊢ lcr 
							∎ { { n f_n el go f } lcr }
						∐. _none◂{} . 
							etr { f_n el go RP.cns2◂{ m RP.cns2◂{ reg◂%[ "_r" ] reg◂%[ "_n" ] } } lc } ⊢ { f_n el go f0 } 
							$ opc◂{ f_name◂%[ "_rpc" ] reg◂%[ ".r" ] RP.cns2◂{ reg◂%[ ".r" ] reg◂%[ "_r" ] } } ⊢ op0 
							$ opc◂{ f_name◂%[ "_rpc" ] reg◂%[ ".n" ] RP.cns2◂{ reg◂%[ ".n" ] reg◂%[ "_n" ] } } ⊢ op1 
							$ opc◂{ f0 RP.cns2◂{ RP.rcd◂g RP.cns2◂{ reg◂%[ "_r" ] reg◂%[ "_n" ] } } reg◂%[ ".o" ] } ⊢ op2
							mtc_opn { reg◂%[ ".o" ] reg◂%[".a" ] mtc_lc◂ret_succ◂reg◂%[ ".a" ] mtc_lc◂rb_r◂jmp◂{ op_f ini◂{} } } ⊢ op3
							∎ { { n f_n el go f } ast.seq◂{ op0 ast.seq◂{ op1 ast.seq◂{ op2 op3 } } } }							
				
						
				@.rle_cut { { n f_n el go g m lc f o } r }
					$ r ⊢ 
					∐ _cns◂{ p r } . 
						rN n ⊢ { n r0 } 
						$ r0 ⊢ r0,r0_0 
						_inc n ⊢ n 
						rle_cut { { n f_n el go ⟦ reg◂r0_0 < g ⟧ m lc f o } r } ⊢ { { n f_n el go f } lcr }
						mtc_opn { reg◂%[ ".o" ] reg◂r0 mtc_lc◂lcr mtc_lc◂ret_fail◂{} } ⊢ op0
						$ ast.seq◂{ op_prs◂p op0 } ⊢ lcr 
						rf { f lcr } ⊢ { f lcr } 
						∎ { { n f_n el go f } lcr }
					∐. _nil◂{} . 
						rev g ⊢ g  
						$ o ⊢ 
						∐ _none◂{} . 
							etr { f_n el go RP.cns2◂{ m RP.cns2◂{ reg◂%[ "_r" ] reg◂%[ "_n" ] } } lc } ⊢ { f_n el go f0 } 
							$ opc◂{ f_name◂%[ "_rpc" ] reg◂%[ ".r" ] RP.cns2◂{ reg◂%[ ".r" ] reg◂%[ "_r" ] } } ⊢ op0 
							$ opc◂{ f_name◂%[ "_rpc" ] reg◂%[ ".n" ] RP.cns2◂{ reg◂%[ ".n" ] reg◂%[ "_n" ] } } ⊢ op1 
							$ opc◂{ f0 RP.cns2◂{ RP.rcd◂g RP.cns2◂{ reg◂%[ "_r" ] reg◂%[ "_n" ] } } reg◂%[ ".o" ] } ⊢ op2
							mtc_opn { reg◂%[ ".o" ] reg◂%[".a" ] mtc_lc◂ret_succ◂reg◂%[ ".a" ] mtc_lc◂ret_fail◂{} } ⊢ op3
							∎ { { n f_n el go f } ast.seq◂{ op0 ast.seq◂{ op1 ast.seq◂{ op2 op3 } } } }							
						∐. _some◂{ d a } . 
							etr { f_n el go RP.cns3◂{ m d RP.cns2◂{ reg◂%[ "_r" ] reg◂%[ "_n" ] } } lc } ⊢ { f_n el go f0 } 
							$ opc◂{ f_name◂%[ "_rpc" ] reg◂%[ ".r" ] RP.cns2◂{ reg◂%[ ".r" ] reg◂%[ "_r" ] } } ⊢ op0 
							$ opc◂{ f_name◂%[ "_rpc" ] reg◂%[ ".n" ] RP.cns2◂{ reg◂%[ ".n" ] reg◂%[ "_n" ] } } ⊢ op1 
							$ opc◂{ f0 RP.cns3◂{ RP.rcd◂g reg◂%[ ".t" ] RP.cns2◂{ reg◂%[ "_r" ] reg◂%[ "_n" ] } } reg◂%[ ".o" ] } ⊢ op2
							mtc_opn { reg◂%[ ".o" ] reg◂%[".a" ] mtc_lc◂ret_succ◂reg◂%[ ".a" ] mtc_lc◂ret_fail◂{} } ⊢ op3
							$ ast.seq◂{ op0 ast.seq◂{ op1 ast.seq◂{ op2 op3 } } } ⊢ lcr

							grm { { n f_n el go } a } ⊢ { { n f_n el go } f1 } 
							mtc_opn { reg◂%[ ".o" ] reg◂%[ ".t" ] mtc_lc◂lcr mtc_lc◂ret_fail◂{} } ⊢ op0
							$ ast.seq◂{ op_f◂f1 op0 } ⊢ lcr 
							∎ { { n f_n el go f } lcr }
				@.etr { f_n el go dp lc } 
					fN f_n ⊢ { f_n s } 
					$ go ⊢ go,go0 
					f_n { f_n go0 } ⊢ { f_n e }
					$ go ⊢ go,go0
					∎ { f_n ⟦ { s ast.lc_def◂{ go0 dp ‹› bl.f◂{} lc } } < el ⟧ go e }
					
			
				@.grm { { n f_n el go } a }
					$ a ⊢ 
					∐ ast.grm.act_cns◂{ _ m lc f r o a } . 
						grm { { n f_n el go } a } ⊢ { { n f_n el go } f0 } 
						rle { { n f_n el go ⟦⟧ m lc f o f0 } r } ⊢ { { n f_n el go f } lcr }
						etr { f_n el go ini◂{} ini_n◂lcr } ⊢ { f_n el go f1 }  
						∎ { { n f_n el go } f1 }
					∐. ast.grm.act_end◂{ _ m lc f r o } . 
						etr { f_n el go ini◂{} ret_fail◂{} } ⊢ { f_n el go f0 }
						rle { { n f_n el go ⟦⟧ m lc f o f0 } r } ⊢ { { n f_n el go f } lcr }
						etr { f_n el go ini◂{} ini_n◂lcr } ⊢ { f_n el go f1 }  
						∎ { { n f_n el go } f1 }
			\\§ f_etr◂f0 = 			
			§ f { n f_n w go a } 
				grm { { n f_n ⟦⟧ go } a } ⊢ { { n f_n el _ } f0 } 
				∐ f0 ⊢ RP.atm◂ast.k_app◂{ f0 p } . 
					∎ { n f_n ⟦ { w ast.lc_ln◂ast.k_app◂{ RP.atm◂ast.k_app◂{ f_name◂%[ "_ftr" ] f_name◂%[ ".grm" ] } f0 } } < el ⟧ }					
				∐. . 
					∎ { n f_n ⟦ { w ast.lc_ln◂ast.k_app◂{ f_name◂%[ ".grm" ] f0 } } < el ⟧  }
			§ @.f_clq { n f_n q }
				$ q ⊢ 
				∐ _cns◂{ { w e } q } . 
					∐ e ⊢ ast.lc_grm◂{ o g } . 
						f { n f_n w o g } ⊢ { n f_n el } 
						f_clq { n f_n q } ⊢ { n f_n q } 
						rev_apnd { el q } ⊢ q 
						∎ { n f_n q } 
					∐. . 
						f_clq { n f_n q } ⊢ { n f_n q } 
						∎ { n f_n ⟦ { w e } < q ⟧ }
				∐. _nil◂{} . 
					∎ { n f_n ⟦⟧ } 
			∎∎
	
		§§ inl 
			§ @.dlt_lst { rl lc } 
				$ rl ⊢ 
				∐ _cns◂{ i rl } .
					dlt_lst { rl lc } ⊢ lc 
					∎ ast.seq◂{ ast.op_call◂{ RP.atm◂ast.k_op_axm◂{ %[ EX.dlt ] ⟦⟧ } RP.atm◂ast.re_reg◂i RP.unt◂{} } lc } 
				∐. _nil◂{} .
					∎ lc 
			§§ inst 
				§ reg # { w rv_n re }
			  	$ rv_n ⊢ rv_n,n0
			  	hsh_tbl.r64.set { re { w n0 } } ⊢ { re _ } 
					_inc rv_n ⊢ rv_n 
			  	∎ { rv_n re }
				§	
					@.crt_mtc { { n re } a }  
						$ a ⊢ 
						∐ ast.re_reg◂w .
							hsh_tbl.r64.asc { re w } ⊢ { re { w o } } 
							nnt_emt { o w } ⊢ w 
							$ n ⊢ n,n0
							reg { w n re } ⊢ { n re } 
							∎ { { n re } ast.re_reg◂n0 }
						∐ ast.re_v◂o .
							smt_err◂◂"crt_mtc" o ⊢ w 
							hsh_tbl.r64.asc { re w } ⊢ { re { w o } } 
							nnt_emt { o w } ⊢ w 
							$ n ⊢ n,n0
							_inc n ⊢ n 							
							∎ { { n re } ast.re_v◂‹ n0 › }
						∐. ast.re_agl◂{ i_e ap } . 
							crt_mtc_ptn { { n re } ap } ⊢ { { n re } ap } 
							∎ { { n re } ast.re_agl◂{ i_e ap } }
					@.crt_mtc_ptn = RP.map_l◂◂crt_mtc 
				§ csm # { re w } 
					hsh_tbl.r64.get { re w } ⊢ { re { w o } } 
					smt_err_r { o w } ⊢ i 
					∎ { re i }
				§ subst # { re w } 
					hsh_tbl.r64.asc { re w } ⊢ { re { w o } } 
					smt_err_r { o w } ⊢ i 
					∎ { re i }
				§ csm_lst = lst.map_l◂◂csm 
				§ 
					@.csm_src { re a }  
						$ a ⊢ 
						∐ ast.re_reg◂w .
							hsh_tbl.r64.get { re w } ⊢ { re { w o } } 
							smt_err_r { o w } ⊢ i 
							∎ { re ast.re_reg◂i }
						∐ ast.re_v◂c .
							∎ { re ast.re_v◂c }
						∐. ast.re_agl◂{ i_e ap } . 
							csm_src_ptn { re ap } ⊢ { re ap } 
							∎ { re ast.re_agl◂{ i_e ap } }
					@.csm_src_ptn = RP.map_l◂◂csm_src 
				§ test_var { n re v } 
					$ v ⊢ 
					∐ ast.test_var◂w . 
						hsh_tbl.r64.asc { re w } ⊢ { re { w o } }
						smt_err◂◂"test_var" o ⊢ i 
  					∎ { n re ast.test_var◂i }
					∐. ast.test_cst◂c . 
						∎ { n re ast.test_cst◂c }
				§	mtc_test { { n re } t }
					$ t ⊢ 
					∐ ast.mtc_id◂{ sp mp } . 
						csm_src_ptn { re sp } ⊢ { re sp } 
						crt_mtc_ptn { { n re } mp } ⊢ { { n re } mp }
						∎ { { n re } ast.mtc_id◂{ sp mp } } 
					∐. ast.mtc_test◂{ tt v0 v1 } .  
						test_var { n re v0 } ⊢ { n re v0 } 
						test_var { n re v1 } ⊢ { n re v1 } 
						∎ { { n re } ast.mtc_test◂{ tt v0 v1 } }  
				§ mtc_line = lst.map_l◂◂mtc_test 
				§ op_line { { n re } ll }
					$ ll ⊢
					∐ ast.op_name◂{ o ib s d } .
						csm_src_ptn { re s } ⊢ { re s }
						crt_mtc_ptn { { n re } d } ⊢ { { n re } d }
						∎ { { n re } ast.op_name◂{ o ib s d } }
					∐. ast.op_exp_s8◂{ pl ss ds } .
						lst.map_l◂◂csm_src { re ss } ⊢ { re ss } 
						lst.map_l◂◂crt_mtc { { n re } ds } ⊢ { { n re } ds } 
						∎ { { n re } ast.op_exp_s8◂{ pl ss ds } }
				§ 
					\\[
					@.tj { { V n re ot } v } 
						$ v ⊢ 
						∐ _cns◂{ lc v } . 
							$ re ⊢ re,rex 
							lp { { V n rex ot } lc } ⊢ { { V n _ ot } lc }
							tj { { V n re ot } v } ⊢ { { V n re ot } v } 
							∎ { { V n re ot } ⟦ lc < v ⟧ } 
						∐. _nil◂{} . 
							∎ { { V n re ot } ⟦⟧ }  
							\\\]
					@.lp { { V n re ot } lc0 } 
						$ lc0 ⊢ 
						∐ ast.jmp◂{ cp sp } . 
							csm_src_ptn { re sp } ⊢ { re sp } 
							$ ot ⊢ 
							∐ _some◂{ dp1 lc1 } .
								$ { dp1 lc1 } ⊢ { dp1 lc1 },ot 
								∎ { { V n re ‹ ot › } ast.seq◂{ ast.op_call◂{ cp sp dp1 } lc1 } } 
							∐. _none◂{} . 
								∎ { { V n re ‹› } ast.jmp◂{ cp sp } }
						∐ ast.seq◂{ ll lc0 } . 
							op_line { { n re } ll } ⊢ { { n re } ll } 
							lp { { V n re ot } lc0 } ⊢ { { V n re ot } lc0 } 
							∎ { { V n re ot } ast.seq◂{ ll lc0 } }
						∐ ast.mtc◂p .
							mtc { { V n re ot ‹› } p } ⊢ { { V n re ot } p } 
							∎ { { V n re ot } ast.mtc◂p } 
						∐ ast.op_exh◂{ cp sp mp lc lcx } . 
							csm_src_ptn { re sp } ⊢ { re sp } 
							$ re ⊢ re,rex 
							crt_mtc_ptn { { n re } mp } ⊢ { { n re } mp } 
							lp { { V n re ot } lc } ⊢ { { V n re ot } lc }  
							lp { { V n rex ot } lcx } ⊢ { { V n _ ot } lcx } 
							∎ { { V n re ot } ast.op_exh◂{ cp sp mp lc lcx } }
						∐ ast.tj◂{ x v r } . 
							\\[
							hsh_tbl.r64.asc { re x } ⊢ { re { x o } }
							smt_err◂◂"test_var" o ⊢ i 
							$ re ⊢ re,rex 
							tj { { V n rex ot } v } ⊢ { { V n _ ot } v } 
							lp { { V n re ot } r } ⊢ { { V n re ot } r }
							∎ { { V n re ot } ast.tj◂{ i v r } } 
						∐ ast.ret◂o . 
							smt_err◂◂"inl.lp" o ⊢ { sp rl }
							lst.map_l◂◂csm { re rl } ⊢ { re rl } 
							csm_src_ptn { re sp } ⊢ { re sp } 
							$ ot ⊢ 
							∐ _some◂{ dp1 lc1 } . 
								$ { dp1 lc1 } ⊢ { dp1 lc1 },ot 
								dlt_lst { rl ast.seq◂{ ast.op_call◂{ RP.atm◂ast.k_op_axm◂{ %[ EX.id ] ⟦⟧ } sp dp1 } lc1 } } ⊢ lc
								∎ { { V n re ‹ ot › } lc }
							∐. _none◂{} . 
								∎ { { V n re ‹› } ast.ret◂‹ { sp rl } › }								
						∐. ast.exn◂xi . 
							∎ { { V n re ot } ast.exn◂xi }
					@.mtc { { V n re ot rbp } p } 
						$ p ⊢ 
						∐ ast.nx_e◂{ rl dl lc } . 
							$ rbp ⊢ _ 
							lst.map_l◂◂subst { re rl } ⊢ { re rl } 
							csm_lst { re dl } ⊢ { re dl } 
							lp { { V n re ot } lc } ⊢ { { V n re ot } lc } 
							∎ { { V n re ot } ast.nx_e◂{ rl dl lc } } 
						∐. ast.nx_m◂p . 
							cll { V p } ⊢ { V _ ast.p◂{ nm _ brp nxp } } 
							mtc_test { { n re } nm } ⊢ { { n re } nm } 
							_cln V ⊢ { V p0 } 
							$ p0 ⊢ p0,p0_0
							mtc { { V n re ot ‹ p0_0 › } nxp } ⊢ { { V n re ot } nxp } 
							$ brp ⊢ 
							∐ _some◂brp . 
								$ p0 ⊢ p0,p0_0
								mtc { { V n re ot ‹ p0_0 › } brp } ⊢ { { V n re ot } brp } 
								_cls { V p0 ast.p◂{ nm rbp ‹ brp › nxp } } ⊢ { V p0 } 
								∎ { { V n re ot } ast.nx_m◂p0 } 
							∐. _none◂{} .
								_cls { V p0 ast.p◂{ nm rbp ‹› nxp } } ⊢ { V p0 } 
								∎ { { V n re ot } ast.nx_m◂p0 } 
							
				§ f # { V n re sp0 dp0 lc0 ot }
					crt_mtc_ptn { { n re } dp0 } ⊢ { { n re } dp0 } 
					lp { { V n re ot } lc0 } ⊢ { { V n re _ } lc } 
					∎ { V n re ast.seq◂{ ast.op_call◂{ RP.atm◂ast.k_op_axm◂{ %[ EX.id ] ⟦⟧ } sp0 dp0 } lc } }
				∎∎ 
			§ 
				@.cst { { evv vv } c }
					∐ c ⊢ ast.k_name◂i . 
						lod_tv { evv i } ⊢ { evv i c } 
						cst { { evv vv } c } ⊢|
					∐ c ⊢ ast.k_var◂{ i v } . 
						lod_tv { vv i } ⊢ { vv i c }
						∎ { { evv vv } c } 
					∐ c ⊢ ast.k_app◂{ c0 c1 } . 
						ct_ptn { { evv vv } c0 } ⊢ { { evv vv } c0 } 
						ct_ptn { { evv vv } c1 } ⊢ { { evv vv } c1 } 
						∎ { { evv vv } RP.atm◂ast.k_app◂{ c0 c1 } }
					\[
					∐ c ⊢ ast.k_agl◂{ c p } . 
						cst { { evv vv } c } ⊢ { { evv vv } c } 
						ct_ptn { { evv vv } p } ⊢ { { evv vv } p }
						∎ { { evv vv } ast.k_agl◂{ c p } }
					\]
					∐ c ⊢ ast.k_op_axm◂{ x xl } . 
						lst.map_l◂◂ct_ptn { { evv vv } xl } ⊢ { { evv vv } xl }
						∎ { { evv vv } RP.atm◂ast.k_op_axm◂{ x xl } }
					∐. . 
						∎ { { evv vv } RP.atm◂c }
				@.ct_ptn = RP.map_l_atm◂◂cst
			§ 
				@.src { { evv vv } s } 
					$ s ⊢ 
					∐ ast.re_agl◂{ e p } . 
						src_ptn { { evv vv } p } ⊢ { { evv vv } p }
						∎ { { evv vv } ast.re_agl◂{ e p } }
					∐ ast.re_reg◂r . 
						∎ { { evv vv } ast.re_reg◂r }
					∐. ast.re_v◂c . 
						cst { { evv vv } c } ⊢ { { evv vv } c }
						RP.atm_a c ⊢ c 
						∎ { { evv vv } ast.re_v◂c }
					\\∎ { { evv vv } s }
				@.src_ptn = RP.map_l◂◂src 
				@.mtc_atm # { { evv vv } s } 
					∎ { { evv vv } s }
				@.mtc_ptn = RP.map_l◂◂mtc_atm
			§ exp_s8 { { evv vv } e } 
				∐ e ⊢ ast.exp_s8_cst◂c . 
					cst { { evv vv } c } ⊢ { { evv vv } c } 
					RP.atm_a c ⊢ c 
					∎ { { evv vv } ast.exp_s8_cst◂c }
				∐ e ⊢ ast.exp_s8_for◂{ i c } . 
					cst { { evv vv } c } ⊢ { { evv vv } c } 
					RP.atm_a c ⊢ c 
					∎ { { evv vv } ast.exp_s8_for◂{ i c } }
				∐. . 
					∎ { { evv vv } e } 
			§ test_var { { evv vv } t } 
				∐ t ⊢ ast.test_cst◂c . 
					cst { { evv vv } c } ⊢ { { evv vv } c } 
					RP.atm_a c ⊢ c 
					∎ { { evv vv } ast.test_cst◂c } 
				∐. . 
					∎ { { evv vv } t }
			§ mtc_op { { evv vv } m } 
				$ m ⊢ 
				∐ ast.mtc_id◂{ s m } . 
					src_ptn { { evv vv } s } ⊢ { { evv vv } s } 
					mtc_ptn { { evv vv } m } ⊢ { { evv vv } m } 
					∎ { { evv vv } ast.mtc_id◂{ s m } }
				∐. ast.mtc_test◂{ tt v0 v1 } . 
					test_var { { evv vv } v0 } ⊢ { { evv vv } v0 } 
					test_var { { evv vv } v1 } ⊢ { { evv vv } v1 } 
					∎ { { evv vv } ast.mtc_test◂{ tt v0 v1 } }
		§ 
			@.evl_ct_ptn = RP.map_l◂◂evl_ct 
			@.evl_ct_ptn_lst = lst.map_l◂◂evl_ct_ptn 
			@.evl_ct { evv c } 
				∐ c ⊢ ast.k_name◂i . 
					lod_tv { evv i } ⊢ { evv i k } 
					evl_ct { evv k } ⊢|
				∐ c ⊢ ast.k_op_axm◂{ a la } . 
					∐ a'=EX.ftr; la ⊢ _cns◂{ k1 la }; la ⊢ _cns◂{ k2 la }; la ⊢ _cns◂{ k3 la }; la ⊢ _nil◂{} . 
						$ ast.k_app◂{ k3 RP.atm◂ast.k_app◂{ k2 k1 } } ⊢ k0
						evl_ct { evv k0 } ⊢|
					∐. . 
						∎ { evv ast.k_op_axm◂{ a la } }												 
				∐ c ⊢ ast.k_arr◂v . 
					 ∎ { evv ast.k_arr◂v }
				∐ c ⊢ ast.k_app◂{ c0 c1 } .
					evl_ct_ptn { evv c0 } ⊢ { evv c0 } 
					evl_ct_ptn { evv c1 } ⊢ { evv c1 }
					∐ c0 ⊢ RP.atm◂c0; c0 ⊢ ast.k_op_gnr◂{ og o_n _ dp r_ng ibg lcg v } . 
						∎ { evv ast.k_op_gnr◂{ og o_n ‹ c1 › dp r_ng ibg lcg v } }
					∐ c0 ⊢ RP.atm◂c0; c0 ⊢ ast.k_op_axm◂{ ax axl } . 
						evl_ct { evv ast.k_op_axm◂{ ax ⟦ c1 < axl ⟧ } } ⊢|
					∐. . 
						∎ { evv ast.k_app◂{ c0 c1 } }
				∐. . 
					∎ { evv c } 
				@.gnr_inl { V evv r_n og c1 lc }
					∐ og ⊢ _some◂{ c_n pg }; c1 ⊢ _some◂c1 . 
						ini_tv_n c_n ⊢ { c_n vv } 
						exc_tpl { vv pg c1 } ⊢ vv
						r { { V evv vv r_n } lc } ⊢ { { V evv _ r_n } lc } 
						∎ { V evv r_n lc } 
					∐ og ⊢ _none◂{}; c1 ⊢ _none◂{} . 
						∎ { V evv r_n lc }
					∐. . 
						_emt %[ "gnr_inl 0" ] ⊢ _ 
						∎|
				@.r { { V evv vv n } lc } 
					$ lc ⊢ 
					∐ ast.jmp◂{ cp sp } . 
						ct_ptn { { evv vv } cp } ⊢ { { evv vv } cp } 
						src_ptn { { evv vv } sp } ⊢ { { evv vv } sp }
						evl_ct_ptn { evv cp } ⊢ { evv o } 
						∐ o ⊢ RP.atm◂k; k ⊢ ast.k_op_gnr◂{ og o_n ok dp r_ng ibg lcg vg } . 
							∐ ibg ⊢ bl.t◂{} . 
								gnr_inl { V evv r_ng og ok lcg } ⊢ { V evv r_ng lcg } 
								hsh_tbl.ini %[ 5r ] ⊢ re
								inst.f { V n re sp dp lcg ‹› } ⊢ { V n _ lc }
								∎ { { V evv vv n } lc }
							∐. . 
								∎ { { V evv vv n } ast.jmp◂{ RP.atm◂ast.k_op_gnr◂{ og o_n ok dp r_ng bl.f◂{} lcg vg } sp } }		
						∐. . 
							∎ { { V evv vv n } ast.jmp◂{ o sp } } 
					∐ ast.seq◂{ ll lc } . 
						r { { V evv vv n } lc } ⊢ { { V evv vv n } lc }
						$ ll ⊢ 
						∐ ast.op_name◂{ o ib s d } .
							ct_ptn { { evv vv } o } ⊢ { { evv vv } o } 
							src_ptn { { evv vv } s } ⊢ { { evv vv } s } 
							mtc_ptn { { evv vv } d } ⊢ { { evv vv } d } 
							evl_ct_ptn { evv o } ⊢ { evv o } 
							∐ o ⊢ RP.atm◂k; k ⊢ ast.k_op_gnr◂{ og o_n ok dp r_ng ibg lcg vg } . 
								bl.or { ibg ib } ⊢ ib
								∐ ib ⊢ bl.t◂{} . 
									gnr_inl { V evv r_ng og ok lcg } ⊢ { V evv r_ng lcg } 
									hsh_tbl.ini %[ 5r ] ⊢ re
									inst.f { V n re s dp lcg ‹ { d lc } › } ⊢ { V n _ lc }
									∎ { { V evv vv n } lc }
								∐. . 
									∎ { { V evv vv n } ast.seq◂{ ast.op_name◂{ RP.atm◂ast.k_op_gnr◂{ og o_n ok dp r_ng bl.f◂{} lcg vg } bl.f◂{} s d } lc } }		
							∐. . 
								∎ { { V evv vv n } ast.seq◂{ ast.op_name◂{ o bl.f◂{} s d } lc } }
						∐. ast.op_exp_s8◂{ pl sl ml } .
							lst.map_l◂◂exp_s8 { { evv vv } pl } ⊢ { { evv vv } pl } 
							lst.map_l◂◂src { { evv vv } sl } ⊢ { { evv vv } sl }
							lst.map_l◂◂mtc_atm { { evv vv } ml } ⊢ { { evv vv } ml }
							∎ { { V evv vv n } ast.seq◂{ ast.op_exp_s8◂{ pl sl ml } lc } }	 
					∐ ast.mtc◂m .
						mtc { { V evv vv n ‹› } m } ⊢ { { V evv vv n } m } 
						∎ { { V evv vv n } ast.mtc◂m } 
					∐ ast.op_exh◂{ cp sp mp lc lcx } . 
						ct_ptn { { evv vv } cp } ⊢ { { evv vv } cp } 
						src_ptn { { evv vv } sp } ⊢ { { evv vv } sp } 
						mtc_ptn { { evv vv } mp } ⊢ { { evv vv } mp } 
						r { { V evv vv n } lc } ⊢ { { V evv vv n } lc }  
						r { { V evv vv n } lcx } ⊢ { { V evv vv n } lcx } 
						∎ { { V evv vv n } ast.op_exh◂{ cp sp mp lc lcx } }
					∐ ast.tj◂{ x v r } . 
						lst.map_l◂◂r { { V evv vv n } v } ⊢ { { V evv vv n } v } 
						r { { V evv vv n } r } ⊢ { { V evv vv n } r } 
						∎ { { V evv vv n } ast.tj◂{ x v r } }
					∐ ast.ret◂o . 
						$ o ⊢ 
						∐ _some◂{ s l } . 
							src_ptn { { evv vv } s } ⊢ { { evv vv } s } 
							∎ { { V evv vv n } ast.ret◂‹ { s l } › }
						∐. _none◂{} . 
							∎ { { V evv vv n } ast.ret◂‹› }
					∐. ast.exn◂xi . 
						∎ { { V evv vv n } ast.exn◂xi }
				@.mtc { { V evv vv n rbp } m } 
					$ m ⊢ 
					∐ ast.nx_e◂{ rl dl lc } . 
						r { { V evv vv n } lc } ⊢ { { V evv vv n } lc } 
						∎ { { V evv vv n } ast.nx_e◂{ rl dl lc } } 
					∐. ast.nx_m◂p . 
						cll { V p } ⊢ { V _ ast.p◂{ nm _ brp nxp } } 
						mtc_op { { evv vv } nm } ⊢ { { evv vv } nm } 
						_cln V ⊢ { V p } 
						$ p ⊢ p,p0
						mtc { { V evv vv n ‹ p0 › } nxp } ⊢ { { V evv vv n } nxp } 
						$ brp ⊢ 
						∐ _some◂brp . 
							$ p ⊢ p,p0 
							mtc { { V evv vv n ‹ p0 › } brp } ⊢ { { V evv vv n } brp }
							_cls { V p ast.p◂{ nm rbp ‹ brp › nxp } } ⊢ { V p } 
							∎ { { V evv vv n } ast.nx_m◂p } 
						∐._none◂{} . 
							_cls { V p ast.p◂{ nm rbp ‹› nxp } } ⊢ { V p } 
							∎ { { V evv vv n } ast.nx_m◂p }
		∎∎
	∎∎
	§ evl_ct_ptn = ip.inl.evl_ct_ptn 
	§ evl_ct_ptn_lst = ip.inl.evl_ct_ptn_lst 
	§ evl_ct = ip.inl.evl_ct
	§§ syntax
	§ 
		@.wc  +s8
			∐. "_" !| ; ⊢ { {} },p 
				∎ _some◂{}
				∐ " " ⊢ { {} } 
					∎ _some◂{}
				∐ "\t" ⊢ { {} } 
					∎ _some◂{}
				∐ wc_tl !| ⊢ { xx }
					∎ _none◂{}
				∐. ⊢ { } 
					∎ _some◂{}
		@.wc_tl  +s8
			∐ "," !| ⊢ { {} }
				∎ _none◂{} 
			∐. ⊢ { }
				∎ ‹ {} ›
	§
		@.name +s8
			∐# prm_word "." name ⊢ { w {} n }
				∎ ‹ ast.mdl_n◂{ w n } ›
			∐.# prm_word ⊢ { w }
				∎ ‹ ast.fst_n◂w ›
	§
		@.nl +s8
			∐.# "\n" nl_tl ⊢ { {} nn }
				∎ ‹ {} ›
		@.nl_tl  +s8
			∐# "\n" nl_tl ⊢ { {} nn }
				∎ ‹ {} ›
			∐.# ⊢ { } 
				∎ ‹ {} › 
	¶ prs_rslt◂a'
		∐ prs_vld : a'
		∐ prs_err : _lst◂{ _r64 _r64 _s8 }  
	§ ret_vld◂a = _some◂prs_vld◂a
	§ ret_err◂e = _some◂prs_err◂e
	§ prs_add { a e } 
		$ e ⊢ 
		∐ prs_vld◂b . 
			prs_vld { a b } ⊢ r 
			∎ r 
		∐. prs_err◂e . 
			prs_err e ⊢ r 
			∎ r 
	§ prs_cct { e0 e1 } 
		$ e0 ⊢
		∐ prs_vld◂a0 . 
			$ e1 ⊢ 
			∐ prs_vld◂a1 . 
				prs_vld { a0 a1 } ⊢ e 
				∎ e 
			∐. prs_err◂l1 . 
				prs_err l1 ⊢ e 
				∎ e 
		∐. prs_err◂l0 .
			$ e1 ⊢ 
			∐ prs_vld◂a1  . 
				prs_err l0 ⊢ e 
				∎ e 
			∐. prs_err◂l1 . 
				apnd { l0 l1 } ⊢ l
				prs_err l ⊢ e 
				∎ e  
	§ prs_cct2 { e0 e1 e2 } 
		prs_cct { e0 e1 } ⊢ e 
		prs_cct { e e2 } ⊢ e 
		$ e ⊢ 
		∐ prs_vld◂{ { e0 e1 } e2 } .
			prs_vld { e0 e1 e2 } ⊢ e 
			∎ e 
		∐. prs_err◂e .
			prs_err e ⊢ e  
			∎ e 
	§ mk_prs_err # { n r s } 
		$ _nil◂{} ⊢ l 
		$ _cns◂{ { n r s } l } ⊢ l 
		prs_err l ⊢ e  
		∎ e 
	§ add_prs_err { n r s e } 
		$ e ⊢ 
		∐ prs_err◂e . 
			∎ prs_err◂_cns◂{ { n r s } e }
		∐. prs_vld◂_ . 
			∎ prs_err◂_cns◂{ { n r s } _nil◂{} } 
	§ prs_act◂◂F { s p } 
		$ p ⊢ 
		∐ prs_vld◂a . 
			F { s a } ⊢ b  
			prs_vld b ⊢ p 
			_some p ⊢ a 
			∎ a 
		∐. prs_err◂e . 
			prs_err e ⊢ p 
			_some p ⊢ r 
			∎ r 
	§ @.pnt_prs_err el 
		$ el ⊢ 
		∐ _cns◂{ { n0 n1 em } el } . 
			pnt_prs_err el ⊢ sel 
			^ n0,n1,em,sel ⊢ n0,n1,em,sel,sr 
				"prs_err " 0d' "-" 1d' ":" 2' "\n" 
				3' // 
			∎ sr   
		∐. _nil◂{} . 
			» "" _ ⊢ sr 
			∎ sr 
	§
		@.cst +s8
			∐ _scf_d "r" ⊢ { x {} }
				∎ _some◂ast.k_r64◂x
			∐ "0x" _scf_x "r" ⊢ { {} x {} }
				∎ _some◂ast.k_r64◂x  
			∐ stg_ltr ⊢ { s }
				∎ _some◂ast.k_s8◂s
			∐. name ⊢ { n }
				∎ _some◂ast.k_name◂n
	§§ ct_stx 
		§ 
			@.ptn +s8 
				∐.# atm ; ⊢ { a0 },a1
					∐ a1 ⊢ _some◂a1 . 
						∎ _some◂RP.atm◂ast.k_app◂{ a0 a1 }
					∐. . 
						∎ _some◂a0 

					∐# "◂◂" !| ptn ⊢ { {} a1 }
						∎ _some◂_some◂a1
					∐.# ⊢ { }
						∎ _some◂_none◂{}
			@.atm +s8 
				∐# name "◂◂◂" !| ptn ⊢ { n {} p } 
					∎ _some◂RP.atm◂ast.k_agl◂{ n p }
				∐# "(" ptn ")" ⊢ { {} a {} }
					∎ _some◂a
				∐# "{+" lst.stx_line◂◂ptn "}" ⊢ { {} l {} } 
					\\arr_of_lst { l RP.unt◂{} } ⊢ v 
					\\∎ _some◂RP.atm◂ast.k_arr◂v 
					∎| 
				∐# "{" lst.stx_line◂◂ptn "}" ⊢ { {} l {} } 
					∎ _some◂RP.rcd◂l
				∐.# cst ⊢ { c } 
					∎ _some◂RP.atm◂c
		∎∎
		§ ct_ptn = ct_stx.ptn
	§ @.mtc +s8 
		∐# name "◂" !| RP.stx◂◂mtc ⊢ { n {} mp } 
			∎ _some◂ast.re_agl◂{ n mp }
		
		∐# "%" word ⊢ { {} w } 
			∎ _some◂ast.re_reg◂w 
		∐# word ⊢ { w } 
			∎ _some◂ast.re_reg◂w
		∐.# "_" ⊢ { {} }
			∎ _some◂ast.re_v◂_none◂{}
	§ mtc_ptn = RP.stx◂◂mtc
	§ mtc_ptn_lst = lst.stx_line◂◂mtc_ptn 
	§ mtc_tl = lst.stx_cmm_tl◂◂mtc 
	§ mtc_ptn_tl = lst.stx_cmm_tl◂◂mtc_ptn

	§ 
		@.src +s8 
			∐# "%[" cst "]" ⊢ { {} c {} }
				∎ _some◂ast.re_v◂c
			∐# name "◂" RP.stx◂◂src ⊢ { n {} sp } 
				∎ _some◂ast.re_agl◂{ n sp }
			∐# reg_word ⊢ { w }
				∎ _some◂ast.re_reg◂w
			∐# "‹" !| ; ⊢ { {} },sp 
				∎ _some◂sp 
				
				∐# "›" ⊢ { {} } 
					∎ _some◂ast.re_agl◂{ ast.fst_n◂%[ "_none" ] RP.unt◂{} }
				∐.# RP.stx◂◂src "›" ⊢ { sp {} } 
					∎ _some◂ast.re_agl◂{ ast.fst_n◂%[ "_some" ] sp }
			∐.# "⟦" !| src_cns "⟧" ⊢ { {} c {} }
				∎ _some◂c 
		
		@.src_cns +s8 
			∐# RP.stx◂◂src ; ⊢ { a },l 
				∎ _some◂ast.re_agl◂{ ast.fst_n◂%[ "_cns" ] RP.rcd◂_cns◂{ a _cns◂{ l _nil◂{} } } }
				
				∐# "<" reg_word ⊢ { {} w } 
					∎ _some◂RP.atm◂ast.re_reg◂w 
				∐.# src_cns ⊢ { l } 
					∎ _some◂RP.atm◂l
			∐.# ⊢ { } 
				∎ _some◂ast.re_agl◂{ ast.fst_n◂%[ "_nil" ] RP.rcd◂_nil◂{} } 

	§ src_ptn = RP.stx◂◂src 
	§ src_ptn_lst = lst.stx_line◂◂src_ptn 
	§ src_tl = lst.stx_cmm_tl◂◂src 
	§
		@.type +s8
			∐.# type_atm type_app_tl type_tl ⊢ { t0 t1 t2 }
				mk_app { t0 t1 } ⊢ t
				∐ t2 ⊢ _some◂t2 .
					∎ _some◂RP.atm◂T.imp◂{ t t2 }
				∐. t2 ⊢ _none◂{} .
					∎ _some◂t
		@.type_tl +s8
			∐# "→" !| type ⊢ { {} t }
				∎ _some◂_some◂%t
			∐.# ⊢ { }
				∎ _some◂_none◂{}
		@.type_app_tl +s8
			∐# "◂" !| type_atm type_app_tl ⊢ { {} t0 t1 }
				∎ _some◂_cns◂{ %t0 %t1 }
			∐.# ⊢ { }
				$ _nil◂{} ⊢ r
				_some r ⊢ a
				∎ _some◂_nil◂{}
		@.type_atm +s8
			∐# "{" lst.stx_line◂◂type "}" ⊢ { {} l {} }
				∎ _some◂RP.rcd◂%l
			∐# "(" type ")" ⊢ { {} t {} }
				∎ _some◂%t
			∐# var ⊢ { v }
				∎ _some◂RP.atm◂T.var◂ast.type_var◂%v 
			∐.# name ⊢ { n }
				∎ _some◂RP.atm◂T.var◂ast.type_name◂%n
		@.var +s8
			∐. word "'" ⊢ { w {} }
				∎ _some◂%w
			
	§
		@.line_res_i +s8 
			∐# "\n" ⊢ { {} }
				_some {} ⊢ a 
				∎ a 
			∐# _byt line_res_i ⊢ { b {} }
				_some {} ⊢ a
				∎ a  
			∐.# ⊢ { }
				_some {} ⊢ a 
				∎ a 
	§ 
		@.line_res +s8 
			∐. line_res_i ⊢ { nn } 
				_some { _n _r } ⊢ a 
				∎ a 
	§ 
		@.line_nl +s8 
			∐# "\n" ⊢ { {} } 
				_some {} ⊢ a 
				∎ a 
			∐.# _byt line_nl ⊢ { b nn } 
				_some {} ⊢ a 
				∎ a 
	§ 
		@.nls +s8 
			∐# "\n" !| nls ⊢ { {} xx }
				prs_vld {} ⊢ p 
				_some p ⊢ a 
				∎ _some◂prs_vld◂{} 
			∐# "##" !| line_res nls ⊢ { {} xx yy } 
				∎ _some◂prs_vld◂{}
			∐# "\\\\" !| line_res nls ⊢ { {} xx yy } 
				∎ _some◂prs_vld◂{}
			∐# "\\[" !| ; ⊢ { {} },p
				∎ _some◂p
				∐# "\n" cmt_in nls ⊢ { {} p0 p1 }
					prs_cct { p0 p1 } ⊢ pr 
					$ pr ⊢ 
					∐ prs_vld◂{ p0 p1 } . 
						prs_vld {} ⊢ p 
						_some p ⊢ a 
						∎ a 
					∐. prs_err◂e . 
						pnt_prs_err e ⊢ s 
						_emt s ⊢ s 
						∎| 		
				∐.# ⊢ { } 
					^ _n,_r ⊢ n,r,sr 
						"nls_err " 0d' "-" 1d' ":\n" //
					_emt sr ⊢ sr 
					∎|   
			∐.# ⊢ { } 
				prs_vld {} ⊢ p 
				_some p ⊢ a 
				∎ a
		@.cmt_in +s8 
			∐# "\\[" !| ; ⊢ { {} },p
				_some p ⊢ a 
				∎ a 
				∐# "\n" cmt_in cmt_in ⊢ { {} p0 p1 }
					prs_cct { p0 p1 } ⊢ pr 
					$ pr ⊢ 
					∐ prs_vld◂{ p0 p1 } . 
						prs_vld {} ⊢ p 
						_some p ⊢ a 
						∎ a 
					∐. prs_err◂e . 
						pnt_prs_err e ⊢ s 
						_emt s ⊢ s 
						∎| 		
					
					∐.# ⊢ { } 
						∎ _some◂prs_err◂_cns◂{ { %_n %_r %[ "blk_cmt 0" ] } _nil◂{} }
			∐ "\\]" nl_eof ⊢ { {} _ } 
				∎ _some◂prs_vld◂{} 
			∐# line_nl cmt_in ⊢ { nn c }
				_some c ⊢ a 
				∎ a
			∐.# ⊢ { } 
				∎ _some◂prs_err◂_cns◂{ { %_n %_r %[ "blk_cmt 1" ] } _nil◂{} }

	§§ grm 
		§ @.fld_line◂◂{ G H F T } +s8
			∐# H G fld_line◂◂{ G H F T } ⊢ { _ a l } 
				F { a l } ⊢ l 
				∎ _some◂l
			∐.# ⊢ { } 
				∎ _some◂%[ T ] 
		§ @.fld◂◂{ G H F T } +s8
			∐ H G fld◂◂{ G H F T } ⊢ { _ a l } 
				F { a l } ⊢ l 
				∎ _some◂l
			∐. ⊢ { } 
				∎ _some◂%[ T ] 
		§ @.fld_tm◂◂{ G H F T } +s8 
			∐ T ⊢ { t } 
				∎ _some◂t 
			∐. H G fld_tm◂◂{ G H F T } ⊢ { _ a l } 
				F { a l } ⊢ l 
				∎ _some◂l 
		∎∎
	§ @.nls_lst◂◂G +s8
		∐# nls G nls_lst◂◂G ⊢ { _ a l } 
			∎ _some◂_cns◂{ a l } 
		∐.# nls ⊢ { _ } 
			∎ _some◂_nil◂{} 
	
	§ @.nls_lst_prs◂◂G +s8 
		∐# nls G nls_lst_prs◂◂G ⊢ { _ a l } 
			prs_cct { a l } ⊢ e 
			$ e ⊢ 
			∐ prs_vld◂{ a l } . 
				∎ _some◂prs_vld◂_cns◂{ a l }
			∐. prs_err◂e . 
				∎ _some◂prs_err◂e 
		∐.# nls ⊢ { _ } 
			∎ _some◂prs_vld◂_nil◂{} 
	§ @.nls_p_lst_prs◂◂{ G_E G_S } +s8 
			∐# nls G_E ⊢ { _ e } 
				$ e ⊢ 
				∐ prs_vld◂e . 
					∎ _some◂prs_vld◂p_end◂e 
				∐. prs_err◂e . 
					∎ _some◂prs_err◂e 
			∐.# nls G_S nls_p_lst_prs◂◂{ G_E G_S } ⊢ { _ e l } 
				prs_cct { e l } ⊢ p 
				$ p ⊢ 
				∐ prs_vld◂{ e l } . 
					∎ _some◂prs_vld◂p_cns◂{ e l } 
				∐. prs_err◂e . 
					∎ _some◂prs_err◂e 
		
	§ 
		@.glb_etr_ch +s8 
			∐* "§§" ⊢ { {} }
				∎ ‹ {} ›
			∐* "§" ⊢ { {} }
				∎ ‹ {} ›
			∐* "¶" ⊢ { {} }
				∎ ‹ {} ›
			∐.* "∎∎" ⊢ { {} }
				∎ ‹ {} ›
		@.glb_etr_res_ch +s8 
			∐* glb_etr_ch !| ⊢ { g }
				∎ ‹›
			∐.* _byt ⊢ { b } 
				∎ ‹ {} ›
		@.glb_etr_clq_ch +s8 
			∐* "@" !| ⊢ { {} } 
				∎ ‹› 
			∐* glb_etr_ch !| ⊢ { c } 
				∎ ‹›  
			∐.* _byt ⊢ { b } 
				∎ ‹ {} ›
		@.glb_etr_res_clq +s8 
			∐* glb_etr_clq_ch glb_etr_res_clq ⊢ { c r }
				∎ ‹ {} › 
			∐.* ⊢ { } 
				∎ ‹ {} ›
		@.glb_etr_res_line +s8 
			∐# "\n" ⊢ { n } 
				∎ ‹ {} › 
			∐# glb_etr_ch !| ⊢ { g } 
				∎ ‹› 
			∐# "@" !| ⊢ { q } 
				∎ ‹› 
			∐# _byt glb_etr_res_line ⊢ { b r } 
				∎ ‹ {} › 
			∐# _byt ⊢ { b } 
				∎ ‹ {} › 
			∐.# ⊢ { } 
				∎ ‹ {} ›
	§ @.rtm_sbl +s8 
		∐ "§~" ⊢ { {} } 
			∎ ‹ {} ›
		∐. "§%" ⊢ { {} } 
			∎ ‹ {} ›  
	§ 
		@.s8_ptn +s8
			∐* var_idx "*" !| stg_ltr ⊢ { i {} s }
				∎ _some◂ast.exp_s8_for◂{ %i ast.k_s8◂%s }
			∐* s8_ptn_line ⊢ { s }
				∎ _some◂ast.exp_s8_cst◂ast.k_s8◂%s
			∐* stg_ltr ⊢ { s }
				∎ _some◂ast.exp_s8_cst◂ast.k_s8◂%s
			∐* name ⊢ { n }
				∎ _some◂ast.exp_s8_cst◂ast.k_name◂%n
			∐.* s8_fmt ⊢ { f }
				∎ _some◂ast.exp_s8_idx◂%f
		@.var_idx +s8
			∐. _scf_d "'" ⊢ { x {} }
				∎ _some◂%x
		@.s8_fmt +s8
			∐ _scf_d "d'" ⊢ { d {} }
				∎ _some◂{ ast.fmt_d◂{} %d }
			∐ _scf_d "x'" ⊢ { d {} }
				ast.fmt_x {} ⊢ f
				_some { f d } ⊢ a
				∎ a
			∐. _scf_d "'" ⊢ { d {} }
				ast.fmt_s {} ⊢ f
				_some { f d } ⊢ a
				∎ a
		@.s8_ptn_line +s8
			∐. "`" line ⊢ { {} l }
				rp8.to_s8 l ⊢ s 
				_some s ⊢ a
				∎ a
		@.line +s8
			∐ "\n" ⊢ { {} }
				rp8.pfx_chr { %[ 10r ] rp8.e◂{} } ⊢ l 
				_some l ⊢ a
				∎ a
			∐. _byt line ⊢ { b l }
				rp8.pfx_chr { b l } ⊢ l 
				_some l ⊢ a
				∎ a
	§ 
    @.s8_ptn_lst +s8 
			∐# nls "//" ⊢ { nn {} } 
				$ _nil◂{} ⊢ l 
				_some l ⊢ a 
				∎ a 
			∐.# nls s8_ptn s8_ptn_lst ⊢ { nn p l } 
				$ _cns◂{ p l } ⊢ l 
				_some l ⊢ a 
				∎ a   
	§§ act
		§ lc_mtc # { {} m } 
			∎ ast.mtc◂m
		§ @.id_0_mtc { s m } 
			$ m ⊢ 
			∐ p_cns◂{ { mp l lc } m } . 
				$ s ⊢ s,s0 
				id_0_mtc { s0 m } ⊢ m 
				∎ p_cns◂{ { ⟦ ast.mtc_id◂{ s mp } < l ⟧ lc } m }
			∐. p_end◂{ mp l lc } . 
				∎ p_end◂{ ⟦ ast.mtc_id◂{ s mp } < l ⟧ lc }
		§ id_0 { {} { s il } }
			∐ il ⊢ c0◂{ rs lc } . 
				ip.id_line { s rs lc } ⊢ lc 
				∎ lc
			∐ il ⊢ c1◂m .
				id_0_mtc { s m } ⊢ m 
				∎ ast.mtc◂m 
			∐. . 
				∎| 
		§ id_mtc # { {} m } 
			∎ c1◂m
		§ id_line # { { r1 rs } lc } 
			∎ c0◂{ _cns◂{ r1 rs } lc }
		
		§ lc_exh # { { op s d } { lf lx } } 
			∎ ast.op_exh◂{ op s d lf lx }
		∎∎

	§ 
		@.lc_exp_s8_sd +s8
			∐* wc "⊢" !| mtc ⊢ { xx {} r }
				∎ ‹ { ⟦⟧ ⟦ %r ⟧ } ›  
			∐.* src src_tl "⊢" mtc mtc_tl ⊢ { r0 rs0 {} r1 rs1 }
				∎ ‹ { ⟦ r0 < rs0 ⟧ ⟦ r1 < rs1 ⟧ } ›
	§ @.inl_flg +s8 
		∐# "#" ⊢ { {} } 
			∎ ‹ bl.t◂{} › 
		∐.# ⊢ { } 
			∎ ‹ bl.f◂{} ›

	§ 
		@.mtc_test +s8
			∐# src_ptn "⊢" !| name "◂" mtc_ptn ⊢ { r0 {} n {} r1 }
				∎ _some◂ast.mtc_id◂{ %r0 RP.atm◂ast.re_agl◂{ %n %r1 } }
			∐# mtc_val "=<" mtc_val ⊢ { v0 {} v1 }
				ast.mtc_test { ast.test_cmp◂{} v0 v1 } ⊢ r 
				_some r ⊢ a 
				∎ a  
			∐# mtc_val "<>" mtc_val ⊢ { v0 {} v1 } 
				∎ ‹ ast.mtc_test◂{ ast.test_neq◂{} v0 v1 } ›
			∐.# mtc_val "=" mtc_val ⊢ { v0 {} v1 }
				ast.mtc_test { ast.test_eq◂{} v0 v1 } ⊢ r
				_some r ⊢ a
				∎ a
		@.mtc_val +s8
			∐ word "'" ⊢ { w {} }
				ast.test_var w ⊢ v
				_some v ⊢ a
				∎ a
			∐. cst ⊢ { c }
				ast.test_cst c ⊢ v
				_some v ⊢ a
				∎ a
	§
		@.lc_code +s8
			∐* nls "∎|" ⊢ { nn {} }
				∎ _some◂prs_vld◂ast.exn◂%_n
			∐# nls "∎" !| ; ⊢ { nn {} },r
				∎ _some◂%r  

				∐# "\n" ⊢ { {} } 
					∎ _some◂prs_vld◂ast.ret◂_none◂{} 
				∐# src_ptn "\n" ⊢ { r {} }
					∎ _some◂prs_vld◂ast.ret◂_some◂{ %r ⟦⟧ }
				∐.# line_res ⊢ { b } 
					∎ _some◂prs_err◂_cns◂{ { %_n %_r %[ "lc_code ∎ .. " ] } _nil◂{} }
			∐* lc_mtc ⊢ { m }
				prs_act◂◂act.lc_mtc { {} m } ⊢| 
			∐# nls "$" !| ; ⊢ { nn {} },r
				prs_act◂◂act.id_0 { {} r } ⊢|

				∐# src_ptn "⊢" !| ; ⊢ { s {} },il 
					prs_add { s il } ⊢ a 
					∎ _some◂a 
					
					∐# "\n" lc_id_mtc ⊢ { {} m }
						prs_act◂◂act.id_mtc { {} m } ⊢|	
					∐.# mtc_ptn mtc_ptn_tl "\n" lc_code ⊢ { r1 rs {} lc }
						prs_act◂◂(act.id_line) { { r1 rs } lc } ⊢|
				∐# line_res lc_id_mtc ⊢ { { n r } lc }
					$ lc ⊢ 
					∐ prs_vld◂x . 
						mk_prs_err { n r %[ "glb_etr id_line line_res 0" ] } ⊢ l 
						∎ ‹ l ›
					∐. prs_err◂l . 
						∎ ret_err◂⟦ { n r %[ "glb_etr id_line line_res 1" ] } < l ⟧
				∐.# line_res lc_code ⊢ { { n r } lc } 
					$ lc ⊢ 
					∐ prs_vld◂x . 
						mk_prs_err { n r %[ "glb_etr id_line line_res 2" ] } ⊢ l 
						∎ ‹ l ›
					∐. prs_err◂l . 
						∎ _some◂prs_err◂_cns◂{ { n r %[ "glb_etr id_line line_res 3" ] } %l }
			∐# nls "^" !| lc_exp_s8_sd "\n" s8_ptn_lst lc_code ⊢ { nn {} { s d } {} ps lc }
				ast.op_exp_s8 { ps s d } ⊢ l 
				$ lc ⊢ 
				∐ prs_vld◂lc . 
					∎ ret_vld◂ast.seq◂{ l lc }
				∐. prs_err◂e . 
					∎ ret_err◂e
			∐* nls "»" "_^" !| lc_exp_s8_sd s8_ptn_lst lc_code ⊢ { nn {} {} { s d } ps lc }
				ast.op_exp_s8 { ps s d } ⊢ l
				$ lc ⊢ 
				∐ prs_vld◂lc . 
					∎ ret_vld◂ast.seq◂{ l lc }
				∐. prs_err◂e . 
					∎ ret_err◂e 
			∐* nls "»" !| cst "_" "⊢" mtc_ptn lc_code ⊢ { nn {} c {} {} r lc }
				$ lc ⊢ 
				∐ prs_vld◂lc . 
					∎ _some◂prs_vld◂ast.seq◂{ ast.op_call◂{ RP.atm◂ast.k_name◂ast.fst_n◂%[ "_id" ] RP.atm◂ast.re_v◂%c %r } %lc }
				∐. prs_err◂e . 
					∎ _some◂prs_err◂%e			
			 
			∐# nls "=+" var "\n" tj ⊢ { _ {} x {} p } 
				$ p ⊢ 
				∐ prs_vld◂{ v r } . 
					∎ ret_vld◂ast.tj◂{ x v r }  
				∐. prs_err◂e . 
					∎ ret_err◂e 
			∐# nls ct_ptn inl_flg src_ptn ; ⊢ { nn n ib r0 },o 
				$ o ⊢ 
				∐ prs_vld◂o . 
					$ o ⊢ 
					∐ c1◂{ y lc } .
						∎ _some◂prs_vld◂ast.seq◂{ ast.op_name◂{ n ib r0 y } lc }
					∐ c2◂{ d e } . 
						prs_act◂◂act.lc_exh { { n r0 d } e } ⊢|			
					∐. c0◂{} . 
						∎ _some◂prs_vld◂ast.jmp◂{ n r0 }
				∐. prs_err◂e . 
					∎ _some◂prs_err◂e 
				
				∐* "⊢|" !| ⊢ { {} }
					∎ _some◂prs_vld◂c0◂{} 
				∐# "⊢" mtc_ptn "\n" !| lc_code ⊢ { {} r1 {} lc }
					$ lc ⊢ 
					∐ prs_vld◂lc . 
						∎ _some◂prs_vld◂c1◂{ r1 lc }
					∐. prs_err◂e . 
						∎ _some◂prs_err◂e
				∐# "⊢" "\n" !| "?" mtc_ptn "." "\n" lc_code "∐." "_" "." "\n" lc_code ⊢ { {} {} {} d {} {} lf {} {} {} {} lx }
					prs_cct { lf lx } ⊢ e 		
					∎ _some◂prs_vld◂c2◂{ d e } 
				∐.* line_res lc_code ⊢ { { nn rr } lc }
					$ lc ⊢ 
					∐ prs_vld◂_ . 
						∎ _some◂prs_err◂_cns◂{ { %nn %rr %[ "lc_code 20" ] } _nil◂{} }
					∐. prs_err◂e . 
						∎ _some◂prs_err◂_cns◂{ { %nn %rr %[ "lc_code 21" ] } %e } 
			∐.* glb_etr_res_line ; ⊢ { r },lc
				add_prs_err { _n _r %[ "lc_code 9" ] lc } ⊢ e 
				∎ _some◂e 
				
				∐* lc_code ⊢ { lc } 
					∎ _some◂%lc
				∐.* glb_etr_res_clq ⊢ { r } 
					∎ _some◂prs_err◂_cns◂{ { %_n %_r %[ "lc_code 11" ] } _nil◂{} }  
		@.tj +s8 
			∐# nls "∐" "\n" lc_code tj ⊢ { _ {} {} lc p } 
				prs_cct { lc p } ⊢ e 
				$ e ⊢ 
				∐ prs_vld◂{ lc { v r } } . 
					∎ ret_vld◂{ ⟦ lc < v ⟧ r } 
				∐. prs_err◂e . 
					∎ ret_err◂e   
			∐.# nls "∐." "\n" lc_code ⊢ { _ {} {} lc } 
				$ lc ⊢ 
				∐ prs_vld◂lc . 
					∎ ret_vld◂{ ⟦⟧ lc } 
				∐. prs_err◂e . 
					∎ ret_err◂e 
		@.lc_mtc_T◂◂T +s8
			∐.# T !| mtc_line lc_code ⊢ { _ l c } 
				prs_cct { l c } ⊢ e 
				$ e ⊢ 
				∐ prs_vld◂{ l c } .
					∎ _some◂prs_vld◂{ l ast.mtc_code◂{ ⟦⟧ ⟦⟧ c } }
				∐. prs_err◂e . 
					∎ _some◂prs_err◂e
		@.lc_mtc_E = lc_mtc_T◂◂sbl_coprd_end 
		@.lc_mtc_S = lc_mtc_T◂◂sbl_coprd 
		@.lc_mtc = nls_p_lst_prs◂◂{ lc_mtc_E lc_mtc_S }
		@.sbl_coprd_end +s8 
			∐. "∐." ⊢ { {} } 
				∎ _some◂{}
		@.sbl_coprd +s8 
			∐. "∐" ⊢ { {} } 
				∎ _some◂{}
		@.lc_id_mtc_T◂◂T +s8
			∐.# T !| mtc_ptn mtc_line_tl lc_code ⊢ { _ mp l c } 
				prs_cct { l c } ⊢ e 
				$ e ⊢ 
				∐ prs_vld◂{ l c } .
					∎ _some◂prs_vld◂{ mp l ast.mtc_code◂{ ⟦⟧ ⟦⟧ c } }
				∐. prs_err◂e . 
					∎ _some◂prs_err◂e
		@.lc_id_mtc_E = lc_id_mtc_T◂◂sbl_coprd_end 
		@.lc_id_mtc_S = lc_id_mtc_T◂◂sbl_coprd 
		@.lc_id_mtc = nls_p_lst_prs◂◂{ lc_id_mtc_E lc_id_mtc_S }
		
		@.mtc_line +s8
			∐# mtc_test mtc_line_tl ⊢ { e0 l }
				$ l ⊢ 
				∐ prs_vld◂l . 
					∎ _some◂prs_vld◂_cns◂{ e0 l }
				∐. prs_err◂e . 
					∎ _some◂prs_err◂e 
			∐# "." "\n" ⊢ { {} {} }
				∎ _some◂prs_vld◂_nil◂{}
			∐.# line_res ⊢ { bb } 
				∎ _some◂prs_err◂_cns◂{ { %_n %_r %[ "mtc_line 0" ] } _nil◂{} }  
		@.mtc_line_tl +s8
			∐# ";" !| mtc_test mtc_line_tl ⊢ { {} e l }
				$ l ⊢ 
				∐ prs_vld◂l . 
					∎ _some◂prs_vld◂_cns◂{ %e %l }
				∐. prs_err◂er . 
					∎ _some◂prs_err◂er 
			∐# "." "\n" ⊢ { {} {} }
				∎ _some◂prs_vld◂_nil◂{}
			∐.# line_res ⊢ { bb } 
				∎ _some◂prs_err◂_cns◂{ { %_n %_r %[ "mtc_line_tl 0" ] } _nil◂{} } 
	§
		@.file +s8
			∐.# nls_lst_prs◂◂glb_etr nl_eof ⊢ { gl _  } 
				∎ _some◂gl
		@.glb_etr +s8
			∐* nls "§§" !| ; ⊢ { nn {} },p 
				∎ _some◂p
				∐* word mdl_etr_def ⊢ { n d }
					$ d ⊢ 
					∐ prs_vld◂d . 
						∎ _some◂prs_vld◂ast.mdl_etr◂{ %n %d }
					∐. prs_err◂err . 
						prs_err err ⊢ err 
						_some err ⊢ a 
						∎ a 
				∐.* mdl_etr_res ⊢ { r } 
					∎ _some◂prs_err◂_cns◂{ { %_n %_r %[ "glb_etr 0.1" ] } _nil◂{} }
			∐# "§" word "«" !| "\n" lc_code ⊢ { {} _ {} {} x }
				$ x ⊢ 
				∐ prs_vld◂x . 
					∎ ret_vld◂ast.lc_cst◂x
				∐. prs_err◂e .	
					∎ ret_err◂e
			∐# rtm_sbl "\n" lc_code ⊢ { {} {} lc }
				$ lc ⊢ 
				∐ prs_vld◂lc . 
					∎ ret_vld◂ast.lc_cst◂%lc
				∐. prs_err◂e .	
					∎ ret_err◂e 
			∐* "§" !| ; ⊢ { {} },p 
				_some p ⊢ a 
				∎ a
				∐* lc_etr_body ⊢ { le }
					∎ _some◂le
				∐.* glb_etr_res ⊢ { bs }
					∎ _some◂prs_err◂_cns◂{ { %_n %_r %[ "glb_etr 3" ] } _nil◂{} }
			∐.* "¶" !| ; ⊢ { {} },p 
				∎ _some◂p
				∐* dt_etr ⊢ { de }
					∎ ret_vld◂de
				∐.* glb_etr_res ⊢ { bs }
					∎ _some◂prs_err◂_cns◂{ { %_n %_r %[ "glb_etr 4" ] } _nil◂{} }
		@.glb_etr_res +s8 
			∐* glb_etr_res_ch glb_etr_res ⊢ { c r }
				∎ _some◂{}
			∐.* ⊢ { }
				∎ _some◂{}
		@.mdl_etr_res  +s8
			∐* "∎∎" ⊢ { {} } 
				∎ _some◂{}
			∐* "§§" ; ⊢ { {} },p
				∎ _some◂{}
				∐* word "=" name mdl_etr_res ⊢ { w {} n r }
					∎ ‹ {} ›
				∐.* mdl_etr_res mdl_etr_res ⊢ { r0 r1 } 
					∎ ‹ {} ›
			∐* _byt mdl_etr_res ⊢ { b r } 
				∎ ‹ {} › 
			∐.* ⊢ { } 
				∎ ‹ {} ›
		
		@.mdl_etr_def +s8
			∐* "=" !| name nls ⊢ { {} n nn }
				∎ ret_vld◂ast.mdl_ln◂n
			∐.* nls mdl_glb_etr ⊢ { nn m }
				$ m ⊢ 
				∐ prs_vld◂m . 
					∎ ret_vld◂ast.mdl_def◂m
				∐. prs_err◂err . 
					∎ ret_err◂err
		@.mdl_glb_etr +s8
			∐* nls "∎∎" nls ⊢ { nn0 {} nn }
				∎ ret_vld◂⟦⟧
			∐* nls glb_etr mdl_glb_etr ⊢ { nn e gl }
				prs_cct { e gl } ⊢ e0 
				$ e0 ⊢ 
				∐ prs_vld◂{ e gl } . 
					∎ ret_vld◂⟦ e < gl ⟧
				∐. prs_err◂err . 
					∎ ret_err◂err 
			∐. mdl_etr_res ⊢ { r }
				∎ _some◂prs_err◂_cns◂{ { %_n %_r %[ "glb_etr 7" ] } _nil◂{} }
		@.dt_etr +s8
			∐* "@" !| "." dt_etr_body qlq_dt_etr ⊢ { {} {} e q }
				∎ ‹ ast.dt_qlq_etr◂⟦ e < q ⟧ ›
			∐* dt_etr_body ⊢ { e }
				∎ ‹ ast.dt_etr◂e ›
			∐. ⊢ { }
				_emt %[ "dt_etr 0" ] ⊢ s
				∎ ‹›
		@.dt_etr_body +s8
			∐* word dt_args "=" !| type ⊢ { w as {} n }
				ast.dt_ln { as n } ⊢ r
				_some { w r } ⊢ a 
				∎ a
			∐.* word dt_args nls "∐" word ":" type dt_etr_coprd ⊢ { w as nn {} wc {} t d }
				$ _cns◂{ { wc t } d } ⊢ c
				ast.dt_def { as c } ⊢ r
				_some { w r } ⊢ a
				∎ a
		@.dt_args +s8
			∐* "◂" !| var args_tl ⊢ { {} v as }
				$ _cns◂{ v as } ⊢ as 
				_some as ⊢ o 
				∎ o  
			∐* var !| args_tl ⊢ { v as } 
				$ _cns◂{ v as } ⊢ as
				_some as ⊢ o 
				∎ o  
			∐.* ⊢ { } 
				$ _nil◂{} ⊢ as 
				_some as ⊢ o 
				∎ o
		@.args_tl = lst.stx_cmm_tl◂◂var 
		@.qlq_dt_etr_i +s8 
			∐.# "@" !| "." dt_etr_body ⊢ { {} {} p } 
				∎ _some◂p
		@.qlq_dt_etr = nls_lst◂◂qlq_dt_etr_i 
		@.dt_etr_coprd_i +s8
			∐.# "∐" !| word ":" type "\n" ⊢ { {} w {} t {} }
				∎ _some◂{ w t }
		@.dt_etr_coprd = nls_lst◂◂dt_etr_coprd_i 
		@.lc_etr_body +s8
			∐# nls "@" !| "." word lc_etr_def qlq_etr ⊢ { nn {} {} w le q }
				prs_cct { q le } ⊢ e 
				$ e ⊢ 
				∐ prs_vld◂{ q le } . 
					∎ _some◂prs_vld◂ast.lc_qlq_etr◂_cns◂{ { %w %le } %q }
				∐. prs_err◂e . 
					∎ _some◂prs_err◂%e
			∐* word lc_etr_def ⊢ { n e }
				$ e ⊢ 
				∐ prs_vld◂e . 	
					∎ ret_vld◂ast.lc_etr◂{ n e }
				∐. prs_err◂e . 
					∎ ret_err◂e
			∐. ⊢ { }
				» "lc_etr_body 0" _ ⊢ s
				_emt s ⊢ s
				∎ _none◂{}
		@.lc_clq_etr_i +s8
			∐.# "@" !| "." word lc_etr_def ⊢ { {} {} w le } 
				$ le ⊢ 
				∐ prs_vld◂le . 
					∎ _some◂prs_vld◂{ w le } 
				∐. prs_err◂e . 
					∎ _some◂prs_err◂e 
		@.qlq_etr = nls_lst_prs◂◂lc_clq_etr_i 
		@.type_rtr +s8 
			∐# ":" !| type ⊢ { {} t } 
				∎ ‹ ‹ t › › 
			∐.# ⊢ { }
				∎ ‹ ‹› › 
		@.def_grm_sbl +s8
			∐ "+s8" ⊢ { {} } 
				∎ ‹ {} › 
			∐. "^=" ⊢ { {} } 
				∎ ‹ {} › 
		@.lc_etr_def +s8
			∐# "=" !| ct_ptn "\n" ⊢ { {} c {} }
				∐ c ⊢ RP.atm◂c . 
					∎ _some◂prs_vld◂ast.lc_ln◂c
				∐. . 
					mk_prs_err { _n _r %[ "lc_etr_def 0" ] } ⊢ e 
					∎ ‹ e ›
			 
			∐# def_gnr def_grm_sbl "\n" grm_etr_def ⊢ { o_g {} {} ge } 
				$ ge ⊢ 
				∐ prs_vld◂ge . 
					∎ _some◂prs_vld◂ast.lc_grm◂{ o_g ge }
				∐. prs_err◂e .
					∎ ret_err◂e 
			∐# def_gnr inl_flg mtc_ptn type_rtr "\n"  lc_code ⊢ { o_t if r0 t0 {} x0 }  
				$ x0 ⊢ 
				∐ prs_vld◂x0 . 
					∎ ret_vld◂ast.lc_def◂{ o_t r0 t0 if x0 }
				∐. prs_err◂e . 
					∎ ret_err◂e
			∐.# "◂" !| tpl_reg_ptn "=" src_ptn "\n" ⊢ { {} x {} p {} } 
				∎ _some◂prs_vld◂ast.lc_ply◂{ x p } 
		@.def_gnr +s8 
			∐# "◂◂" !| tpl_ptn ⊢ { {} p } 
				∎ _some◂_some◂p
			∐.# ⊢ { } 
				∎ _some◂_none◂{}
		@.tpl_reg_ptn = RP.stx◂◂tpl_word
		@.tpl_ptn = RP.stx◂◂word
		@.grm_etr_def +s8 
			∐.* grm_etr_act ⊢ { g }
				∎ ‹ g ›
		@.grm_etr_act +s8 
			∐* grm_ord_end !| grm_rle grm_etr_act_act	⊢ { o l ga }
				$ ga ⊢ 
				∐ prs_vld◂{ r0 lc a } . 
					ast.grm.act_regs {} ⊢ gr
					∎ ret_vld◂ast.grm.act_end◂{ gr r0 lc o l a }
				∐. prs_err◂e . 
					∎ ret_err◂e 
			∐.* grm_ord grm_rle grm_etr_act_act grm_etr_act ⊢ { o l ga g }
				prs_cct { ga g } ⊢ e  
				$ e ⊢ 
				∐ prs_vld◂{ { r0 lc a } g } . 
					ast.grm.act_regs {} ⊢ gr
					∎ ret_vld◂ast.grm.act_cns◂{ gr r0 lc o l a g }
				∐. prs_err◂e .	
					∎ ret_err◂e
		@.grm_etr_act_act +s8 
			∐* ";" "⊢" !| mtc_ptn "," mtc_ptn lc_code grm_etr_act ⊢ { {} {} r0 {} r1 lc g }
				prs_cct { lc g } ⊢ e 
				$ e ⊢ 
				∐ prs_vld◂{ lc g } . 
					∎ ret_vld◂{ r0 lc ‹ { r1 g } › }
				∐. prs_err◂e .
					∎ ret_err◂⟦ { _n _r %[ "grm_etr_act_act 0"  ] } < e ⟧
			∐.* "⊢" !| mtc_ptn lc_code ⊢ { {} r0 lc }
				$ lc ⊢ 
				∐ prs_vld◂lc . 
					∎ ret_vld◂{ r0 lc ‹› }
				∐. prs_err◂e .
					∎ ret_err◂⟦ { _n _r %[ "grm_etr_act_act 1"  ] } < e ⟧
		@.grm_rle +s8 
			∐* "!|" !| lst.stx_line◂◂grm_ptn ⊢ { {} g }
				∎ ‹ ast.grm.ptn_cut◂g ›
			∐* grm_ptn grm_rle ⊢ { h g }
				∎ _some◂ast.grm.ptn_seq◂{ h g }
			∐.* ⊢ { }
				∎ _some◂ast.grm.ptn_end◂{}
		@.grm_ptn +s8 
			∐* "⟦" grm_ptn_atm "⟧" ⊢ { {} p {} }
				∎ _some◂RP.atm◂ast.k_app◂{ RP.atm◂ast.k_name◂ast.fst_n◂%[ "_pss" ] %p }
			∐.* grm_ptn_atm ⊢ { a }
				∎ _some◂%a
		@.grm_ptn_atm +s8
			∐# stg_ltr ⊢ { a }
				∎ _some◂RP.atm◂ast.k_app◂{ RP.atm◂ast.k_name◂ast.fst_n◂%[ "_psc" ] RP.atm◂ast.k_s8◂%a }
			∐.# ct_ptn ⊢ { n }
				∎ _some◂%n
	
		@.grm_ord +s8 
			∐* "∐*" ⊢ { {} }
				∎ _some◂ast.grm.synt◂{}
			∐* "∐#" ⊢ { {} }
				∎ _some◂ast.grm.line◂{}
			∐.* "∐" ⊢ { {} }
				∎ _some◂ast.grm.lex◂{}
		@.grm_ord_end +s8 
			∐* "∐.*" ⊢ { {} }
				∎ _some◂ast.grm.synt◂{}
			∐* "∐.#" ⊢ { {} }
				∎ _some◂ast.grm.line◂{}
			∐.* "∐." ⊢ { {} }
				∎ _some◂ast.grm.lex◂{}
	∎∎	
		
		§§ gbg
			¶ t_t 
				∐ ln : {} 
				∐ rcd : _r64 				 
			¶ t = { _r64 t_t }
			§ pnt # n 
				^ n ⊢ n,s 
					"QWORD [GBG_VCT+8*" 0d' "]" // 
				∎ { n s } 
			§ ini◂{} = { %[ 0r ] _nil◂{} } 
			§ @.dlt { gl e } 
				$ gl ⊢ 
				∐ _cns◂{ { n g } gl } . 
					$ g ⊢ 
					∐ ln◂{} . 
						∎|
					∐. rcd◂nr . 
						pnt n ⊢ { n sn } 
						^ sn,nr ⊢ _,_,sr 
							"\tmov rdi," 0' "\n" 
							"\tFREE_RCD " 1d' ",rdi\n"
							// 
						rp8.add_s8 { e sr } ⊢ e 
						dlt { gl e } ⊢|
				∐. _nil◂{} . 
					∎ e 
			∎∎
		§§ ns
		¶ 
			@.v = _r64 
			@.type_k_atm = T.t_atm◂v 
			@.type_k = T.t◂v 
			@.type_aux = T.aux◂v
			@.type_aux_vct = T.aux_vct◂v 
			@.type_exp = T.exp◂v 
			@.var = T.var◂v 
		##§§ TX = T.X 
		§ dta = T.dta 
		§ imp = T.imp 
		§ ct_imp = T.ct_imp 
		§ abs = T.abs 
		§ var = T.var 
		§ var_l = T.var_l 
		§ var_q = T.var_q 
		§ var_ln = T.var_ln 
		§ var_i = T.var_i 
		§ newvar_i = T.newvar_i 
		§ newvar_l = T.newvar_l 
		§ newvar_q = T.newvar_q 
		##§ var_app = T.var_app 
		
		
		¶ 
			@.reg_env = _lst◂{ _s8 _opn◂_r64 }
			@.mdl_env = { _lst◂{ _s8 _opn◂_r64 } type_env etr_env reg_env }
			@.etr_env = _lst◂{ _s8 _opn◂_r64 }
			@.type_env = _lst◂{ _s8 _opn◂_r64 }
			@.mdl_vct = _arr◂mdl_k
			@.reg_vct = _arr◂reg_k
			##@.etr_vct = _arr◂etr_k
			@.cst_vct = _arr◂cst_k
			@.type_vct = _arr◂var
			@.mdl_k = mdl_env
			@.reg_k = { _s8 _r64 _r64 } 
			## { name pos type-var } 
			@.cst_k = _r64
		
		¶ f_t e'
			∐ f_etr : e'
			∐ f_rtm : _s8 
		¶ f_c a'
			∐ f_call : {} 
			∐ f_jmp : a' 
		
		§§ t_axm = T.t_axm 
		§§ inst = T.inst 
		
		§ inst = T.inst 
		§ inst_lst = T.inst_lst 
	
		§ gen = T.gen 
		§ iug_imp_d = T.iug_imp_d 
		§ add_t = T.add_t 
		§ inst_imp = T.inst_imp 
		§ add_e = T.add_e 
		§ k_ctr # { tv_n tv i n y } 
			T.newvar_ln { tv_n tv y } ⊢ { tv_n tv iy } 
			ast.k_ctr { i n iy } ⊢ k 
			∎ { tv_n tv k } 
		

		§§ alc_type_k 
			§ alc_i # glv_n
				inc_x glv_n ⊢ { r glv_n } 
				∎ { glv_n r } 
			§ @.hp { { tv_n tv } t0 }
					$ t0 ⊢ 
					∐ RP.rcd◂l . 
						∎ { { tv_n tv } ast.hp.sgm◂RP.rcd◂l }
					∐. RP.atm◂ak . 
						$ ak ⊢ 
						∐ dta◂{ a l } . 	
							=+ a' 
							∐
								∎ { { tv_n tv } ast.hp.hp◂ast.hp.r64◂{} }    
							∐ 
								∎ { { tv_n tv } ast.hp.hp◂ast.hp.opq◂{} }
							∐ 
								∐ l ⊢ _cns◂{ y l }; l ⊢ _nil◂{} . 
									∎ { { tv_n tv } ast.hp.hp◂ast.hp.arr◂y }
								∐. . 
									∎| 
							∐ 
								∐ l ⊢ _cns◂{ y l }; l ⊢ _nil◂{} . 
									∎ { { tv_n tv } ast.hp.hp◂ast.hp.id◂{ %[ ast.hp.id.Clr ] y } }
								∐. . 
									∎| 
							∐ 
								∐ l ⊢ _cns◂{ y l }; l ⊢ _nil◂{} . 
									∎ { { tv_n tv } ast.hp.hp◂ast.hp.id◂{ %[ ast.hp.id.pt ] y } }
								∐. . 
									∎| 							
							∐. 
								∎ { { tv_n tv } ast.hp.sgm◂RP.atm◂dta◂{ a l } }
						∐ var◂i . 
							lod_tv { tv i } ⊢ { tv i v }
							∐ v ⊢ var_ln◂k . 
								hp { { tv_n tv } k } ⊢| 
							∐. .
								∎ { { tv_n tv } ast.hp.btm◂{} } 
						∐ abs◂{ a k0 } . 
							_emt %[ "hp abs" ] ⊢ se 
							∎|  
						∐ ct_imp◂{ k0 k1 } .
							_emt %[ "hp ct_imp" ] ⊢ se 
							∎|
						∐. imp◂{ k0 k1 } .
							_emt %[ "hp imp" ] ⊢ se 
							∎|
			§	hp_lst = lst.map_l◂◂hp 
			§ dta_n { {} _ o } 
				∐ o ⊢ _some◂{ w o }; o ⊢ _some◂{ n v k }; n'=1r . 
					$ v ⊢ v,v0 
					$ k ⊢ k,k0 
					∎ { ‹ { v0 k0 } › ‹ { w ‹ { n v k } › } › }
				∐. . 
					∎ { ‹› o }
			§	
				@.f_T◂◂ALC { { tav tv_n tv s0 } t0 }
					$ t0 ⊢ 
					∐ RP.rcd◂l . 
						lst.map_l◂◂(f_T◂◂ALC) { { tav tv_n tv s0 } l } ⊢ { {  tav tv_n tv s0 } l } 
						∎ { { tav tv_n tv s0 } RP.rcd◂l }
					∐. RP.atm◂ak . 
						$ ak ⊢ 
						∐ dta◂{ a l } . 			
							=+ a' 
							∐ 
								ALC s0 ⊢ { s0 j0 }
								∎ { {  tav tv_n tv s0 } stt_v.r64_reg◂j0 }     
							∐ 
								ALC s0 ⊢ { s0 j0 }
								∎ { {  tav tv_n tv s0 } stt_v.s8_reg◂j0 }
							∐ 
								ALC s0 ⊢ { s0 j0 }
								∐ l ⊢ _cns◂{ y l }; l ⊢ _nil◂{} . 
									∎ { { tav tv_n tv s0 } RP.atm◂ast.hp◂{ j0 ast.hp.arr◂y } }
								∐. . 
									∎| 
							∐ 
								ALC s0 ⊢ { s0 j0 }
								∐ l ⊢ _cns◂{ y l }; l ⊢ _nil◂{} . 
									∎ { { tav tv_n tv s0 } RP.atm◂ast.hp◂{ j0 ast.hp.id◂{ %[ ast.hp.id.Clr ] y } } }
								∐. . 
									∎|  
							∐ 	
								ALC s0 ⊢ { s0 j0 }
								∐ l ⊢ _cns◂{ y l }; l ⊢ _nil◂{} . 
									∎ { { tav tv_n tv s0 } RP.atm◂ast.hp◂{ j0 ast.hp.id◂{ %[ ast.hp.id.pt ] y } } }
								∐. . 
									∎| 
							∐.  
								$ a ⊢ a,a0 
								_ala◂◂dta_n { {} a0 tav } ⊢ { o tav } 
								∐ o ⊢ _some◂{ v k } . 
									T.iug_axm { tv_n tv v k l } ⊢ { tv_n tv l }
									∐ l ⊢ _cns◂{ t _nil◂{} } . 
										f_T◂◂ALC { { tav tv_n tv s0 } t } ⊢ { { tav tv_n tv s0 } p } 
										∎ { { tav tv_n tv s0 } RP.atm◂ast.stt_adt◂{ %[ 0r ] %[ 1r ] p } } 
									∐. . 
										∎| 
								∐. . 
									ALC s0 ⊢ { s0 j0 }
									ALC s0 ⊢ { s0 j1 } 
									∎ { { tav tv_n tv s0 } RP.atm◂ast.dyn_adt◂{ { a l } j0 j1 } } 
						∐ var◂i . 
							lod_tv { tv i } ⊢ { tv i v }
							∐ v ⊢ var_ln◂k . 
								f_T◂◂ALC { {  tav tv_n tv s0 } k } ⊢| 
							∐. .
									\\_emt %[ "alc_type_k f pv 0" ] ⊢ _ 
								∎ { { tav tv_n tv s0 } RP.atm◂ast.btm◂{} }
									\\∎|
						∐ abs◂{ a k0 } . 
							_emt %[ "alc_type_k.f abs" ] ⊢ se 
							∎|  
						∐ ct_imp◂{ k0 k1 } .
							_emt %[ "alc_type_k.f ct_imp" ] ⊢ se 
							∎|
						∐. imp◂{ k0 k1 } .
							_emt %[ "alc_type_k.f imp" ] ⊢ _ 
							∎| 
			§ f_i # { tav tv_n tv glv_n p } 
				f_T◂◂alc_i { { tav tv_n tv glv_n } p } ⊢ { { tav tv_n tv glv_n } p } 
				∎ { tav tv_n tv glv_n p }
		∎∎
	§§ crt_type_k 
		§ cst { ev c }
			∐ c ⊢ ast.k_r64◂x . 
				∎ { ev TX.r64◂{} }
			∐ c ⊢ ast.k_s8◂s . 
				∎ { ev TX.s8◂{} }  
			∐ c ⊢ ast.k_name◂i . 
				lod_tv { ev i } ⊢ { ev i vi } 
				∎ { ev RP.atm◂var◂%vi }
			∐. . 
				_emt %[ "slv cst 0" ] ⊢ _
				∎| 
		§ 
			@.re_atm◂◂V { { ev tv_n tv rv } r } 
				$ r ⊢ 
				∐ ast.re_v◂c0 . 
					V { { ev tv_n tv rv } c0 } ⊢ { { ev tv_n tv rv } y } 
					∎ { { ev tv_n tv rv } y } 
				∐ ast.re_agl◂{ i sp } . 
					RP.map_l_atm◂◂(re_atm◂◂V) { { ev tv_n tv rv } sp } ⊢ { { ev tv_n tv rv } ys } 
					lod_tv { ev i } ⊢ { ev i vi } 
					iug_imp_d { tv_n tv %[ 0r ] ys RP.atm◂var◂%vi } ⊢ { tv_n tv _ ys yd yi } 
					∎ { { ev tv_n tv rv } yd }
				∐. ast.re_reg◂%r . 
					\\lod_tv { rv r } ⊢ { rv r v } 
					hsh_tbl.r64.asc { rv r } ⊢ { rv { r o } } 
					smt_err◂◂"re_atm:0" o ⊢ v 
					∎ { { ev tv_n tv rv } RP.atm◂var◂%v } 
		§ 
	 		@.src_v # { { ev tv_n tv rv } c } 
				cst { ev c } ⊢ { ev y } 
				∎ { { ev tv_n tv rv } y }
			@.src_atm = re_atm◂◂src_v 
			@.src_ptn = RP.map_l_atm◂◂src_atm
			@.src_ptn_lst = lst.map_l◂◂src_ptn 
			
		§ 
			@.mtc_v # { { ev tv_n tv rv } o } 
				smt_err◂◂"mtc_v" o ⊢ r 
				hsh_tbl.r64.asc { rv r } ⊢ { rv { r o } } 
				smt o ⊢ v 
				∎ { { ev tv_n tv rv } RP.atm◂var◂%v }  
			@.mtc_atm = re_atm◂◂mtc_v 
			@.mtc_ptn = RP.map_l_atm◂◂mtc_atm 
			@.mtc_ptn_lst = lst.map_l◂◂mtc_ptn 
		∎∎	 
	
		§ @.slv_ns◂◂{ ASC_M ASC_F GET SET P0 P1 } { n MV NS m_l }
			$ n ⊢ 
			∐ ast.mdl_n◂{ w n } . 
				ASC_M { NS w } ⊢ { NS w o }
				$ o ⊢ 
				∐ _some◂i_m . 
					GET { MV i_m } ⊢ { MV i_m NS0 } 
					slv_ns◂◂{ ASC_M ASC_F GET SET P0 P1 } { n MV NS0 _nil◂{} } ⊢ { MV NS0 _ i_e }
					SET { MV i_m NS0 } ⊢ { MV _ } 
					∎ { MV NS m_l i_e }
				∐. _none◂{} . 
					$ m_l ⊢ 
					∐ _cns◂{ I m_l } .
						P0 I ⊢ { NS0 I } 
						ast.mdl_n { w n } ⊢ n 
						slv_ns◂◂{ ASC_M ASC_F GET SET P0 P1 } { n MV NS0 m_l } ⊢ { MV NS0 m_l i_e }
						P1 { NS0 I } ⊢ I 
						$ _cns◂{ I m_l } ⊢ m_l 
						∎ { MV NS m_l i_e }
					∐. _nil◂{} . 
						^ w ⊢ _,sr 
							"slv_ns 0:not found:" 0' "\n" //
						_emt sr ⊢ sr 
						∎|  
			∐. ast.fst_n◂w . 
				ASC_F { NS w } ⊢ { NS w o } 
				$ o ⊢
				∐ _some◂i_e . 
					∎ { MV NS m_l i_e }
				∐. _none◂{} . 
					$ m_l ⊢ 
					∐ _cns◂{ I m_l } .
						ast.fst_n w ⊢ n 
						P0 I ⊢ { NS0 I } 
						slv_ns◂◂{ ASC_M ASC_F GET SET P0 P1 } { n MV NS0 m_l } ⊢ { MV NS0 m_l i_e }
						P1 { NS0 I } ⊢ I 
						$ _cns◂{ I m_l } ⊢ m_l 
						∎ { MV NS m_l i_e }
					∐. _nil◂{} . 
						_emt w ⊢ w
						^ _ ⊢ sr 
							"slv_ns 1:not found\n" //
						_emt sr ⊢ sr 
						∎|  
		§§ slv_ns_e 
			§ asc_m # { { m_ns t_ns } w }
				\\hsh_tbl.s8.asc { m_ns w } ⊢ { m_ns { w o } } 
				assoc { m_ns w } ⊢ { m_ns w o } 
				∎ { { m_ns t_ns } w o }
			§ asc_f # { { m_ns t_ns } w } 
				assoc { t_ns w } ⊢ { t_ns w o } 
				∎ { { m_ns t_ns } w o } 
			§ get # { { mmv mtv } i_m } 
				\\get_tv { mmv i_m } ⊢ { mmv i_m m_ns } 
				_exc_q { mmv i_m ⟦⟧ } ⊢ { mmv i_m m_ns } 
				_exc_q { mtv i_m ⟦⟧ } ⊢ { mtv i_m t_ns } 
				∎ { { mmv mtv } i_m { m_ns t_ns } }
			§ set # { { mmv mtv } i_m { m_ns t_ns } } 
				\\set_tv { mmv i_m m_ns } ⊢ { mmv i_m } 
				_exc_q { mmv i_m m_ns } ⊢ { mmv i_m _ } 
				_exc_q { mtv i_m t_ns } ⊢ { mtv i_m _ } 
				∎ { { mmv mtv } i_m }
			§ p0 # { i_m_r ns_m0 ns_e0 ns_t0 } 
				∎ { { ns_m0 ns_e0 } { i_m_r ns_t0 } } 
			§ p1 # { { ns_m0 ns_e0 } { i_m_r ns_t0 } } 
				∎ { i_m_r ns_m0 ns_e0 ns_t0 }
			§ f = slv_ns◂◂{ asc_m asc_f get set p0 p1 } 
			∎∎
			§ slv_ns_e = slv_ns_e.f
		
		§§ slv_ns_t 
			§ asc_m # { { m_ns t_ns } w }
				\\hsh_tbl.s8.asc { m_ns w } ⊢ { m_ns { w o } } 
				assoc { m_ns w } ⊢ { m_ns w o } 
				∎ { { m_ns t_ns } w o }
			§ asc_f # { { m_ns t_ns } w } 
				assoc { t_ns w } ⊢ { t_ns w o } 
				∎ { { m_ns t_ns } w o } 
			§ get # { { mmv mtv } i_m } 
				\\get_tv { mmv i_m } ⊢ { mmv i_m m_ns } 
				_exc_q { mmv i_m ⟦⟧ } ⊢ { mmv i_m m_ns } 
				_exc_q { mtv i_m ⟦⟧ } ⊢ { mtv i_m t_ns } 
				∎ { { mmv mtv } i_m { m_ns t_ns } }
			§ set # { { mmv mtv } i_m { m_ns t_ns } } 
				\\set_tv { mmv i_m m_ns } ⊢ { mmv i_m } 
				_exc_q { mmv i_m m_ns } ⊢ { mmv i_m _ } 
				_exc_q { mtv i_m t_ns } ⊢ { mtv i_m _ } 
				∎ { { mmv mtv } i_m }
			§ p0 # { i_m_r ns_m0 ns_e0 ns_t0 } 
				∎ { { ns_m0 ns_t0 } { i_m_r ns_e0 } } 
			§ p1 # { { ns_m0 ns_t0 } { i_m_r ns_e0 } } 
				∎ { i_m_r ns_m0 ns_e0 ns_t0 }
			§ f = slv_ns◂◂{ asc_m asc_f get set p0 p1 } 
			∎∎
			§ slv_ns_t = slv_ns_t.f
		
		§§ slv_ns_m 
			\[
			§ asc_m # { ns w } 
				hsh_tbl.s8.asc { ns w } ⊢ { ns { w o } } 
				∎ { ns w o } 
			\]
			§ asc_m	= assoc 
			\[
			§ asc_f # { ns w } 
				hsh_tbl.s8.asc { ns w } ⊢ { ns { w o } } 			
				∎ { ns w o } 
			\]
			§ asc_f = assoc 
			\\§ get = get_tv 
			\\§ set = set_tv 
			§ get # { mmv i } 
				_exc_q { mmv i ⟦⟧ } ⊢| 
			§ set # { mmv i ns } 
				_exc_q { mmv i ns } ⊢ { mmv i _ } 
				∎ { mmv i }
			§ p0 # { i_m_r ns_m0 ns_e0 ns_t0 } 
				∎ { ns_m0 { i_m_r ns_e0 ns_t0 } } 
			§ p1 # { ns_m0 { i_m_r ns_e0 ns_t0 } } 
				∎ { i_m_r ns_m0 ns_e0 ns_t0 }
			§ f = slv_ns◂◂{ asc_m asc_f get set p0 p1 } 
			∎∎
		§ slv_ns_m = slv_ns_m.f
		
		§§ find_gf 
			§ @.e_lp { { tv evv y0 o_p } gfl } 
				$ gfl ⊢ 
				∐ _cns◂{ { lb i1 o_k y1 p0 gyd } gfl } . 
					T.cmp_t.eqv { tv y0 y1 } ⊢ { tv y0 y1 b0 } 
					opn.eq_st_T◂◂ast.eq_ct_ptn { evv o_p o_k } ⊢ { evv o_p o_k b1 } 
					bl.and { b0 b1 } ⊢ b 
					∐ b ⊢ bl.t◂{} . 
						$ { lb i1 o_k y1 p0 gyd } ⊢ A0,A1 
						∎ { { tv evv y0 o_p ‹ A1 › } _cns◂{ A0 gfl } }
					∐. . 
						$ { lb i1 o_k y1 p0 gyd } ⊢ A0
						e_lp { { tv evv y0 o_p } gfl } ⊢ { { tv evv y0 o_p o0 } gfl } 
						∎ { { tv evv y0 o_p o0 } _cns◂{ A0 gfl } }
				∐. _nil◂{} . 
					∎ { { tv evv y0 o_p ‹› } ⟦⟧ }
			§ e # { tv evv mfv i0 y0 o_p }
				_exc_q { mfv i0 ⟦⟧ } ⊢ { mfv i0 gfl } 
				e_lp { { tv evv y0 o_p } gfl } ⊢ { { tv evv y0 o_p o } gfl } 
				_exc_q { mfv i0 gfl } ⊢ { mfv i0 _ } 
				∎ { tv evv mfv i0 y0 o_p o } 
			∎∎
		
		§§ slv_n 
      § reg_T◂◂SET # { w rv_n re }
			  $ rv_n ⊢ rv_n,n0
			  SET { re { w n0 } } ⊢ { re _ } 
				_inc rv_n ⊢ rv_n 
			  ∎ { rv_n re }
      § reg = reg_T◂◂hsh_tbl.s8.set
			§ 
				@.cst { %env0 %c } 
		    ∐ %c ⊢ ast.k_name◂%cn . 
			    $ %env0 ⊢ { %mmv %mev %ev %m_ns %e_ns %m_l } 
			    slv_ns_e { cn { mmv mev } { m_ns e_ns } m_l } ⊢ { { mmv mev } { m_ns e_ns } m_l i_e }
			    $ { mmv mev ev m_ns e_ns m_l } ⊢ env0 	
			    ∎ { env0 ast.k_name◂i_e }
	    	∐ c ⊢ ast.k_r64◂x . 
		    	∎ { env0  ast.k_r64◂x }
		    ∐ c ⊢ ast.k_s8◂s . 
			    ∎ { env0  ast.k_s8◂s } 
	    	∐ c ⊢ ast.k_app◂{ c0 c1 } . 
					ct_ptn { env0  c0 } ⊢ { env0  c0 }
					ct_ptn { env0  c1 } ⊢ { env0  c1 }
					ast.k_app { c0 c1 } ⊢ c 
					∎ { env0  c }
				∐ c ⊢ ast.k_agl◂{ i0 c0 } . 
					ct_ptn { env0  c0 } ⊢ { env0  c0 }
					$ %env0 ⊢ { %mmv %mev %ev %m_ns %e_ns %m_l } 
			    slv_ns_e { i0 { mmv mev } { m_ns e_ns } m_l } ⊢ { { mmv mev } { m_ns e_ns } m_l i_e }
			    ast.k_agl { i_e c0 } ⊢ c  
			    $ { mmv mev ev m_ns e_ns m_l } ⊢ env0 	
					∎ { env0  c }
				∐. . 
		    	» "slv_n.cst 0" _ ⊢ ee0 
					_emt ee0 ⊢ _ 
					∎|  	
			
				@.ct_ptn = RP.map_l◂◂cst 
			§ ct_ptn_lst = lst.map_l◂◂ct_ptn 
			§ 
				@.crt_mtc_T◂◂ASC { { env0 tv tv_n n re dl } a }  
					 	$ a ⊢ 
						∐ ast.re_reg◂w .
							ASC { re w } ⊢ { re { w o } } 
							nnt_emt { o w } ⊢ w 
							$ n ⊢ n,n0
							reg { w n re } ⊢ { n re } 
							∎ { { env0 tv tv_n n re dl } ast.re_reg◂n0 }
						∐ ast.re_v◂o .
							nnt o ⊢ {} 
							$ n ⊢ n,n0,n1
							_inc n ⊢ n 							
							∎ { { env0 tv tv_n n re ⟦ n1 < dl ⟧ } ast.re_v◂‹ n0 › }
						∐. ast.re_agl◂{ cn ap } . 
							crt_mtc_ptn { { env0 tv tv_n n re dl } ap } ⊢ { { env0 tv tv_n n re dl } ap } 
							$ env0 ⊢ { mmv mev ev m_ns e_ns m_l } 
							slv_ns_e { cn { mmv mev } { m_ns e_ns } m_l } ⊢ { { mmv mev } { m_ns e_ns } m_l i_e } 
							$ { mmv mev ev m_ns e_ns m_l } ⊢ env0 
							∎ { { env0 tv tv_n n re dl } ast.re_agl◂{ i_e ap } }
				@.crt_mtc = crt_mtc_T◂◂hsh_tbl.s8.asc
				@.crt_mtc_ptn = RP.map_l◂◂crt_mtc 
				@.crt_mtc_ptn_lst = lst.map_l◂◂crt_mtc_ptn 
		§ crt_mtc_lst = lst.map_l◂◂crt_mtc
		§ 
			@.csm_src_T◂◂GET { { env0 tv tv_n re } a }
				$ a ⊢ 
				∐ ast.re_reg◂w .
					GET { re w } ⊢ { re { w o } } 
					^ w ⊢ w,e
						"csm_src 1:" 0' //
					smt_err_r { o e } ⊢ i 
					∎ { { env0 tv tv_n re } ast.re_reg◂i }
				∐ ast.re_agl◂{ n sp } . 
					$ %env0 ⊢ { %mmv %mev %ev %m_ns %e_ns %m_l } 
			    slv_ns_e { n { mmv mev } { m_ns e_ns } m_l } ⊢ { { mmv mev } { m_ns e_ns } m_l i_e }
			    $ { mmv mev ev m_ns e_ns m_l } ⊢ env0 	
			    csm_src_ptn { { env0 tv tv_n re } sp } ⊢ { { env0 tv tv_n re } sp } 
					∎ { { env0 tv tv_n re } ast.re_agl◂{ i_e sp } }				
				∐. ast.re_v◂c .
					cst { env0 c } ⊢ { env0  c }
					∎ { { env0 tv tv_n re } ast.re_v◂c }
			@.csm_src = csm_src_T◂◂hsh_tbl.s8.get
			@.csm_src_lst = lst.map_l◂◂csm_src 
			@.csm_src_ptn_lst = lst.map_l◂◂csm_src_ptn 
			@.csm_src_ptn = RP.map_l◂◂csm_src
		§ test_var { env0 n re v } 
			$ v ⊢ 
			∐ ast.test_var◂w . 
				hsh_tbl.s8.asc { re w } ⊢ { re { w o } }
				smt_err◂◂"test_var:0" o ⊢ i 
				ast.test_var i ⊢ v 
  			∎ { env0 n re v }
			∐. ast.test_cst◂c . 
				cst { env0 c } ⊢ { env0 c }
				ast.test_cst c ⊢ v 
				∎ { env0 n re v }
		§ exp_s8 { { env0 tv_n tv } e } 
			$ e ⊢ 
			∐ ast.exp_s8_cst◂c . 
				cst { env0  c } ⊢ { env0  c } 
				ast.exp_s8_cst c ⊢ e 
				∎ { { env0 tv_n tv } e }
			∐ ast.exp_s8_idx◂{ p i } . 
				∐ p ⊢ ast.fmt_p◂{} .
					_emt %[ "slv_exp_s8_fmt 0" ] ⊢ _ 
					∎| 
				∐. . 
					ast.exp_s8_idx { p i } ⊢ e 
					∎ { { env0 tv_n tv } e }
			∐. ast.exp_s8_for◂{ i c } . 
				cst { env0  c } ⊢ { env0  c } 
				ast.exp_s8_for { i c } ⊢ e
			  ∎ { { env0 tv_n tv } e } 
		§§ exp_s8 
			§ 
				@.f # { env0 n re tv_n tv ss ds el } 
					f0 { env0 n re tv_n tv ss ds %[ 0r ] } ⊢ { env0 n re tv_n tv ss ds a i }
					f1 { { env0 tv_n tv } el } ⊢ { { env0 tv_n tv } el }
				  ∎ { env0 n re tv_n tv ss ds el }
				@.f0 { env0 n re tv_n tv ss ds i } 
					∐ ss ⊢ _cns◂{ s ss }; ds ⊢ _cns◂{ d ds } . 
						csm_src { { env0 tv tv_n re } s } ⊢ { { env0 tv tv_n re } s }
						crt_mtc { { env0 tv tv_n n re ⟦⟧ } d } ⊢ { { env0 tv tv_n n re _ } d }
					  _inc i ⊢ i 
						f0 { env0 n re tv_n tv ss ds i } ⊢ { env0 n re tv_n tv ss ds a i }
						_dec i ⊢ i 
						∎ { env0 n re tv_n tv ⟦ s < ss ⟧ ⟦ d < ds ⟧ a i } 
					∐ ss ⊢ _nil◂{}; ds ⊢ _cns◂{ d ds }; ds ⊢ _nil◂{} . 
						crt_mtc { { env0 tv tv_n n re ⟦⟧ } d } ⊢ { { env0 tv tv_n n re _ } d }						
						ini_tv_n i ⊢ { i a } 
						∎ { env0 n re tv_n tv ⟦⟧ ⟦ d ⟧ a i }
					∐. . 
						» "slv_exp_s8.f0 0" _ ⊢ se 
						_emt se ⊢ se
						∎|  
			@.f1 = lst.map_l◂◂exp_s8
			∎∎ 
		§ re_itr # { l { w i } } 
			∎ _cns◂{ i l } 
		§ 
			@.op_line { { env0 tv tv_n n re } ll }
				$ ll ⊢
				∐ ast.op_name◂{ o b s d } .
					ct_ptn { env0 o } ⊢ { env0 o } 
					csm_src_ptn { { env0 tv tv_n re } s } ⊢ { { env0 tv tv_n re } s }
					crt_mtc_ptn { { env0 tv tv_n n re ⟦⟧ } d } ⊢ { { env0 tv tv_n n re _ } d }
					∎ { { env0 tv tv_n n re } ast.op_name◂{ o b s d } }
				∐. ast.op_exp_s8◂{ pl ss ds } .
					exp_s8.f { env0 n re tv_n tv ss ds pl } ⊢ { env0 n re tv_n tv ss ds pl }
					∎ { { env0 tv tv_n n re } ast.op_exp_s8◂{ pl ss ds } }
			\\[
			@.tj { { env0 tv tv_n n re } v } 
				$ v ⊢ 
				∐ _cns◂{ lc v } . 
					$ re ⊢ re,rex 
					r { { env0 tv tv_n n rex } lc } ⊢ { { env0 tv tv_n n _ } lc } 
					tj { { env0 tv tv_n n re } v } ⊢ { { env0 tv tv_n n re } v } 
					∎ { { env0 tv tv_n n re } ⟦ lc < v ⟧ }
				∐. _nil◂{} . 
					∎ { { env0 tv tv_n n re } ⟦⟧ }
			@.r { { env0 tv tv_n n re } lc }
			$ lc ⊢
			∐ ast.jmp◂{ en x } . 
				ct_ptn { env0 en } ⊢ { env0  en } 
				csm_src_ptn { { env0 tv tv_n re } x } ⊢ { { env0 tv tv_n re } x } 
				∎ { { env0 tv tv_n n re } ast.jmp◂{ en x } } 
			∐ ast.seq◂{ ll lc } .
				op_line { { env0 tv tv_n n re } ll } ⊢ { { env0 tv tv_n n re } ll } 
				r { { env0 tv tv_n n re } lc } ⊢ { { env0 tv tv_n n re } lc }
				∎ { { env0 tv tv_n n re } ast.seq◂{ ll lc } }
			∐ ast.mtc◂lm .
				lc_mtc { { env0 tv tv_n n re ⟦⟧ } lm } ⊢ { { env0 tv tv_n n re _ } lm }
				∎ { { env0 tv tv_n n re } ast.mtc◂lm } 
			∐ ast.op_exh◂{ op sp dp lf lx } . 
				ct_ptn { env0 op } ⊢ { env0 op } 
				csm_src_ptn { { env0 tv tv_n re } sp } ⊢ { { env0 tv tv_n re } sp } 
				$ re ⊢ re,re0 
				crt_mtc_ptn { { env0 tv tv_n n re ⟦⟧ } dp } ⊢ { { env0 tv tv_n n re _ } dp }
				r { { env0 tv tv_n n re } lf } ⊢ { { env0 tv tv_n n re } lf } 
				r { { env0 tv tv_n n re0 } lx } ⊢ { { env0 tv tv_n n re0 } lx } 
				∎ { { env0 tv tv_n n re } ast.op_exh◂{ op sp dp lf lx } } 
			∐ ast.tj◂{ x v r } .
				\\[
				hsh_tbl.s8.asc { re x } ⊢ { re { _ o } }
				smt_err◂◂"test_var_T" o ⊢ i 
				$ re ⊢ re,rex 
				tj { { env0 tv tv_n n rex } v } ⊢ { { env0 tv tv_n n _ } v } 				 
  			r { { env0 tv tv_n n re } r } ⊢ { { env0 tv tv_n n re } r }
				∎ { { env0 tv tv_n n re } ast.tj◂{ i v r } }
			∐ ast.ret◂s .
				$ s ⊢
				∐ _some◂{ s _ } . 
					csm_src_ptn { { env0 tv tv_n re } s } ⊢ { { env0 tv tv_n re } s } 
					hsh_tbl.itr◂◂re_itr { re ⟦⟧ } ⊢ { re rl } 
					∎ { { env0 tv tv_n n re } ast.ret◂_some◂{ s rl } } 			
				∐. _none◂{} . 
					∎ { { env0 tv tv_n n re } ast.ret◂_none◂{} } 						
			∐. ast.exn◂ne .
				∎ { { env0 tv tv_n n re } ast.exn◂ne }   			
		@.lc_mtc_i # { { env0 tv tv_n n re dl } { tl me } } 
			$ re ⊢ re,re0 
			$ dl ⊢ dl,dl0 
			mtc_line { { env0 tv tv_n n re0 dl0 } tl } ⊢ { { env0 tv tv_n n re0 dl0 } tl } 
			mtc_etr { env0 tv tv_n n re0 me dl0 } ⊢ { env0 tv tv_n n _ me } 
			∎ { { env0 tv tv_n n re dl } { tl me } }
		@.lc_mtc = p_lst.map_l◂◂lc_mtc_i
		@.mtc_etr { env0 tv tv_n n re me dl } 
			$ me ⊢ 
			∐ ast.mtc_rmf◂lm0 .
				lc_mtc { { env0 tv tv_n n re dl } lm0 } ⊢ { { env0 tv tv_n n re _ } lm0 }  
				∎ { env0 tv tv_n n re ast.mtc_rmf◂lm0 } 
			∐. ast.mtc_code◂{ _ _ lc0 } . 
				hsh_tbl.itr◂◂re_itr { re ⟦⟧ } ⊢ { re rl } 
				$ dl ⊢ dl,dl0 
				rev_apnd { dl0 rl } ⊢ rl 
				r { { env0 tv tv_n n re } lc0 } ⊢ { { env0 tv tv_n n re } lc0 } 
				∎ { env0 tv tv_n n re ast.mtc_code◂{ rl dl lc0 } } 
		@.mtc_test { { env0 tv tv_n n re dl } t }
			$ t ⊢ 
			∐ ast.mtc_id◂{ sp mp } . 
				csm_src_ptn { { env0 tv tv_n re } sp } ⊢ { { env0 tv tv_n re } sp } 
				crt_mtc_ptn { { env0 tv tv_n n re dl } mp } ⊢ { { env0 tv tv_n n re dl } mp }
				∎ { { env0 tv tv_n n re dl } ast.mtc_id◂{ sp mp } } 
			∐. ast.mtc_test◂{ tt v0 v1 } .  
				test_var { env0 n re v0 } ⊢ { env0 n re v0 } 
				test_var { env0 n re v1 } ⊢ { env0 n re v1 } 
				∎ { { env0 tv tv_n n re dl } ast.mtc_test◂{ tt v0 v1 } }  
		@.mtc_line = lst.map_l◂◂mtc_test 
	
		∎∎	
	§§ slv_V 
		§
			@.r { V lc }
				$ lc ⊢
				∐ ast.jmp◂{ en x } . 
					∎ { V ast.jmp◂{ en x } } 
				∐ ast.seq◂{ ll lc } .
					r { V lc } ⊢ { V lc }
					∎ { V ast.seq◂{ ll lc } }
				∐ ast.mtc◂lm .
					mtc { { V ‹› } lm } ⊢ { V m }
					∎ { V ast.mtc◂m } 
				∐ ast.op_exh◂{ op sp dp lf lx } . 
					r { V lf } ⊢ { V lf } 
					r { V lx } ⊢ { V lx } 
					∎ { V ast.op_exh◂{ op sp dp lf lx } } 
				∐ ast.tj◂{ x v r } .
					tj { V v } ⊢ { V v } 				 
  				r { V r } ⊢ { V r }
					∎ { V ast.tj◂{ x v r } }
				∐ ast.ret◂s .
					∎ { V ast.ret◂s } 						
				∐. ast.exn◂ne .
					∎ { V ast.exn◂ne }   					 
			@.mtc { { V rbp } m } 
				$ m ⊢ 
				∐ p_cns◂{ { tl me } m } .
					$ tl ⊢ 
					∐ _cns◂{ mn tl } .
						_cln V ⊢ { V n0 } 
						$ n0 ⊢ n0,n1 
						mtc_line { { V ‹ n1 › me } tl } ⊢ { V p1 }
						$ rbp ⊢ rbp,rbp0 
						mtc { { V rbp0 } m } ⊢ { V pb } 
						_cls { V n0 ast.p◂{ mn rbp ‹ pb › p1 } } ⊢ { V n0 } 
						∎ { V ast.nx_m◂n0 }
					∐. _nil◂{} .
						∎| 
				∐. p_end◂{ tl me } .
					$ tl ⊢ 
					∐ _cns◂{ mn tl } .
						_cln V ⊢ { V n0 } 
						$ n0 ⊢ n0,n1 
						mtc_line { { V ‹ n1 › me } tl } ⊢ { V p1 }
						_cls { V n0 ast.p◂{ mn rbp ‹› p1 } } ⊢ { V n0 } 
						∎ { V ast.nx_m◂n0 }
					∐. _nil◂{} . 
						$ me ⊢ 
						∐ ast.mtc_code◂{ rl dl lc } . 
							r { V lc } ⊢ { V lc } 
							∎ { V ast.nx_e◂{ rl dl lc } }
						\[
							∎|
							\]
						∐. ast.mtc_rmf◂_ .
							∎| 
				@.mtc_line { { V rbp me } tl } 
					$ tl ⊢ 
					∐ _cns◂{ mn tl } . 
						_cln V ⊢ { V n0 } 
						$ n0 ⊢ n0,n1 
						mtc_line { { V ‹ n1 › me } tl } ⊢ { V p1 }
						_cls { V n0 ast.p◂{ mn rbp ‹› p1 } } ⊢ { V n0 } 
						∎ { V ast.nx_m◂n0 }
					∐. _nil◂{} .	
						$ me ⊢ 
						∐ ast.mtc_code◂{ rl dl lc } . 
							r { V lc } ⊢ { V lc } 
							∎ { V ast.nx_e◂{ rl dl lc } }
						∐. ast.mtc_rmf◂_ .
							∎| 
			@.tj { V v } 
				$ v ⊢ 
				∐ _cns◂{ lc v } . 
					r { V lc } ⊢ { V lc } 
					tj { V v } ⊢ { V v } 
					∎ { V ⟦ lc < v ⟧ }
				∐. _nil◂{} . 
					∎ { V ⟦⟧ }
		∎∎
		§ 
		@.set_tpl { ev evv tv tv_n t p } 
				∐ t ⊢ RP.rcd◂l0; p ⊢ RP.rcd◂l1 . 
					set_tpl_lst { ev evv tv tv_n l0 l1 } ⊢ { ev evv tv tv_n l0 l1 } 
					∎ { ev evv tv tv_n RP.rcd◂l0 RP.rcd◂l1 } 
				∐ t ⊢ RP.atm◂{ i0 v0 }; p ⊢ RP.atm◂a0 . 
					exc_tv { evv i0 a0 } ⊢ { evv i0 a0 } 
					exc_tv { ev i0 v0 } ⊢ { ev i0 _ } 
					∎ { ev evv tv tv_n RP.atm◂i0 RP.atm◂a0 }
				∐. . 
					∎| 
			@.set_tpl_lst { ev evv tv tv_n l0 l1 } 
				∐ l0 ⊢ _cns◂{ t l0 }; l1 ⊢ _cns◂{ p l1 } . 
					set_tpl { ev evv tv tv_n t p } ⊢ { ev evv tv tv_n t p }
					set_tpl_lst { ev evv tv tv_n l0 l1 } ⊢ { ev evv tv tv_n l0 l1 } 
					∎ { ev evv tv tv_n _cns◂{ t l0 } _cns◂{ p l1 } }
				∐ l0 ⊢ _nil◂{}; l1 ⊢ _nil◂{} . 
					∎ { ev evv tv tv_n _nil◂{} _nil◂{} }
				∐. . 
					_emt %[ "set_tpl_lst 0" ] ⊢ _
					∎| 
	§ 
		@.tpl_ptn = RP.map_l_x◂◂tpl_atm 
		@.tpl_atm { { c_n wl lv evv ev ev_n tv tv_n } w } 		
			assoc { wl w } ⊢ { wl w o } 
			nnt_emt { o w } ⊢ w 
			$ tv_n ⊢ tv_n,t0 
			newvar_l { tv_n tv lv } ⊢ { tv_n tv lv y } 
			$ t0 ⊢ t0,t1 
			set_tv { ev ev_n t0 } ⊢ { ev ev_n }
			$ c_n ⊢ c_n,cv,cv0 
			_inc c_n ⊢ c_n 
			set_tv { evv ev_n ast.k_var◂{ cv0 t1 } } ⊢ { evv ev_n } 
			$ ev_n ⊢ ev_n,n0 
			_inc ev_n ⊢ ev_n 
			∎ { { c_n _cns◂{ { w _some◂n0 } wl } lv evv ev ev_n tv tv_n } cv y } 
		@.tpl_ptn_lst = lst.map_l_x◂◂tpl_atm 
	§ 
		@.tpl_reg_ptn = RP.map_l_x◂◂tpl_reg_atm 
		@.tpl_reg_atm { { wl lv rv rv_n tv tv_n } w } 		
			hsh_tbl.s8.asc { wl w } ⊢ { wl { w o } } 
			nnt_emt { o w } ⊢ w 
			$ tv_n ⊢ tv_n,t0 
			newvar_l { tv_n tv lv } ⊢ { tv_n tv lv y } 
			$ t0 ⊢ t0,t1 
			hsh_tbl.r64.set { rv { rv_n t0 } } ⊢ { rv { rv_n o } } 
			nnt o ⊢ {} 
			inc_x rv_n ⊢ { i rv_n } 
			$ i ⊢ i,i0
			hsh_tbl.s8.set { wl { w i } } ⊢ { wl _ } 
			∎ { { wl lv rv rv_n tv tv_n } i0 y } 
			@.tpl_reg_ptn_lst = lst.map_l_x◂◂tpl_reg_atm 
		
		§§ slv 
			§ reg # { lv n0 rv tv_n tv }
				$ tv_n ⊢ tv_n,tv_n_0
				hsh_tbl.r64.set { rv { n0 tv_n_0 } } ⊢ { rv { n0 o } } 
				nnt o ⊢ {} 
				newvar_l { tv_n tv lv } ⊢ { tv_n tv lv y }
				∎ { lv n0 rv tv_n tv y }
			§ 
				@.ct_abs { E y l }
					$ l ⊢ 
					∐ _cns◂{ c l } . 
						ct_ptn { E c } ⊢ { E c yc } 
						ct_abs { E TX.t_ct_imp◂{ yc y } l } ⊢ { E y l } 
						∎ { E y ⟦ c < l ⟧ }
					∐. _nil◂{} . 
						∎ { E y ⟦⟧ }
			@.cst { E c } 
				\\$ c ⊢ c,c_0 
				∐ c ⊢ ast.k_name◂i_e . 
					$ E ⊢ { lv ev tv_n tv } 
					lod_tv { ev i_e } ⊢ { ev i_e vi }
					inst { tv_n tv lv RP.atm◂var◂vi } ⊢ { tv_n tv lv y } 
					∎ { { lv ev tv_n tv } ast.k_name◂i_e y }
				∐ c ⊢ ast.k_r64◂x . 
					∎ { E ast.k_r64◂x TX.r64◂{} }
				∐ c ⊢ ast.k_s8◂s . 
					∎ { E ast.k_s8◂s TX.s8◂{} } 
				∐ c ⊢ ast.k_app◂{ c0 c1 } . 
					ct_ptn { E c0 } ⊢ { E c0 y0 } 
					ct_ptn { E c1 } ⊢ { E c1 y1 } 
					$ E ⊢ { lv ev tv_n tv } 
					newvar_l { tv_n tv lv } ⊢ { tv_n tv lv yy }
					$ yy ⊢ yy,yy0 
					T.unify.f_emt # { tv RP.atm◂ct_imp◂{ y1 yy0 } y0 } ⊢ tv    
					∎ { { lv ev tv_n tv } ast.k_app◂{ c0 c1 } yy }
				∐ c ⊢ ast.k_ctr◂{ i n v } . 
					$ E ⊢ { lv ev tv_n tv } 
					$ v ⊢ v,v0 
					inst { tv_n tv lv RP.atm◂var◂%v0 } ⊢ { tv_n tv lv y } 
					∎ { { lv ev tv_n tv } ast.k_ctr◂{ i n v } y }
				∐ c ⊢ ast.k_agl◂{ i0 c0 } . 
					$ E ⊢ { lv ev tv_n tv } 
					lod_tv { ev i0 } ⊢ { ev i0 vi }
					inst { tv_n tv lv RP.atm◂var◂vi } ⊢ { tv_n tv lv yi } 
					_inc lv ⊢ lv 
					ct_ptn { { lv ev tv_n tv } c0 } ⊢ { { lv ev tv_n tv } c0 ys } 
					newvar_l { tv_n tv lv } ⊢ { tv_n tv lv yd } 
					$ yd ⊢ yd,yd0 
					$ yi ⊢ yi,yi_0
					T.unify.f_emt # { %tv RP.atm◂imp◂{ %ys %yd0 } %yi_0 } ⊢ tv
					_dec lv ⊢ lv 
					gen { tv_n tv lv yi } ⊢ { tv_n tv lv yi }
					inst { tv_n tv lv yd } ⊢ { tv_n tv lv yd }
					∎ { { lv ev tv_n tv } ast.k_agl◂{ i0 c0 } yd }
				∐ c ⊢ ast.k_var◂{ x v } . 
					$ E ⊢ { lv ev tv_n tv } 
					$ v ⊢ v,v0
					inst { tv_n tv lv RP.atm◂var◂v0 } ⊢ { tv_n tv lv y } 
					∎ { { lv ev tv_n tv } ast.k_var◂{ x v } y }
				∐ c ⊢ ast.k_op_axm◂{ i l } . 
					$ E ⊢ { lv ev tv_n tv } 
					\\_lod_q { i } ⊢ { i { _ v } } 
					$ i ⊢ i,i0 
					EX.slv { { tv tv_n } i0 } ⊢ { { tv tv_n } y } 
					inst { tv_n tv lv y } ⊢ { tv_n tv lv y } 
					newvar_l { tv_n tv lv } ⊢ { tv_n tv lv yy }
					$ yy ⊢ yy,yy0 
					ct_abs { { lv ev tv_n tv } yy l } ⊢ { { lv ev tv_n tv } yy l } 
					T.unify.f_emt # { tv y yy } ⊢ tv 
					∎ { { lv ev tv_n tv } ast.k_op_axm◂{ i l } yy0 }
				∐ c ⊢ ast.k_arr◂v .
					\[
					$ E ⊢ { lv ev tv_n tv } 
					newvar_l { tv_n tv lv } ⊢ { tv_n tv lv yy }
					arr.itr_lft◂◂ug { v { { lv ev tv_n tv } yy } } ⊢ { v { { lv ev tv_n tv } yy } }
					∎ { { lv ev tv_n tv } c_0 yy }
					\]
					∎| 
				∐ c ⊢ ast.k_op_gnr◂{ og o_n ok dp r_n ib lc v } . 
					$ E ⊢ { lv ev tv_n tv } 
					$ v ⊢ v,v0
					inst { tv_n tv lv RP.atm◂var◂v0 } ⊢ { tv_n tv lv y } 
					$ ok ⊢ 
					∐ _none◂{} . 
						∎ { { lv ev tv_n tv } ast.k_op_gnr◂{ og o_n ‹› dp r_n ib lc v } y }
					∐. _some◂c1 . 
						ct_ptn { { lv ev tv_n tv } c1 } ⊢ { { lv ev tv_n tv } c1 y1 } 
						newvar_l { tv_n tv lv } ⊢ { tv_n tv lv yy }
						$ yy ⊢ yy,yy0 
						T.unify.f_emt # { tv RP.atm◂ct_imp◂{ y1 yy0 } y } ⊢ tv 
						∎ { { lv ev tv_n tv } ast.k_op_gnr◂{ og o_n ‹ c1 › dp r_n ib lc v } yy }						
				∐. . 
					 » "slv.cst 0" _ ⊢ ee0 
					_emt ee0 ⊢ _ 
					∎|
				@.ct_ptn = RP.map_l_x◂◂cst
				@.ct_ptn_lst = RP.map_l_x_lst◂◂cst 
			§ 
				@.crt_mtc { { lv ev rv tv tv_n } a } 
					$ a ⊢ 
					∐ ast.re_reg◂n0 .
						reg { lv n0 rv tv_n tv } ⊢ { lv n0 rv tv_n tv y } 
						∎ { { lv ev rv tv tv_n } ast.re_reg◂%n0 y }
					∐ ast.re_v◂o .
						smt_err◂◂"crt_mtc" o ⊢ n0 
						reg { lv n0 rv tv_n tv } ⊢ { lv n0 rv tv_n tv y } 						
						∎ { { lv ev rv tv tv_n } ast.re_v◂_some◂%n0 y }
					∐. ast.re_agl◂{ i_e ap } . 
						crt_mtc_ptn { { lv ev rv tv tv_n } ap } ⊢ { { lv ev rv tv tv_n } ap y } 
						lod_tv { ev i_e } ⊢ { ev i_e iv } 
						inst { tv_n tv lv RP.atm◂var◂iv } ⊢ { tv_n tv lv yx } 
						newvar_l { tv_n tv lv } ⊢ { tv_n tv lv yy }	
						$ yy ⊢ yy,yy0 
						T.unify.f_emt # { tv TX.t_imp◂{ y yy } yx } ⊢ tv 
						∎ { { lv ev rv tv tv_n } ast.re_agl◂{ i_e ap } yy0 }
				@.crt_mtc_ptn = RP.map_l_x◂◂crt_mtc 
				@.crt_mtc_ptn_lst = RP.map_l_x_lst◂◂crt_mtc 
		§ crt_mtc_lst = lst.map_l_x◂◂crt_mtc 
		§ 
			@.csm_src_ptn = RP.map_l_x◂◂csm_src 
			@.csm_src_ptn_lst = RP.map_l_x_lst◂◂csm_src 
			@.csm_src { { lv ev rv tv tv_n } a }
				$ a ⊢ 
				∐ ast.re_reg◂i .
					hsh_tbl.r64.asc { rv i } ⊢ { rv { i o } } 
					smt_err◂◂"csm_src:0" o ⊢ vi 
					inst { tv_n tv lv RP.atm◂var◂vi } ⊢ { tv_n tv lv y0 } 
					∎ { { lv ev rv tv tv_n } ast.re_reg◂i y0 }
				∐ ast.re_agl◂{ e sp } .
					_inc lv ⊢ lv 
					csm_src_ptn { { lv ev rv tv tv_n } sp } ⊢ { { lv ev rv tv tv_n } sp yp } 
					lod_tv { ev e } ⊢ { ev e vi }
					inst { tv_n tv lv RP.atm◂var◂vi } ⊢ { tv_n tv lv y } 
					newvar_l { tv_n tv lv } ⊢ { tv_n tv lv yd } 
					$ yd ⊢ yd,yd0 
					$ y ⊢ y,y0 
					T.unify.f_emt # { tv TX.t_imp◂{ yp yd0 } y } ⊢ tv 
					_dec lv ⊢ lv 
					gen { tv_n tv lv y0 } ⊢ { tv_n tv lv _ }
					inst { tv_n tv lv yd } ⊢ { tv_n tv lv yd } 
					∎ { { lv ev rv tv tv_n } ast.re_agl◂{ e sp } yd } 
				∐. ast.re_v◂c .
					cst { { lv ev tv_n tv } c } ⊢ { { lv ev tv_n tv } c y0 }
					∎ { { lv ev rv tv tv_n } ast.re_v◂c y0 }
		§ csm_src_lst = lst.map_l_x◂◂csm_src 
		
		§ @.test_var { lv ev tv_n tv rv v } 
			$ v ⊢ 
			∐ ast.test_var◂i . 
				hsh_tbl.r64.asc { rv i } ⊢ { rv { i o } } 
				smt_err◂◂"test_var:0" o ⊢ vi 
				inst { tv_n tv lv RP.atm◂var◂%vi } ⊢ { tv_n tv lv yv }  
				∎ { lv ev tv_n tv rv ast.test_var◂%i yv }
			∐. ast.test_cst◂c . 
				cst { { lv ev tv_n tv } c } ⊢ { { lv ev tv_n tv } c y }
				∎ { lv ev tv_n tv rv ast.test_cst◂%c y }
		§ exp_s8 { lv  ev tv_n tv e } 
			$ e ⊢ 
			∐ ast.exp_s8_cst◂c . 
				cst { { lv ev tv_n tv } c } ⊢ { { lv ev tv_n tv } c y } 
				T.iug { tv_n tv lv y TX.s8◂{} } ⊢ { tv_n tv lv _ _ }
				∎ { lv  ev tv_n tv ast.exp_s8_cst◂%c _none◂{} }
			∐ ast.exp_s8_idx◂{ p i } . 
				$ i ⊢ i,i0 
				$ p ⊢ 
				∐ ast.fmt_s◂{} . 
					∎ { lv ev tv_n tv ast.exp_s8_idx◂{ ast.fmt_s◂{} %i } _some◂{ %i0 TX.s8◂{} } }
				∐ ast.fmt_d◂{} . 
					∎ { lv  ev tv_n tv ast.exp_s8_idx◂{ ast.fmt_d◂{} %i } _some◂{ %i0 TX.r64◂{} } }
				∐ ast.fmt_x◂{} .
					∎ { lv  ev tv_n tv ast.exp_s8_idx◂{ ast.fmt_x◂{} %i } _some◂{ %i0 TX.r64◂{} } } 
				∐. ast.fmt_p◂{} .
					_emt %[ "slv exp_s8_fmt 0" ] ⊢ _ 
					∎|  
			∐. ast.exp_s8_for◂{ i c } . 
				cst { { lv ev tv_n tv } c } ⊢ { { lv ev tv_n tv } c y0 } 
				T.iug { tv_n tv lv y0 TX.s8◂{} } ⊢ { tv_n tv lv _ _ }
				$ i ⊢ i,i0 
				∎ { lv  ev tv_n tv ast.exp_s8_for◂{ %i %c } _some◂{ %i0 TX.r64◂{} } } 
		§§ exp_s8 
			§ 
				@.f { lv  ev rv tv_n tv ss ds el } 
					_inc lv ⊢ lv 
					» 0r _ ⊢ i
					f0 { lv  ev rv tv_n tv ss ds i } ⊢ { lv  ev rv tv_n tv ss ds a i ys }
					f1 { lv  ev tv_n tv el a } ⊢ { lv  ev tv_n tv el a }
					_dec lv ⊢ lv 
					T.gen_lst { tv_n tv lv ys } ⊢ { tv_n tv lv ys }
					∎ { lv  ev rv tv_n tv ss ds el }
				@.f0 { lv  ev rv tv_n tv ss ds i } 
					∐ ss ⊢ _cns◂{ s ss }; ds ⊢ _cns◂{ d ds } . 
						csm_src { { lv ev rv tv tv_n } s } ⊢ { { lv ev rv tv tv_n } s ys }
						crt_mtc { { lv ev rv tv tv_n } d } ⊢ { { lv ev rv tv tv_n } d yd }
						$ yd ⊢ yd,yd0 
						T.unify.f_emt # { tv ys yd0 } ⊢ tv
						_inc i ⊢ i 
						f0 { lv  ev rv tv_n tv ss ds i } ⊢ { lv  ev rv tv_n tv ss ds a i ys }
						_dec i ⊢ i 
						$ yd ⊢ yd,yd0 
						set_tv { a i yd } ⊢ { a i } 
						$ _cns◂{ s ss } ⊢ ss 
						$ _cns◂{ d ds } ⊢ ds 
						$ _cns◂{ yd0 ys } ⊢ ys 
						∎ { lv  ev rv tv_n tv ss ds a i ys } 
					∐ ss ⊢ _nil◂{}; ds ⊢ _cns◂{ d ds }; ds ⊢ _nil◂{} . 
						crt_mtc { { lv ev rv tv tv_n } d } ⊢ { { lv ev rv tv tv_n } d yd }						
						$ TX.s8◂{} ⊢ yy 
						$ yd ⊢ yd,yd0 
						T.unify.f_emt # { tv yy yd0 } ⊢ tv  
						ini_tv_n i ⊢ { i a } 
						∎ { lv ev rv tv_n tv _nil◂{} _cns◂{ %d _nil◂{} } a i _cns◂{ %yd _nil◂{} } }
					∐. . 
						» "slv_exp_s8.f0 0" _ ⊢ se 
						_emt se ⊢ se
						∎|  
			@.f1 { lv  ev tv_n tv el a } 
				$ el ⊢ 
				∐ _cns◂{ hd el } .
					exp_s8 { lv ev tv_n tv hd } ⊢ { lv  ev tv_n tv e o } 
					$ o ⊢ 
					∐ _some◂{ i y } . 
						lod_tv { a i } ⊢ { a i yd }
						T.unify.f { tv y yd } ⊢ tv
						f1 { lv  ev tv_n tv el a } ⊢ { lv  ev tv_n tv el a }
						$ _cns◂{ e el } ⊢ el 
						∎ { lv  ev tv_n tv el a }
					∐. _none◂{} . 
						f1 { lv  ev tv_n tv el a } ⊢ { lv  ev tv_n tv el a }
						$ _cns◂{ e el } ⊢ el 
						∎ { lv  ev tv_n tv el a }
				∐. _nil◂{} . 
					$ _nil◂{} ⊢ el 
					∎ { lv  ev tv_n tv el a }
			∎∎ 
		§ 
			@.r { V lv ev rv tv tv_n lc }
			$ lc ⊢
			∐ ast.jmp◂{ i_e x } . 
				_inc lv ⊢ lv 
				ct_ptn { { lv ev tv_n tv } i_e } ⊢ { { lv ev tv_n tv } i_e yv } 
				csm_src_ptn { { lv ev rv tv tv_n } x } ⊢ { { lv ev rv tv tv_n } x y0 } 
				newvar_l { tv_n tv lv } ⊢ { tv_n tv lv yy } 
				$ yy ⊢ yy,yy0 
				T.unify.f_emt # { tv RP.atm◂imp◂{ y0 yy } yv } ⊢ tv 
				_dec lv ⊢ lv 
				gen { tv_n tv lv yy0 } ⊢ { tv_n tv lv yy0 } 
				∎ { V lv ev rv tv tv_n ast.jmp◂{ i_e x } yy0 } 
			∐ ast.seq◂{ ll lc } .
				$ ll ⊢
				∐ ast.op_name◂{ i_e ib s d } .
					_inc lv ⊢ lv 
					ct_ptn { { lv ev tv_n tv } i_e } ⊢ { { lv ev tv_n tv } i_e yo } 
					csm_src_ptn { { lv ev rv tv tv_n } s } ⊢ { { lv ev rv tv tv_n } s y_s }
					crt_mtc_ptn { { lv ev rv tv tv_n } d } ⊢ { { lv ev rv tv tv_n } d y_d }
					$ yo ⊢ yo,yo0 
					T.unify.f_emt # { tv yo0 TX.t_imp◂{ y_s y_d } } ⊢ tv 
					_dec lv ⊢ lv 
					gen { tv_n tv lv yo } ⊢ { tv_n tv lv yo } 
					r { V lv ev rv tv tv_n lc } ⊢ { V lv ev rv tv tv_n lc yr }
					∎ { V lv ev rv tv tv_n ast.seq◂{ ast.op_name◂{ i_e ib s d } lc } yr }
				∐. ast.op_exp_s8◂{ pl ss ds } .
					exp_s8.f { lv  ev rv tv_n tv ss ds pl } ⊢ { lv  ev rv tv_n tv ss ds pl }
					ast.op_exp_s8 { pl ss ds } ⊢ ll 
					r { V lv ev rv tv tv_n lc } ⊢ { V lv ev rv tv tv_n lc yr } 
					∎ { V lv ev rv tv tv_n ast.seq◂{ ll lc } yr }
			∐ ast.mtc◂p .
				$ p ⊢ p,p0 
				mtc { V lv ev rv tv tv_n p0 } ⊢ { V lv ev rv tv tv_n yr }
				∎ { V lv ev rv tv tv_n ast.mtc◂p yr } 
			∐ ast.op_exh◂{ op s d lf lx } . 
				_inc lv ⊢ lv 
				ct_ptn { { lv ev tv_n tv } op } ⊢ { { lv ev tv_n tv } op yo } 
				csm_src_ptn { { lv ev rv tv tv_n } s } ⊢ { { lv ev rv tv tv_n } s y_s }
				crt_mtc_ptn { { lv ev rv tv tv_n } d } ⊢ { { lv ev rv tv tv_n } d y_d }
				$ yo ⊢ yo,yo0 
				T.unify.f_emt # { tv yo0 TX.t_imp◂{ y_s y_d } } ⊢ tv 
				_dec lv ⊢ lv 
				gen { tv_n tv lv yo } ⊢ { tv_n tv lv yo } 
				r { V lv ev rv tv tv_n lf } ⊢ { V lv ev rv tv tv_n lf yf }
				r { V lv ev rv tv tv_n lx } ⊢ { V lv ev rv tv tv_n lx yx }
				T.iug { tv_n tv lv yf yx } ⊢ { tv_n tv lv yf _ }
				∎ { V lv ev rv tv tv_n ast.op_exh◂{ op s d lf lx } yf }				
			∐ ast.tj◂{ x v r } . 
				_inc lv ⊢ lv 
				hsh_tbl.r64.asc { rv x } ⊢ { rv { x o } } 
				smt_err◂◂"test_var:0" o ⊢ vi 
				inst { tv_n tv lv RP.atm◂var◂%vi } ⊢ { tv_n tv lv yv }  
				\\$ yv ⊢ yv,yo 
				$ yv ⊢ yv,yv0 
				T.unify.f { tv yv TX.r64◂{} } ⊢ tv 
				_dec lv ⊢ lv 
				gen { tv_n tv lv yv0 } ⊢ { tv_n tv lv _ } 
				r { V lv ev rv tv tv_n r } ⊢ { V lv ev rv tv tv_n r yr }
				tj { { V lv ev rv tv tv_n yr } v } ⊢ { { V lv ev rv tv tv_n yr } v } 
				_dec lv ⊢ lv 
				gen { tv_n tv lv yr } ⊢ { tv_n tv lv yr } 
				∎ { V lv ev rv tv tv_n ast.tj◂{ x v r } yr }
				\\]
				\\∎|
			∐ ast.ret◂s .
				$ s ⊢
				∐ _some◂{ s rl } . 
					_inc lv ⊢ lv 
					csm_src_ptn { { lv ev rv tv tv_n } s } ⊢ { { lv ev rv tv tv_n } s y0 } 
					_dec lv ⊢ lv 
					gen { tv_n tv lv y0 } ⊢ { tv_n tv lv y0 } 
					∎ { V lv ev rv tv tv_n ast.ret◂‹ { s rl } › y0 } 			
				∐. _none◂{} . 
					∎ { V lv ev rv tv tv_n ast.ret◂_none◂{} RP.rcd◂_nil◂{} } 								
			∐. ast.exn◂ne .
				newvar_q { tv_n tv lv } ⊢ { tv_n tv lv yq }
				∎ { V lv ev rv tv tv_n ast.exn◂ne yq }   			
		@.tj { { V lv ev rv tv tv_n yr } v } 
			$ v ⊢ 
			∐ _cns◂{ lc v } . 
				r { V lv ev rv tv tv_n lc } ⊢ { V lv ev rv tv tv_n lc yf }
				tj { { V lv ev rv tv tv_n yr } v } ⊢ { { V lv ev rv tv tv_n yr } v } 
				inst { tv_n tv lv yf } ⊢ { tv_n tv lv yf } 
				$ yr ⊢ yr,yr0 
				T.unify.f { tv yr0 yf } ⊢ tv 
				\\T.iug { tv_n tv lv yr yf } ⊢ { tv_n tv lv yr _ } 
				∎ { { V lv ev rv tv tv_n yr } _cns◂{ lc v } } 
			∐. _nil◂{} . 
				_inc lv ⊢ lv 
				inst { tv_n tv lv yr } ⊢ { tv_n tv lv yr } 
				∎ { { V lv ev rv tv tv_n yr } ⟦⟧ } 
		@.mtc { V lv ev rv tv tv_n m } 
			$ m ⊢ 
			∐ ast.nx_e◂{ rl dl lc } .
				r { V lv ev rv tv tv_n lc } ⊢ { V lv ev rv tv tv_n _ yr }
				∎ { V lv ev rv tv tv_n yr }
			∐. ast.nx_m◂p . 
				cll { V p } ⊢ { V _ ast.p◂{ nm rbp brp nxp } } 
				mtc_test { { lv ev rv tv tv_n } nm } ⊢ { { lv ev rv tv tv_n } nm }
				mtc { V lv ev rv tv tv_n nxp } ⊢ { V lv ev rv tv tv_n y0 } 
				$ brp ⊢ 
				∐ _some◂m0 . 
					mtc { V lv ev rv tv tv_n m0 } ⊢ { V lv ev rv tv tv_n y1 } 
					T.iug { tv_n tv lv y0 y1 } ⊢ { tv_n tv lv y0 _ }
					∎ { V lv ev rv tv tv_n y0 } 
				∐. _none◂{} . 
					∎ { V lv ev rv tv tv_n y0 }
		
		@.mtc_test { { lv ev rv tv tv_n } t } 
			$ t ⊢ 
			∐ ast.mtc_id◂{ sp mp } . 
				_inc lv ⊢ lv 
				csm_src_ptn { { lv ev rv tv tv_n } sp } ⊢ { { lv ev rv tv tv_n } sp y0 } 
				crt_mtc_ptn { { lv ev rv tv tv_n } mp } ⊢ { { lv ev rv tv tv_n } mp y }
				_dec lv ⊢ lv 
				$ y0 ⊢ y0,y0_0 
				T.unify.f_emt # { tv y0_0 y } ⊢ tv 
				gen { tv_n tv lv y0 } ⊢ { tv_n tv lv y0 } 
				∎ { { lv ev rv tv tv_n } ast.mtc_id◂{ sp mp } }
			∐. ast.mtc_test◂{ tt v0 v1 } .  
				_inc lv ⊢ lv 
				test_var { lv ev tv_n tv rv v0 } ⊢ { lv ev tv_n tv rv v0 y0 } 
				test_var { lv ev tv_n tv rv v1 } ⊢ { lv ev tv_n tv rv v1 y1 } 
				_dec lv ⊢ lv 
				$ y0 ⊢ y0,y0_0 
				T.unify.f { tv y0_0 y1 } ⊢ tv  
				gen { tv_n tv lv y0 } ⊢ { tv_n tv lv y0 } 
				∎ { { lv ev rv tv tv_n } ast.mtc_test◂{ tt v0 v1 } } 
		\\@.mtc_line = lst.map_l◂◂mtc_test 
		∎∎
	
	§§ slv_type 
			§ 
				@.f = RP.map_l_atm◂◂f_atm 
				@.f_atm { ENV a }
					$ a ⊢ 
					∐ T.imp◂{ t0 t1 } .
						f { ENV t0 } ⊢ { ENV t0 } 
						f { ENV t1 } ⊢ { ENV t1 } 
						∎ { ENV RP.atm◂T.imp◂{ t0 t1} } 
					∐ T.ct_imp◂{ t0 t1 } . 
						f { ENV t0 } ⊢ { ENV t0 } 
						f { ENV t1 } ⊢ { ENV t1 } 
						∎ { ENV RP.atm◂T.ct_imp◂{ t0 t1} } 
					∐ T.dta◂{ ax tl } . 
						∎|
					∐ T.abs◂{ i t } . 
						∎| 
					∐. T.var◂v . 
						f_v { ENV v } ⊢| 
				@.f_v { ENV v } 
					$ v ⊢ 
					∐ ast.app◂{ t0 t1 } . 
						f { ENV t0 } ⊢ { ENV t0 } 
						f { ENV t1 } ⊢ { ENV t1 } 
						f_app { ENV { t0 t1 } } ⊢| 
					∐ ast.type_name◂n . 
						$ ENV ⊢ { env0 mtv tv_n tv t_ns al l2 } 
						$ env0 ⊢ { mmv mev ev m_ns e_ns m_l } 
						slv_ns_t { n { mmv mtv } { m_ns t_ns } m_l } ⊢ { { mmv mtv } { m_ns t_ns } m_l iv }
						$ { mmv mev ev m_ns e_ns m_l } ⊢ env0 	
						assoc { l2 iv } ⊢ { l2 iv o } 
						∐ o ⊢ _some◂o; o ⊢ _some◂{ w as y } .
							$ iv ⊢ iv,i0_0 
							$ _cns◂{ { i0_0 _some◂_none◂{} } l2 } ⊢ l2 
							args_ln { { env0 mtv tv_n tv t_ns as _nil◂{} l2 } y } ⊢ { { env0 mtv tv_n tv t_ns al0 l2 } k } 
							$ iv ⊢ iv,i0_0 
							$ _cns◂{ { i0_0 _none◂{} } l2 } ⊢ l2 
							set_tv { tv iv T.var_ln◂k } ⊢ { tv iv }
							∎ { { env0 mtv tv_n tv t_ns al l2 } RP.atm◂T.var◂iv } 
						∐ o ⊢ _some◂o; o ⊢ _none◂{} . 
							_emt %[ "slv_type 0" ] ⊢ se 
							∎| 
						∐. . 
							inst { tv_n tv %[ 1r ] RP.atm◂T.var◂iv } ⊢ { tv_n tv lv k }
							_dec lv ⊢ lv  
							gen { tv_n tv lv k } ⊢ { tv_n tv lv k } 
							∎ { { env0 mtv tv_n tv t_ns al l2 } k }
					∐ ast.type_ln◂_ .
						∎| 
					∐. ast.type_var◂s . 
						$ ENV ⊢ { env0 mtv tv_n tv t_ns al l2 } 
						assoc { al s } ⊢ { al s o } 
						smt_err◂◂"slv_type" o ⊢ i 
						∎ { { env0 mtv tv_n tv t_ns al l2 } RP.atm◂var◂i }
			@.f_app { { env0 mtv tv_n tv t_ns al l2 } { k0 k1 } } 
				$ k0 ⊢ 
				∐ RP.rcd◂l . 
					T.pnt_type_k { tv RP.rcd◂l } ⊢ { tv s0 } 
					_emt s0 ⊢ _ 
					∎| 
				∐. RP.atm◂k0 . 
					∐ k0 ⊢ abs◂{ a k0 } . 
						exc_tv { tv a var_ln◂k1 } ⊢ { tv a _ } 
						∎ { { env0 mtv tv_n tv t_ns al l2 } k0 } 
					∐ k0 ⊢ var◂i . 
						lod_tv { tv i } ⊢ { tv i v } 
						∐ v ⊢ var_ln◂k2 . 
							f_app { { env0 mtv tv_n tv t_ns al l2 } { k2 k1 } } ⊢|
						∐. . 
							T.pnt_type_k { tv k1 } ⊢ { tv s0 } 
							» "slv_type_app 1" _ ⊢ se 
							_emt se ⊢ se 
							_emt s0 ⊢ s0 
							∎|
					∐. . 
						T.pnt_type_k { tv RP.atm◂k0 } ⊢ { tv s0 } 
						_emt %[ "slv_type_app 0" ] ⊢ _ 
						_emt s0 ⊢ s0 
						∎| 
			@.args_ln { { env0 mtv tv_n tv t_ns as al l2 } t } 
				$ as ⊢ 
				∐ _cns◂{ a as } . 
					assoc { al a } ⊢ { al a o } 
					nnt o ⊢ {} 
					T.newvar_i { tv_n tv } ⊢ { tv_n tv i } 
					$ i ⊢ i,i0 
					args_ln { { env0 mtv tv_n tv t_ns as _cns◂{ { a _some◂i } al } l2 } t } ⊢ { { env0 mtv tv_n tv t_ns al l2 } k } 
					∎ { { env0 mtv tv_n tv t_ns al l2 } RP.atm◂T.abs◂{ i0 k } }		
				∐. _nil◂{} .  
					f { { env0 mtv tv_n tv t_ns al l2 } t } ⊢|	
			∎∎ 
		§ slv_args_ln # { { env0 mtv tv_n tv t_ns as l2 } t } 
			slv_type.args_ln { { env0 mtv tv_n tv t_ns as _nil◂{} l2 } t } ⊢| 
		§ @.slv_args_def_0 SAD
			inv SAD ⊢ { mtv tv_n tv t_ns as al x xl ql dl } 
			$ as ⊢ 
			∐ _cns◂{ a as } . 
				assoc { al a } ⊢ { al a o } 
				nnt o ⊢ {} 
				T.newvar_i { tv_n tv } ⊢ { tv_n tv i } 
				$ tv_n ⊢ tv_n,tv_n0 
				$ tv_n ⊢ tv_n,qi 
				newvar_q { tv_n tv %[ 0r ] } ⊢ { tv_n tv lv q } 
				$ i ⊢ i,i1 
				iso { mtv tv_n tv t_ns as _cns◂{ { a _some◂tv_n0 } al } x _cns◂{ RP.atm◂var◂i1 xl } _cns◂{ q ql } dl } ⊢ SAD 
				slv_args_def_0 SAD ⊢ { mtv tv_n tv t_ns al k yx dl ql } 
				∎ { mtv tv_n tv t_ns al RP.atm◂abs◂{ i k } yx dl _cns◂{ qi ql } }
			∐. _nil◂{} .  
				$ x ⊢ x,x0 
				∎ { mtv tv_n tv t_ns al RP.atm◂dta◂{ x xl } RP.atm◂dta◂{ x0 ql } dl _nil◂{} }
		§ slv_args_def # { mtv tv_n tv t_ns as x dl } 
			iso { mtv tv_n tv t_ns as _nil◂{} x _nil◂{} _nil◂{} dl } ⊢ SAD 
			slv_args_def_0 SAD ⊢ { mtv tv_n tv t_ns al k yx dl ql0 } 
			rev ql0 ⊢ ql0 
			∎ { mtv tv_n tv t_ns al k yx dl ql0 }
	§ rtr_dst_ptn { env0 mtv tv_n tv ns_t y td } 
			∐ td ⊢ _some◂td . 
				slv_type.f { { env0 mtv tv_n tv ns_t _nil◂{} _nil◂{} } td } ⊢ { { env0 mtv tv_n tv ns_t al l2 } kd } 
				T.unify.f { tv y kd } ⊢ tv
				∎ { env0 mtv tv_n tv ns_t }
			∐. . 
				∎ { env0 mtv tv_n tv ns_t }
	
		§ @.slv_dt_def { { mmv mev ns_m il } { tav evv } an mtv al yx tv tv_n ns_t ev ev_n ns_e dl { dd ep0 ec0 } } 
			$ dl ⊢ 
			∐ _cns◂{ { cn y } dl } . 
				$ _nil◂{} ⊢ l2 
				slv_type.f { { { mmv mev ev ns_m ns_e il } mtv tv_n tv ns_t al l2 } y } ⊢ { { { mmv mev ev ns_m ns_e il } mtv tv_n tv ns_t al l2 } k  } 
				» 0r _ ⊢ lv 
				$ yx ⊢ yx,yx0 
				##$ k ⊢ k,k0 
				$ k ⊢ k,k0 
				imp { k yx0 } ⊢ yy 
				RP.atm yy ⊢ yy 
				$ yy ⊢ yy,yy0 
				T.pnt_type_k { tv yy0 } ⊢ { tv syy }
				^ dd,ev_n,cn,syy ⊢ dd,ev_n,cn,syy,ep1 
					0'*"\t" "§ " 2' "(" 1d' ") : " 3' "\n" // 
				_inc an ⊢ an 
				slv_dt_def { { mmv mev ns_m il } { tav evv } an mtv al yx tv tv_n ns_t ev ev_n ns_e dl { dd ep0 ec0 } } ⊢ { { mmv mev ns_m il } { tav evv } an mtv al yx tv tv_n ns_t ev ev_n ns_e { dd ep0 ec0 } ac kl }  
				_dec an ⊢ an 
				$ _cns◂{ k0 kl } ⊢ kl 
				$ ac ⊢ ac,ac0 
				$ an ⊢ an,an0 
				$ yy ⊢ yy,yy0 
				k_ctr { tv_n tv an0 ac0 yy0 } ⊢ { tv_n tv k } 
				add_e { tv_n tv evv ev ev_n ns_e cn k yy } ⊢ { tv_n tv evv ev ev_n ns_e } 
				$ _cns◂{ ep1 ep0 } ⊢ ep0 
				∎ { { mmv mev ns_m il } { tav evv } an mtv al yx tv tv_n ns_t ev ev_n ns_e { dd ep0 ec0 } ac kl } 
			∐. _nil◂{} . 
				$ an ⊢ an,ac 
				$ _nil◂{} ⊢ kl 
				∎ { { mmv mev ns_m il } { tav evv } an mtv al yx tv tv_n ns_t ev ev_n ns_e { dd ep0 ec0 } ac kl }
	
		§§ slv_dt_clq 
			§ 
				@.f { q { mmv mev ev ns_m ns_e il } tav evv ev_n tx_n mtv tv_n tv ns_t { dd ep0 ec0 } }
					lp0 { q { ⟦⟧ ⟦⟧ ⟦⟧ } { mmv mev ev ns_m ns_e il } tav tx_n mtv tv_n tv ns_t } ⊢ { { l0 l1 l2 } { mmv mev ev ns_m ns_e il } tav tx_n mtv tv_n tv ns_t }
					lp0_ln { { l1 l2 } { mmv mev ev ns_m ns_e il } ev_n tx_n mtv tv_n tv ns_t { dd ep0 ec0 } } ⊢ { { mmv mev ev ns_m ns_e il } ev_n tx_n mtv tv_n tv ns_t { dd ep0 ec0 } } 
					lp0_def { l0 { mmv mev ev ns_m ns_e il } tav evv ev_n tx_n mtv tv_n tv ns_t { dd ep0 ec0 } } ⊢ { { mmv mev ev ns_m ns_e il } tav evv ev_n tx_n mtv tv_n tv ns_t { dd ep0 ec0 } }
					∎ { { mmv mev ev ns_m ns_e il } tav evv ev_n tx_n mtv tv_n tv ns_t { dd ep0 ec0 } }
				@.lp0 { q { l0 l1 l2 } { mmv mev ev ns_m ns_e il } tav tx_n mtv tv_n tv ns_t } 
					##» "slv_dt_clq.lp0" _ ⊢ sec1 
					##_emt sec1 ⊢ sec1 
					$ q ⊢ 
					∐ _cns◂{ { w d } q } . 
						$ d ⊢ 
						∐ ast.dt_def◂{ as dl } .
							$ tx_n ⊢ tx_n,x,x0 
							$ w ⊢ w,w0 
							_inc tx_n ⊢ tx_n 
							slv_args_def { mtv tv_n tv ns_t as x dl } ⊢ { mtv tv_n tv ns_t al k yx dl ql } 
							add_t { tv_n tv ns_t w k } ⊢ { tv_n tv ns_t }
							 lp0 { q { _cns◂{ { al yx dl x0 w0 ql } l0 } l1 l2 } { mmv mev ev ns_m ns_e il } tav tx_n mtv tv_n tv ns_t } ⊢| 
						∐. ast.dt_ln◂{ as y } . 
							$ w ⊢ w,w0 
							$ tv_n ⊢ tv_n,t0,t1,t2 
							_inc tv_n ⊢ tv_n 
							lp0 { q { l0 ⟦ { t1 _some◂_some◂{ w0 as y } } < l1 ⟧ ⟦ t0 < l2 ⟧ } { mmv mev ev ns_m ns_e il } tav tx_n mtv tv_n tv _cns◂{ { w _some◂t2 } ns_t } } ⊢| 
					∐. _nil◂{} .
						∎ { { l0 l1 l2 } { mmv mev ev ns_m ns_e il } tav tx_n mtv tv_n tv ns_t } 
				@.lp0_ln { { l1 l2 } { mmv mev ev ns_m ns_e il } ev_n tx_n mtv tv_n tv ns_t { dd ep0 ec0 } }  
					$ l2 ⊢ 
					∐ _cns◂{ i0 l2 } . 
						assoc { l1 i0 } ⊢ { l1 i0 o } 
						∐ o ⊢ _some◂o; o ⊢ _some◂{ w as y } . 
							$ i0 ⊢ i0,i0_0 
							slv_args_ln { { { mmv mev ev ns_m ns_e il } mtv tv_n tv ns_t as _cns◂{ { i0_0 ‹ ‹› › } l1 } } y } ⊢ { { { mmv mev ev ns_m ns_e il } mtv tv_n tv ns_t al l1 } k } 
							$ i0 ⊢ i0,i0_0 
							$ k ⊢ k,k0 
							T.pnt_type_k { tv k0 } ⊢ { tv sv } 
							^ dd,w,i0,sv ⊢ dd,w,i0,sv,ep1 
								0'*"\t" "¶ " 1' "(" 2d' ") ~ " 3' // 
							$ _cns◂{ ep1 ep0 } ⊢ ep0 
							set_tv { tv i0 var_ln◂k } ⊢ { tv i0 }
							lp0_ln { { _cns◂{ { i0_0 _none◂{} } l1 } l2 } { mmv mev ev ns_m ns_e il } ev_n tx_n mtv tv_n tv ns_t { dd ep0 ec0 } } ⊢|
						∐ o ⊢ _some◂o; o ⊢ _none◂{} . 
							» "lp0_ln 0" _ ⊢ se 
							_emt se ⊢ se 
							∎|	  
						∐. .
							lp0_ln { { l1 l2 } { mmv mev ev ns_m ns_e il } ev_n tx_n mtv tv_n tv ns_t { dd ep0 ec0 } } ⊢|
					∐. _nil◂{} . 
						∎ { { mmv mev ev ns_m ns_e il } ev_n tx_n mtv tv_n tv ns_t { dd ep0 ec0 } } 
				@.lp0_def { l0 { mmv mev ev ns_m ns_e il } tav evv ev_n tx_n mtv tv_n tv ns_t { dd ep0 ec0 } } 
					$ l0 ⊢ 
					∐ _cns◂{ { al yx dl x w ql } l0 } . 
						slv_dt_def { { mmv mev ns_m il } { tav evv } %[ 0r ] mtv al yx tv tv_n ns_t ev ev_n ns_e dl { dd ep0 ec0 } } ⊢ { { mmv mev ns_m il } { tav evv } an mtv al yx tv tv_n ns_t ev ev_n ns_e { dd ep0 ec0 } ac kl }
						set_tv { tav x { w _some◂{ ac ql kl } } } ⊢ { tav x } 
						lp0_def { l0 { mmv mev ev ns_m ns_e il } tav evv ev_n tx_n mtv tv_n tv ns_t { dd ep0 ec0 } } ⊢| 
					∐. _nil◂{} .
						∎ { { mmv mev ev ns_m ns_e il } tav evv ev_n tx_n mtv tv_n tv ns_t { dd ep0 ec0 } }	
			∎∎
	
	§§ gnr
		\[
		§§ reg_idx  
			§ r13 = 0r 
			§ r14 = 1r 
			§ r8 = 2r 
			§ r9 = 3r 
			§ r10 = 4r 
			§ r11 = 5r 
			§ rcx = 6r 
			§ rdx = 7r 
			∎∎ 
		\]
		§ op1_e # { o s e } 
			^ o,s ⊢ o,s,c 
				"\t" 0' " " 1' "\n" //
			rp8.add_s8 { e c } ⊢ e 
			∎ { o s e }
		§ push_e # { s e } 
			op1_e { %[ "push" ] s e } ⊢ { _ s e } 
			∎ { s e }
		§ pop_e # { s e } 
			op1_e { %[ "pop" ] s e } ⊢ { _ s e } 
			∎ { s e }
		§ gnr_ret # e 
			» "\tret\n" _ ⊢ sc0 
			rp8.add_s8 { e sc0 } ⊢ e 
			∎ e 
		§ call_lb # { lb e } 
			^ lb ⊢ lb,s 
				"\tcall LB_" 0d' "\n" // 
			rp8.add_s8 { e s } ⊢ e 
			∎ { lb e }
		§ lb_etr # { lb e } 
			^ lb ⊢ lb,s 
				"LB_" 0d' ":\n" // 
			rp8.add_s8 { e s } ⊢ e 
			∎ { lb e }
		§ jmp_lb # { lb e } 
			^ lb ⊢ lb,s0 
				"\tjmp LB_" 0d' "\n" // 
			rp8.add_s8 { e s0 } ⊢ e 
			∎ { lb e } 
		§ jg_lb # { lb e } 
			^ lb ⊢ lb,s0 
				"\tjg LB_" 0d' "\n" // 
			rp8.add_s8 { e s0 } ⊢ e 
			∎ { lb e } 
		§ jnz_lb # { lb e } 
			^ lb ⊢ lb,s0 
				"\tjnz LB_" 0d' "\n" // 
			rp8.add_s8 { e s0 } ⊢ e 
			∎ { lb e } 
		§ jz_lb # { lb e } 
			^ lb ⊢ lb,s0 
				"\tjz LB_" 0d' "\n" // 
			rp8.add_s8 { e s0 } ⊢ e 
			∎ { lb e } 
		§ jz_bl_lb { b lb e }
			$ b ⊢ 
			∐ bl.t◂{} . 
				jz_lb { lb e } ⊢| 
			∐. bl.f◂{} . 
				jnz_lb { lb e } ⊢|  
		§ jl_lb # { lb e } 
			^ lb ⊢ lb,s0 
				"\tjl LB_" 0d' "\n" // 
			rp8.add_s8 { e s0 } ⊢ e 
			∎ { lb e } 
		\[
		§ skip { lb_n e0 }
			$ rp8.e◂{} ⊢ e1 
			$ lb_n ⊢ lb_n,lb0 
			_inc lb_n ⊢ lb_n 
			^ lb0 ⊢ lb0,s0 
				"\tjmp LB_" 0d' "\n" // 
			rp8.add_s8 { e1 s0 } ⊢ e1 
			rp8.cct { e1 e0 } ⊢ e1 
			^ lb0 ⊢ lb0,s0 
				"LB_" 0d' ":\n" //
			rp8.add_s8 { e1 s0 } ⊢ e1 
			∎ { lb_n e1 }
		\]
		§ ret r 
			∐ r ⊢ _some◂lb . 
				^ lb ⊢ lb,s0 
					"\tjmp LB_" 0d' "\n" // 
				∎ s0 
			∐. . 
				» "\tret\n" _ ⊢ s0 
				∎ s0
		§ @.mk_jmp_tbl { lb_n n } 			 
			∐ n'=0r .
				∎| 
				\\∎ { lb_n rp8.e◂{} ⟦⟧ } 
			∐ n'=1r .
				^ lb_n ⊢ lb_n,s
					"LB_" 0d' // 
				$ lb_n ⊢ lb_n,lb0 
				_inc lb_n ⊢ lb_n  
				∎ { lb_n rp8.of_s8◂s p_end◂lb0 }
			∐. . 
				^ lb_n ⊢ lb_n,s 
					"LB_" 0d' "," //
				$ rp8.of_s8◂s ⊢ es  
				_dec n ⊢ n 
				$ lb_n ⊢ lb_n,lb0 
				_inc lb_n ⊢ lb_n 
				mk_jmp_tbl { lb_n n } ⊢ { lb_n e lbl } 
				rp8.cct { es e } ⊢ e 
				∎ { lb_n e p_cns◂{ lb0 lbl } }
		§ REG_N = 8r 
		
	
		§ c_call # e 
			^ e ⊢ e,r 				
				"\tC_CALL " 0' "\n" 
				// 
			∎ { e r }
		§ push_c_regs = "\tC_PUSH_REGS\n" 
		§ pop_c_regs = "\tC_POP_REGS\n" 
		§ mlc_s8 l 
			$ l ⊢ l,l0 
			_shr { l0 %[ 3r ] } ⊢ { l0 x0 } 
			_inc l0 ⊢ l0  
			$ l0 ⊢ l0,l1 
			_inc l0 ⊢ l0 
			_shl { l0 x0 } ⊢ { l0 _ } 
			^ l,l0 ⊢ l,_,e 
				`	mov rsi,1  
				"\tmov rdi," 1d' "\n" 
				`	xor rax,rax 
				"\tadd QWORD [S8_N]," 0d' "\n" 
				`	C_CALL_SF calloc
				"\tmov QWORD [rax]," 0d' "\n"
				//
			∎ { l e }   
		§ @.mk_s8_lp { s l i e } 
			∐ i'=l' . 
				∎ { s l e } 
			∐. . 
				_lds { s i } ⊢ { s i b } 
				^ i,b ⊢ i,b,eb 
					"\tmov BYTE [rax+8+" 0d' "]," 1d' "\n" 
					// 
				$ rp8.of_s8◂eb ⊢ eb 
				rp8.cct { e eb } ⊢ e 
				_inc i ⊢ i 
				mk_s8_lp { s l i e } ⊢| 
		§ mk_s8 s 
			_s8_len s ⊢ { s l } 
			mlc_s8 l ⊢ { l e0 } 
			$ rp8.of_s8◂e0 ⊢ e0 
			mk_s8_lp { s l %[ 0r ] e0 } ⊢ { s l e0 } 
			∎ { s e0 }
		§ @.mk_db_lp { s i l r } 
			∐ i'=l' . 
				^ r ⊢ r,e 
					0d' // 
				$ rp8.of_s8◂e ⊢ e 
				∎ { s i l r e } 
			∐. . 
				_lds { s i } ⊢ { s i b } 
				^ b ⊢ b,eb 
					0d' "," // 
				_inc i ⊢ i 
				mk_db_lp { s i l r } ⊢ { s i l r e1 } 
				$ rp8.of_s8◂eb ⊢ eb 
				rp8.cct { eb e1 } ⊢ e 
				∎ { s i l r e } 			
		§ mk_db # { s r }  
			» 0r _ ⊢ i 
			_s8_len s ⊢ { s l } 
			mk_db_lp { s i l r } ⊢ { s i l r e } 
			rp8.to_s8 e ⊢ se  
			∎ { s r se }
		§ data_s8 # { eds lb s }
			» 0r _ ⊢ r 
			mk_db { s r } ⊢ { s r se } 
			^ lb,se ⊢ lb,se,ss 
				"LB_" 0d' ": db " 1' "\n" // 
			rp8.add_s8 { eds ss } ⊢ eds 
			∎ { eds lb s } 
		
			§ mov { i0 i1 } 
				∐ i0'=i1' . 
					» "" _ ⊢ sr 
					∎ { i0 i1 sr }
				∐. . 
					^ i0,i1 ⊢ i0,i1,sr 
						"\tMOV_RBX GLX(" 1d' "),GLX(" 0d' ")\n" //
					∎ { i0 i1 sr }
			§ mov_e # { r0 r1 e } 
				mov { r0 r1 } ⊢ { r0 r1 s } 
				rp8.add_s8 { e s } ⊢ e 
				∎ { r0 r1 e } 
			
			§ r64_to_rax { evv a0 }
				ast.r64_of_rt { evv a0 } ⊢ { evv x } 
				$ x ⊢ 
				∐ ast.im_of◂x . 
					^ x ⊢ x,sc0 
						"\tmov rax," 0d' "\n" //
					∎ { evv sc0 }
				∐. ast.hp_of◂r0 . 
					^ r0 ⊢ r0,sc0 
						"\tmov rax,GLX(" 0d' ")\n" //
					∎ { evv sc0 }	
		§§ mov 
			§ idx_mem # { r0 m e0 } 
				^ r0,m ⊢ r0,m,sc0 
					"\tMOV_RAX GLX(" 0d' ")," 1' "\n" // 
				rp8.add_s8 { e0 sc0 } ⊢ e0 
				∎ { r0 m e0 }	
			§ mem_idx # { m r1 e0 } 
				^ r1,m ⊢ r1,m,sc0 
					"\tMOV_RAX " 1' ",GLX(" 0d' ")\n" // 
				rp8.add_s8 { e0 sc0 } ⊢ e0 
				∎ { m r1 e0 }
			§ idx_lea_idx_x { r0 r1 x e0 }
				^ r0,r1,x ⊢ r0,r1,x,sc0 
					"\tmov rdi,GLX(" 1d' ")\n" 
					"\tMOV_RDI GLX(" 0d' "), QWORD [rdi+" 2d' "]\n" // 
					rp8.add_s8 { e0 sc0 } ⊢ e0 
					∎ { r0 r1 x e0 }
			§ lea_rax { r x e } 
				^ r,x ⊢ r,x,sc0
					"\tmov rbx,GLX(" 0d' ")\n" 
					"\tmov QWORD [rbx+" 1d' "],rax\n" 
					// 
				rp8.add_s8 { e sc0 } ⊢ e
				∎ { r x e } 
			§ idx_S◂◂S { r0 e } 
				^ r0 ⊢ r0,sc0 
					"\tmov GLX(" 0d' ")," S "\n" // 
				rp8.add_s8 { e sc0 } ⊢ e
				∎ { r0 e }
			§ idx_rax = idx_S◂◂"rax" 
			§ S_idx◂◂S { r0 e } 
				^ r0 ⊢ r0,sc0 
					"\tmov " S ",GLX(" 0d' ")\n" // 
				rp8.add_s8 { e sc0 } ⊢ e
				∎ { r0 e }
			§ rax_idx = S_idx◂◂"rax" 
			§ rdi_idx = S_idx◂◂"rdi" 
			§ rax_im # { x e } 
				^ x ⊢ x,s
					"\tmov rax," 0d' "\n" // 
				rp8.add_s8 { e s } ⊢ e 
				∎ { x e }
		
			§ idx_unt # { r e } 
				^ r ⊢ r,sc0 
					"\tmov GLX(" 0d' "),unt\n" // 
				rp8.add_s8 { e sc0 } ⊢ e 
				∎ { r e }
			∎∎ 	
		§§ cmp 
			§ idx_idx # { r0 r1 e }
				^ r0,r1 ⊢ r0,r1,sc 
					"\tmov rdi,GLX(" 1d' ")\n" 
					"\tcmp GLX(" 0d' "),rdi\n" //
				rp8.add_s8 { e sc } ⊢ e
				∎ { r0 r1 e }
			§ idx_im # { r0 x e }
				^ r0,x ⊢ r0,x,sc 
					"\tcmp GLX(" 0d' ")," 1d' "\n" //
				rp8.add_s8 { e sc } ⊢ e
				∎ { r0 x e }   
			∎∎
		§§ lod_sgm 
				§ 
					@.atm { { e0 glv_n } a0 }
						$ a0 ⊢ 
						∐ ast.hp◂{ r0 h0 } . 
							inc_x glv_n ⊢ { i glv_n }
							^ r0,i ⊢ _,i,sc0 
								"\tMOV_RDI GLX(" 1d' "),SX(" 0d' ")\n" // 
							rp8.add_s8 { e0 sc0 } ⊢ e0 
							∎ { { e0 glv_n } ast.hp◂{ i h0 } }
						∐ ast.stt_adt◂{ ia na p0 } . 
							ptn { { e0 glv_n } p0 } ⊢ { { e0 glv_n } p0 } 
							∎ { { e0 glv_n } ast.stt_adt◂{ ia na p0 } }
						∐ ast.dyn_adt◂{ { ax al } ri rd } .
							inc_x glv_n ⊢ { i glv_n }
							^ ri,i ⊢ _,i,sc0 
								"\tMOV_RDI GLX(" 1d' "),SX(" 0d' ")\n" // 
							rp8.add_s8 { e0 sc0 } ⊢ e0 
							inc_x glv_n ⊢ { d glv_n }
							^ rd,d ⊢ _,d,sc0 
								"\tMOV_RDI GLX(" 1d' "),SX(" 0d' ")\n" // 
							rp8.add_s8 { e0 sc0 } ⊢ e0 
							∎ { { e0 glv_n } ast.dyn_adt◂{ { ax al } i d } }
						∐ ast.btm◂{} . 
							∎ { { e0 glv_n } ast.btm◂{} }
						∐. ast.hp_im◂v .
							∎ { { e0 glv_n } ast.hp_im◂v }
					@.ptn = RP.map_l◂◂atm
				∎∎
			
	§§ idx 
		§ 
			@.crt { irv d ip dl }
			$ d ⊢ 
			∐ ast.re_reg◂i . 
				hsh_tbl.r64.set { irv { i ip } } ⊢ { irv { i o } } 
				nnt o ⊢ {} 
				∎ { irv dl }
			∐ ast.re_agl◂{ _ p } . 
				∐ ip ⊢ RP.atm◂ast.stt_adt◂{ i n ip }; n'=1r .
					crt_ptn { irv p ip dl } ⊢| 
				∐. . 
					_emt %[ "crt_idx 0" ] ⊢ _ 
					∎| 
			∐. ast.re_v◂o . 
				∐ o ⊢ _some◂i . 
					$ _cns◂{ ip dl } ⊢ dl 
					∎ { irv dl }
				∐. .
					» "crt_idx_ptn 1" _ ⊢ se 
					_emt se ⊢ se  
					∎|
			@.crt_lst { irv dl ipl dll } 
			∐ dl ⊢ _cns◂{ d dl }; ipl ⊢ _cns◂{ ip ipl } . 
				crt { irv d ip dll } ⊢ { irv dll } 
				crt_lst { irv dl ipl dll } ⊢|
			∐ dl ⊢ _nil◂{}; ipl ⊢ _nil◂{} . 
				∎ { irv dll }
			∐. . 
				» "idx.crt_lst 0" _ ⊢ ee 
				_emt ee ⊢ ee 
				∎|   
			@.crt_ptn { irv rp ip dl }
				∐ rp ⊢ RP.rcd◂r . 
					∐ ip ⊢ RP.rcd◂ir . 
						crt_ptn_lst { irv r ir dl } ⊢| 
					∐. . 
						» "crt_idx_ptn 2" _ ⊢ se 
						_emt se ⊢ se  
						∎| 
				∐ rp ⊢ RP.atm◂a .  
					crt { irv a ip dl } ⊢| 
				∐. .
					» "crt_idx_ptn 0" _ ⊢ se 
					_emt se ⊢ se 
					∎| 
			@.crt_ptn_lst { irv r ir dl } 
				∐ r ⊢ _cns◂{ p r }; ir ⊢ _cns◂{ ip ir } . 
					crt_ptn { irv p ip dl } ⊢ { irv dl }  
					crt_ptn_lst { irv r ir dl } ⊢|
				∐ r ⊢ _nil◂{}; ir ⊢ _nil◂{} . 
					∎ { irv dl } 
				∐. . 
					» "crt_idx_ptn_lst 0" _ ⊢ se 
					_emt se ⊢ se 
					∎| 
		§
			@.asc_ply { { evv irv av } { xp sp } } 
				∐ xp ⊢ RP.rcd◂l0; sp ⊢ RP.rcd◂l1 . 
					asc_ply_lst { { evv irv av } { l0 l1 } } ⊢|
				∐ xp ⊢ RP.atm◂i0 .  
					set_tv { av i0 sp } ⊢ { av i0 } 
					∎ { evv irv av } 
				∐. . 
					_emt %[ "asc_ply 0" ] ⊢ _ 
					∎| 
			@.asc_ply_lst { { evv irv av } { l0 l1 } }
				∐ l0 ⊢ _cns◂{ xp l0 }; l1 ⊢ _cns◂{ sp l1 } . 
					asc_ply { { evv irv av } { xp sp } } ⊢ { evv irv av }
					asc_ply_lst { { evv irv av } { l0 l1 } } ⊢| 
				∐ l0 ⊢ _nil◂{}; l1 ⊢ _nil◂{} . 
					∎ { evv irv av }
				∐. . 
					∎| 
		§ 
			@.subst_ply = RP.map_l_atm◂◂subst_ply_atm
			@.subst_ply_atm { { evv irv av } a }
				$ a ⊢ 
				∐ ast.re_reg◂i . 
					lod_tv { av i } ⊢ { av i sp } 
					∎ { { evv irv av } sp } 
				∐ ast.re_agl◂{ e sp } . 
					subst_ply { { evv irv av } sp } ⊢ { { evv irv av } sp } 
					∎ { { evv irv av } RP.atm◂ast.re_agl◂{ e sp } } 
				∐. ast.re_v◂c . 
					∎ { { evv irv av } RP.atm◂ast.re_v◂c }
		§ 
			@.evl_ctr = RP.map_l_atm◂◂evl_ctr_atm 
			@.evl_ctr_atm { { evv irv } a }
				∐ a ⊢ ast.re_agl◂{ e sp } .
					evl_ctr { { evv irv } sp } ⊢ { { evv irv } sp } 
					lod_tv { evv e } ⊢ { evv e k } 
					∐ k ⊢ ast.k_ctr◂c . 
						∎ { { evv irv } RP.atm◂ast.re_agl◂{ e sp } } 
					∐ k ⊢ ast.k_name◂i . 
						lod_tv { evv i } ⊢ { evv i c } 
						evl_ctr_atm { { evv irv } ast.re_agl◂{ i sp } } ⊢| 
					∐ k ⊢ ast.k_ply◂{ xp yp v } . 
						mk_arr { %[ 64r ] _none◂{} } ⊢ { _ _ av } 
						asc_ply { { evv irv av } { xp sp } } ⊢ { evv irv av }
						subst_ply { { evv irv av } yp } ⊢ { { evv irv av } yp } 
						evl_ctr { { evv irv } yp } ⊢ { { evv irv } yp } 
						∎ { { evv irv } yp }
					∐. . 
						_emt %[ "evl_ctr 0" ] ⊢ _ 
						∎|
				∐. . 
					∎ { { evv irv } RP.atm◂a } 

		§ 
			@.csm { { evv irv } s } 
				$ s ⊢ 
				∐ ast.re_v◂c . 
					∎ { { evv irv } RP.atm◂ast.hp_im◂c }
				∐ ast.re_agl◂{ e sp } . 
					csm_ptn { { evv irv } sp } ⊢ { { evv irv } ip } 
					lod_tv { evv e } ⊢ { evv e k1 } 
					ast.ctr_of_k { evv k1 } ⊢ { evv { ia1 na1 vi } }	
					∎ { { evv irv } RP.atm◂ast.stt_adt◂{ ia1 na1 ip } }
				∐. ast.re_reg◂r . 
					hsh_tbl.r64.get { irv r } ⊢ { irv { r o } } 
					smt_err◂◂"csm:re_reg" o ⊢ ip 
					∎ { { evv irv } ip } 
			@.csm_ptn = RP.map_l_atm◂◂csm
		§ csm_lst = lst.map_l◂◂csm
		§ csm_ptn_lst = lst.map_l◂◂csm_ptn
		§ csm # { { evv irv } s } 
			evl_ctr_atm { { evv irv } s } ⊢ { { evv irv } s } 
			csm_ptn { { evv irv } s } ⊢| 
		§ csm_ptn # { { evv irv } p } 
			evl_ctr { { evv irv } p } ⊢ { { evv irv } p } 
			csm_ptn { { evv irv } p } ⊢| 
		
		∎∎
		§ 
			@.subst_atm = ast.map_l_rt_reg_atm◂◂subst
			@.subst_ptn = RP.map_l◂◂subst_atm 
		§ subst_ptn_lst = lst.map_l◂◂subst_ptn 
			§§ mov_ptn2 
				§ 
					@.alc_atm { { e0 glv_n } a0 }
						$ a0 ⊢ 
						∐ ast.hp◂{ r0 h0 } . 
							inc_x glv_n ⊢ { i glv_n }
							mov_e { r0 i e0 } ⊢ { r0 i e0 } 
							∎ { { e0 glv_n } ast.hp◂{ i h0 } }
						∐ ast.stt_adt◂{ ia na p0 } . 
							alc_ptn { { e0 glv_n } p0 } ⊢ { { e0 glv_n } p0 } 
							∎ { { e0 glv_n } ast.stt_adt◂{ ia na p0 } }
						∐ ast.dyn_adt◂{ { ax al } ri rd } . 
							inc_x glv_n ⊢ { i glv_n }
							mov_e { ri i e0 } ⊢ { ri i e0 } 
							inc_x glv_n ⊢ { d glv_n }
							mov_e { rd d e0 } ⊢ { rd d e0 } 
							∎ { { e0 glv_n } ast.dyn_adt◂{ { ax al } i d } }
						∐ ast.btm◂{} . 
							∎ { { e0 glv_n } ast.btm◂{} }
						∐. ast.hp_im◂v .
							∎ { { e0 glv_n } ast.hp_im◂v }
					@.alc_ptn = RP.map_l◂◂alc_atm
				§  	
					@.im_to_rax { e0 { evv tav tv_n tv eds } glv_n c0 }
						∐ c0 ⊢ast.k_name◂i . 
							lod_tv { evv i } ⊢ { evv _ c0 } 
							im_to_rax { e0 { evv tav tv_n tv eds } glv_n c0 } ⊢|
						∐ c0 ⊢ ast.k_s8◂s0 . 
							mk_s8 s0 ⊢ { _ es } 
							rp8.cct { e0 es } ⊢ e0 
							∎ { e0 { evv tav tv_n tv eds } glv_n }
						∐ c0 ⊢ ast.k_r64◂x0 . 
							mov.rax_im { x0 e0 } ⊢ { _ e0 }
							∎ { e0 { evv tav tv_n tv eds } glv_n }  
						∐. . 
							∎|
					@.ptn_to_rax { e0 { evv tav tv_n tv eds } glv_n p0 }
						$ p0 ⊢ 
						∐ RP.atm◂a0 . 
							∐ a0 ⊢ ast.hp◂{ r0 _ } . 
								mov.rax_idx { r0 e0 } ⊢ { _ e0 } 
								∎ { e0 { evv tav tv_n tv eds } glv_n }
							∐ a0 ⊢ ast.hp_im◂c0 . 
								im_to_rax { e0 { evv tav tv_n tv eds } glv_n c0 } ⊢|
							∐. . 
								∎| 
						∐. RP.rcd◂_ . 
							∎| 
					@.im_to_atm { e0 { evv tav tv_n tv eds } glv_n c0 a1 }
						$ a1 ⊢ 
						∐ ast.hp◂{ r1 _ } . 
							im_to_rax { e0 { evv tav tv_n tv eds } glv_n c0 } ⊢ { e0 { evv tav tv_n tv eds } glv_n }
							^ r1 ⊢ _,sc0 
								"\tmov GLX(" 0d' "),rax\n" // 
							rp8.add_s8 { e0 sc0 } ⊢ e0 
							∎ { e0 { evv tav tv_n tv eds } glv_n }
						∐ ast.btm◂{} . 
							∎| 
						∐ ast.hp_im◂ _ . 
							∎|
						∐ ast.stt_adt◂{ ia1 na1 pa1 } . 
							ast.agl_of_cst { evv c0 } ⊢ { evv { ia0 na0 _ c0 } }
							∐ ia0'=ia1' . 
								RP.atm_a pa1 ⊢ pa1 
								RP.atm_a c0 ⊢ c0 
								im_to_atm { e0 { evv tav tv_n tv eds } glv_n c0 pa1 } ⊢|  
							∐. . 
								∎|
						∐. ast.dyn_adt◂{ { ax al } ri rd } .
							ast.agl_of_cst { evv c0 } ⊢ { evv { ia0 na0 _ c0 } }
							RP.atm_a c0 ⊢ c0 
							lod_tv { tav ax } ⊢ { tav ax { aw1 o1 } } 
							smt_err◂◂"dyn_adt D0" o1 ⊢ { _ vl1 kl1 }  
							$ ia0 ⊢ ia0,ia00
							lst.prj { kl1 ia00 } ⊢ k1 
							T.iug_axm_i { tv_n tv vl1 k1 al } ⊢ { tv_n tv k1 }  
							alc_type_k.hp { { tv_n tv } k1 } ⊢ { { tv_n tv } ip1 }
							$ ip1 ⊢ ip1,ip10 
							^ ri,ia0 ⊢ _,_,sc0 
								"\tmov GLX(" 0d' ")," 1d' "\n" //
							rp8.add_s8 { e0 sc0 } ⊢ e0 
							$ ip1 ⊢ 
							∐ ast.hp.sgm◂y0 . 
								$ y0 ⊢ y0,y0_0 
								alc_type_k.f_i { tav tv_n tv %[ 0r ] y0 } ⊢ { tav tv_n tv c_n pa1 }							
								∐ c_n'=0r .
									^ rd ⊢ _,s0 
										"\tmov GLX(" 0d' "),unt\n" //
									rp8.add_s8 { e0 s0 } ⊢ e0 
									∎ { e0 { evv tav tv_n tv eds } glv_n }									
								∐. . 
									^ rd,c_n ⊢ _,_,ec1 
										"\tALC_RCD " 1d' ", rax\n" 
										"\tmov GLX(" 0d' "),rax\n" 
										`	push DST_REG 
										`	lea DST_REG,[rax+8]
										//
									rp8.add_s8 { e0 ec1 } ⊢ e0 
									RP.atm_a pa1 ⊢ a1 
									im_to_atm { e0 { evv tav tv_n tv eds } glv_n c0 a1 } ⊢ { e0 { evv tav tv_n tv eds } glv_n }
									rp8.add_s8 { e0 %[ "\tpop DST_REG\n" ] } ⊢ e0 
									∎ { e0 { evv tav tv_n tv eds } glv_n }
							∐ ast.hp.hp◂_ . 
								im_to_rax { e0 { evv tav tv_n tv eds } glv_n c0 } ⊢ { e0 { evv tav tv_n tv eds } glv_n }
								^ rd ⊢ _,sc0 
									"\tmov GLX(" 0d' "),rax\n" // 
								rp8.add_s8 { e0 sc0 } ⊢ e0 
								∎ { e0 { evv tav tv_n tv eds } glv_n }
							∐. ast.hp.btm◂{} . 
								rp8.add_s8 { e0 %[ "\tRT_ERR 0xffff_f137\n" ] } ⊢ e0 
								∎ { e0 { evv tav tv_n tv eds } glv_n }	
					@.im_to_sgm_atm { e0 { evv tav tv_n tv eds } glv_n c0 a1 }
						$ a1 ⊢ 
						∐ ast.hp◂{ r1 _ } . 
							im_to_rax { e0 { evv tav tv_n tv eds } glv_n c0 } ⊢ { e0 { evv tav tv_n tv eds } glv_n }
							^ r1 ⊢ _,sc0 
								"\tmov DX(" 0d' "),rax\n" // 
							rp8.add_s8 { e0 sc0 } ⊢ e0 
							∎ { e0 { evv tav tv_n tv eds } glv_n }
						∐ ast.hp_im◂ _ . 
							∎|
						∐ ast.btm◂{} . 
							∎| 
						∐ ast.stt_adt◂{ ia1 na1 pa1 } . 
							ast.agl_of_cst { evv c0 } ⊢ { evv { ia0 na0 _ c0 } }
							∐ ia0'=ia1' . 
								RP.atm_a pa1 ⊢ pa1 
								RP.atm_a c0 ⊢ c0 
								im_to_sgm_atm { e0 { evv tav tv_n tv eds } glv_n c0 pa1 } ⊢|  
							∐. . 
								∎|
						∐. ast.dyn_adt◂{ { ax al } ri rd } .
							ast.agl_of_cst { evv c0 } ⊢ { evv { ia0 na0 _ c0 } }
							RP.atm_a c0 ⊢ c0 
							lod_tv { tav ax } ⊢ { tav ax { aw1 o1 } } 
							smt_err◂◂"dyn_adt D1" o1 ⊢ { _ vl1 kl1 }  
							$ ia0 ⊢ ia0,ia00
							lst.prj { kl1 ia00 } ⊢ k1 
							T.iug_axm_i { tv_n tv vl1 k1 al } ⊢ { tv_n tv k1 }  
							alc_type_k.hp { { tv_n tv } k1 } ⊢ { { tv_n tv } ip1 }
							$ ip1 ⊢ ip1,ip10 
							^ ri,ia0 ⊢ _,_,sc0 
								"\tmov DX(" 0d' ")," 1d' "\n" //
							rp8.add_s8 { e0 sc0 } ⊢ e0 
							$ ip1 ⊢ 
							∐ ast.hp.sgm◂y0 . 
								$ y0 ⊢ y0,y0_0 
								alc_type_k.f_i { tav tv_n tv %[ 0r ] y0 } ⊢ { tav tv_n tv c_n pa1 }							
								∐ c_n'=0r .
									^ rd ⊢ _,s0 
										"\tmov DX(" 0d' "),unt\n" //
									rp8.add_s8 { e0 s0 } ⊢ e0 
									∎ { e0 { evv tav tv_n tv eds } glv_n }									
								∐. . 
									^ rd,c_n ⊢ _,_,ec1 
										"\tALC_RCD " 1d' ", rax\n" 
										"\tmov DX(" 0d' "),rax\n" 
										`	push DST_REG 
										`	lea DST_REG,[rax+8]
										//
									rp8.add_s8 { e0 ec1 } ⊢ e0 
									RP.atm_a pa1 ⊢ a1 
									\\RP.atm_a c0 ⊢ c0 
									im_to_sgm_atm { e0 { evv tav tv_n tv eds } glv_n c0 a1 } ⊢ { e0 { evv tav tv_n tv eds } glv_n }
									rp8.add_s8 { e0 %[ "\tpop DST_REG\n" ] } ⊢ e0 
									∎ { e0 { evv tav tv_n tv eds } glv_n }
							∐ ast.hp.hp◂_ . 
								im_to_rax { e0 { evv tav tv_n tv eds } glv_n c0 } ⊢ { e0 { evv tav tv_n tv eds } glv_n }
								^ rd ⊢ _,sc0 
									"\tmov DX(" 0d' "),rax\n" // 
								rp8.add_s8 { e0 sc0 } ⊢ e0 
								∎ { e0 { evv tav tv_n tv eds } glv_n }
							∐. ast.hp.btm◂{} . 
								rp8.add_s8 { e0 %[ "\tRT_ERR 0xffff_f137\n" ] } ⊢ e0 
								∎ { e0 { evv tav tv_n tv eds } glv_n }
							
					@.ptn { e0 { evv tav tv_n tv eds } glv_n p0 p1 } 
						∐ p0 ⊢ RP.rcd◂l0; p1 ⊢ RP.rcd◂l1 . 
							ptn_lst { e0 { evv tav tv_n tv eds } glv_n l0 l1 } ⊢| 								
						∐ p0 ⊢ RP.atm◂a0; p1 ⊢ RP.atm◂a1 .
							∐ a0 ⊢ ast.hp_im◂c0 . 
								im_to_atm { e0 { evv tav tv_n tv eds } glv_n c0 a1 } ⊢|  								
							∐ a0 ⊢ ast.btm◂{} . 
								rp8.add_s8 { e0 %[ "\tRT_ERR 0xffff_f137\n" ] } ⊢ e0 
								∎ { e0 { evv tav tv_n tv eds } glv_n }
							∐ a0 ⊢ ast.hp◂{ r0 h0 }; a1 ⊢ ast.hp◂{ r1 h1 } . 
								mov_e { r0 r1 e0 } ⊢ { _ _ e0 } 
								∎ { e0 { evv tav tv_n tv eds } glv_n }
							∐ a0 ⊢ ast.stt_adt◂{ ia0 na0 pa0 }; a1 ⊢ ast.stt_adt◂{ ia1 na1 pa1 }; ia0'=ia1' .
								ptn { e0 { evv tav tv_n tv eds } glv_n pa0 pa1 } ⊢| 			 								
							∐ a0 ⊢ ast.stt_adt◂{ ia0 na0 pa0 }; a1 ⊢ ast.dyn_adt◂{ { ax al } ri rd } .
								lod_tv { tav ax } ⊢ { tav ax { aw1 o1 } } 
								smt_err◂◂"dyn_adt D2" o1 ⊢ { _ vl1 kl1 }  
								$ ia0 ⊢ ia0,ia00
								lst.prj { kl1 ia00 } ⊢ k1 
								T.iug_axm_i { tv_n tv vl1 k1 al } ⊢ { tv_n tv k1 }  
								alc_type_k.hp { { tv_n tv } k1 } ⊢ { { tv_n tv } ip1 }
								$ ip1 ⊢ ip1,ip10 
								^ ri,ia0 ⊢ _,_,sc0 
									"\tmov GLX(" 0d' ")," 1d' "\n" //
								rp8.add_s8 { e0 sc0 } ⊢ e0 
								$ ip1 ⊢ 
								∐ ast.hp.btm◂{} . 
									rp8.add_s8 { e0 %[ "\tRT_ERR 0xffff_e137\n" ] } ⊢ e0 
								∎ { e0 { evv tav tv_n tv eds } glv_n }
								∐ ast.hp.sgm◂y0 . 
									$ y0 ⊢ y0,y0_0 
									alc_type_k.f_i { tav tv_n tv %[ 0r ] y0 } ⊢ { tav tv_n tv c_n pa1 }							
									∐ c_n'=0r .
										^ rd ⊢ _,s0 
											"\tmov GLX(" 0d' "),unt\n" //
										rp8.add_s8 { e0 s0 } ⊢ e0 
										∎ { e0 { evv tav tv_n tv eds } glv_n }									
									∐. . 
										^ rd,c_n ⊢ _,_,ec1 
											"\tALC_RCD " 1d' ", rax\n" 
											"\tmov GLX(" 0d' "),rax\n" 
											`	push DST_REG 
											`	lea DST_REG,[rax+8]
											//
										rp8.add_s8 { e0 ec1 } ⊢ e0 
										to_sgm_ptn { e0 { evv tav tv_n tv eds } glv_n pa0 pa1 } ⊢ { e0 { evv tav tv_n tv eds } glv_n }
										rp8.add_s8 { e0 %[ "\tpop DST_REG\n" ] } ⊢ e0 
										∎ { e0 { evv tav tv_n tv eds } glv_n }
								∐. ast.hp.hp◂_ . 
									ptn_to_rax { e0 { evv tav tv_n tv eds } glv_n pa0 } ⊢ { e0 { evv tav tv_n tv eds } glv_n } 
									^ rd ⊢ _,sc0 
										"\tmov GLX(" 0d' "),rax\n" //
									rp8.add_s8 { e0 sc0 } ⊢ e0 
									∎ { e0 { evv tav tv_n tv eds } glv_n }
							∐ a0 ⊢ ast.dyn_adt◂{ _ ri0 rd0 }; a1 ⊢ ast.dyn_adt◂{ _ ri1 rd1 } .
								mov_e { ri0 ri1 e0 } ⊢ { _ _ e0 } 
								mov_e { rd0 rd1 e0 } ⊢ { _ _ e0 } 
								∎ { e0 { evv tav tv_n tv eds } glv_n }
							∐. .
								_emt %[ "mov_ptn2.ptn E0" ] ⊢ _ 
								∎|
						∐. . 
							rp8.add_s8 { e0 %[ "\tRT_ERR 0xffff_c137\n" ] } ⊢ e0 
							∎ { e0 { evv tav tv_n tv eds } glv_n }
					@.to_sgm_ptn { e0 { evv tav tv_n tv eds } glv_n p0 p1 } 
						∐ p0 ⊢ RP.rcd◂l0; p1 ⊢ RP.rcd◂l1 . 
							to_sgm_ptn_lst { e0 { evv tav tv_n tv eds } glv_n l0 l1 } ⊢| 								
						∐ p0 ⊢ RP.atm◂a0; p1 ⊢ RP.atm◂a1 .
							∐ a0 ⊢ ast.hp_im◂c0 . 
								im_to_sgm_atm { e0 { evv tav tv_n tv eds } glv_n c0 a1 } ⊢|  								
							∐ a0 ⊢ ast.btm◂{} . 
								rp8.add_s8 { e0 %[ "\tRT_ERR 0xffff_f137\n" ] } ⊢ e0 
								∎ { e0 { evv tav tv_n tv eds } glv_n }
							∐ a0 ⊢ ast.hp◂{ r0 h0 }; a1 ⊢ ast.hp◂{ r1 h1 } . 
								^ r0,r1 ⊢ _,_,sc0 
									"\tMOV_RDI DX(" 1d' "),GLX(" 0d' ")\n" // 
								rp8.add_s8 { e0 sc0 } ⊢ e0 
								\\mov_e { r0 r1 e0 } ⊢ { _ _ e0 } 
								∎ { e0 { evv tav tv_n tv eds } glv_n }
							∐ a0 ⊢ ast.stt_adt◂{ ia0 na0 pa0 }; a1 ⊢ ast.stt_adt◂{ ia1 na1 pa1 }; ia0'=ia1' .
								to_sgm_ptn { e0 { evv tav tv_n tv eds } glv_n pa0 pa1 } ⊢| 			 								
							∐ a0 ⊢ ast.stt_adt◂{ ia na pa }; a1 ⊢ ast.dyn_adt◂{ { ax al } ri rd } .
								lod_tv { tav ax } ⊢ { tav ax { aw1 o1 } } 
								smt_err◂◂"dyn_adt D4" o1 ⊢ { _ vl1 kl1 }  
								$ ia ⊢ ia0,ia00
								lst.prj { kl1 ia00 } ⊢ k1 
								T.iug_axm_i { tv_n tv vl1 k1 al } ⊢ { tv_n tv k1 }  
								alc_type_k.hp { { tv_n tv } k1 } ⊢ { { tv_n tv } ip1 }
								$ ip1 ⊢ ip1,ip10 
								^ ri,ia0 ⊢ _,_,sc0 
									"\tmov DX(" 0d' ")," 1d' "\n" //
								rp8.add_s8 { e0 sc0 } ⊢ e0 
								$ ip1 ⊢ 
								∐ ast.hp.btm◂{} . 
									_emt %[ "hp.btm D2" ] ⊢ _ 
									∎| 
								∐ ast.hp.sgm◂y0 . 
									$ y0 ⊢ y0,y0_0 
									alc_type_k.f_i { tav tv_n tv %[ 0r ] y0 } ⊢ { tav tv_n tv c_n pa1 }							
									∐ c_n'=0r .
										^ rd ⊢ _,s0 
											"\tmov DX(" 0d' "),unt\n" //
										rp8.add_s8 { e0 s0 } ⊢ e0 
										∎ { e0 { evv tav tv_n tv eds } glv_n }									
									∐. . 
										^ rd,c_n ⊢ _,_,ec1 
											"\tALC_RCD " 1d' ", rax\n" 
											"\tmov DX(" 0d' "),rax\n" 
											`	push DST_REG 
											`	lea DST_REG,[rax+8]
											//
										rp8.add_s8 { e0 ec1 } ⊢ e0 
										to_sgm_ptn { e0 { evv tav tv_n tv eds } glv_n pa pa1 } ⊢ { e0 { evv tav tv_n tv eds } glv_n }
										rp8.add_s8 { e0 %[ "\tpop DST_REG\n" ] } ⊢ e0 
										∎ { e0 { evv tav tv_n tv eds } glv_n }
								∐. ast.hp.hp◂_ . 
									ptn_to_rax { e0 { evv tav tv_n tv eds } glv_n pa } ⊢ { e0 { evv tav tv_n tv eds } glv_n } 
									^ rd ⊢ _,sc0 
										"\tmov DX(" 0d' "),rax\n" //
									rp8.add_s8 { e0 sc0 } ⊢ e0 
									∎ { e0 { evv tav tv_n tv eds } glv_n }
							∐ a0 ⊢ ast.dyn_adt◂{ _ ri0 rd0 }; a1 ⊢ ast.dyn_adt◂{ _ ri1 rd1 } .
								^ ri0,ri1,rd0,rd1 ⊢ _,_,_,_,sc0 
									"\tMOV_RDI DX(" 1d' "),GLX(" 0d' ")\n" 
									"\tMOV_RDI DX(" 3d' "),GLX(" 2d' ")\n" // 
								rp8.add_s8 { e0 sc0 } ⊢ e0 
								∎ { e0 { evv tav tv_n tv eds } glv_n }
							∐. .
								_emt %[ "mov_ptn2.ptn E0" ] ⊢ _ 
								∎|
						∐. . 
							_emt %[ "mov_ptn2.ptn E1" ] ⊢ _ 
							∎|
					@.to_sgm_ptn_lst { e0 { evv tav tv_n tv eds } glv_n l0 l1 }
						∐ l0 ⊢ _cns◂{ p0 l0 }; l1 ⊢ _cns◂{ p1 l1 } . 
							to_sgm_ptn { e0 { evv tav tv_n tv eds } glv_n p0 p1 } ⊢ { e0 { evv tav tv_n tv eds } glv_n }
							to_sgm_ptn_lst { e0 { evv tav tv_n tv eds } glv_n l0 l1 } ⊢|			
						∐ l0 ⊢ _nil◂{}; l1 ⊢ _nil◂{} . 
							∎ { e0 { evv tav tv_n tv eds } glv_n } 
						∐. . 
							» "to_sgm_ptn_lst 0" _ ⊢ se 
							_emt se ⊢ se 
							∎| 
					@.ptn_lst { e0 { evv tav tv_n tv eds } glv_n l0 l1 }
						∐ l0 ⊢ _cns◂{ p0 l0 }; l1 ⊢ _cns◂{ p1 l1 } . 
							ptn { e0 { evv tav tv_n tv eds } glv_n p0 p1 } ⊢ { e0 { evv tav tv_n tv eds } glv_n }
							ptn_lst { e0 { evv tav tv_n tv eds } glv_n l0 l1 } ⊢|			
						∐ l0 ⊢ _nil◂{}; l1 ⊢ _nil◂{} . 
							∎ { e0 { evv tav tv_n tv eds } glv_n } 
						∐. . 
							» "lp1_lst 0" _ ⊢ se 
							_emt se ⊢ se 
							∎| 							
				∎∎
			
			§ shft { n i } 
				∐ REG_N=<i'. 
					_add { i n } ⊢ { i n } 
					∎ { n i } 
				∐. . 
					∎ { n i }
			
			§ 
				@.shft_atm = ast.map_l_rt_reg_atm◂◂shft 
				@.shft_ptn = RP.map_l◂◂shft_atm 
			§ shft_ptn_lst = lst.map_l◂◂shft_ptn 
			
			§§ pop_regs 
				§ exh_i # { { i e } j }
					mov { i j } ⊢ { i j s } 
					rp8.add_s8 { e s } ⊢ e 
					_inc i ⊢ i 
					∎ { i e }
				§ exh # { n l } 
					lst.fld_l◂◂exh_i { { n rp8.e◂{} } l } ⊢| 
				∎∎
		
			§ @.pnt_env_i # { { evv e0 } { i p } }  
				ast.pnt.rt { evv p } ⊢ { evv sp } 
				^ i,sp ⊢ i,sp,sr 
						"%" 0d' "~" 1' // 
				rp8.add_s8 { e0 sr } ⊢ e0 
				∎ { evv e0 }
			§ pnt_env # { evv irv } 
				rp8.add_s8 { rp8.e◂{} %[ ";; " ] } ⊢ e0 
				hsh_tbl.itr◂◂pnt_env_i { irv { evv e0 } } ⊢ { irv { evv e0 } } 
				rp8.add_s8 { %e0 %[ "\n" ] } ⊢ e0 
				rp8.to_s8 e0 ⊢ sr  
				∎ { evv irv sr } 
			§§ adp 
				§ @.f_ll { tv l0 ll } 
					$ ll ⊢ 
					∐ _cns◂{ { l1 lb } ll } . 
						T.cmp_t.eqv_lst { tv l0 l1 } ⊢ { tv l0 l1 b } 
						∐ b ⊢ bl.t◂{} . 
							$ lb ⊢ lb,lb0 
							∎ { tv l0 ⟦ { l1 lb } < ll ⟧ ‹ lb0 › }
						∐. . 
							f_ll { tv l0 ll } ⊢ { tv l0 ll o0 } 
							∎ { tv l0 ⟦ { l1 lb } < ll ⟧ o0 }
					∐. _nil◂{} . 
						∎ { tv l0 ⟦⟧ ‹› }					
				§ adt_call { ahl fl tv lb_n e0 { ax0 l0 } }
					\\$ ax0 ⊢ ax0,ax00 
					$ l0 ⊢ l0,l00 
					T.pnt_type_k_lst { tv l00 } ⊢ { tv s0 } 
					^ ax0,s0 ⊢ ax0,_,sx0 
						"; .adt_call t" 0d' " : " 1' "\n" // 
					rp8.add_s8 { e0 sx0 } ⊢ e0  
					\\$ l0 ⊢ l0,l00 
					\\find_axm.f { ahl tv { ax00 l00 } } ⊢ { ahl tv ph0 o } 
					hsh_tbl.r64.get { ahl ax0 } ⊢ { ahl { ax0 ll } } 
					$ ll ⊢ 
					∐ _some◂ll . 
						f_ll { tv l0 ll } ⊢ { tv l0 ll o }
						$ o ⊢ 
						∐ _some◂lb0 . 
							call_lb { lb0 e0 } ⊢ { _ e0 }
							hsh_tbl.r64.set { ahl { ax0 ll } } ⊢ { ahl { ax0 _ } } 
							∎ { ahl fl tv lb_n e0 }
						∐. _none◂{} . 
								inc_x lb_n ⊢ { lb0 lb_n } 
							call_lb { lb0 e0 } ⊢ { lb0 e0 }
							$ l0 ⊢ l0,l00 
							$ lb0 ⊢ lb0,lb00 
							hsh_tbl.r64.set { ahl { ax0 ⟦ { l00 lb00 } < ll ⟧ } } ⊢ { ahl { ax0 _ } } 
							∎ { ahl _cns◂{ { ax0 l0 lb0 } fl } tv lb_n e0 }
					∐. _none◂{} . 
						inc_x lb_n ⊢ { lb0 lb_n } 
						call_lb { lb0 e0 } ⊢ { lb0 e0 }
						$ l0 ⊢ l0,l00 
						$ lb0 ⊢ lb0,lb00 
						hsh_tbl.r64.set { ahl { ax0 ⟦ { l00 lb00 } ⟧ } } ⊢ { ahl { ax0 _ } } 
						∎ { ahl _cns◂{ { ax0 l0 lb0 } fl } tv lb_n e0 }
						\[
						\]
						\\∎|
				§ 
					@.adt◂◂ADT_HP { ahl fl ax0 l0 tv_n tv tav evv lb_n glv_n { eds e0 } } 
						lod_tv { tav ax0 } ⊢ { tav ax0 { w0 o0 } } 
						∐ o0 ⊢ _some◂{ _ lx0 lx1 } .
							T.iug_axm { tv_n tv lx0 lx1 l0 } ⊢ { tv_n tv lx1 } 
							$ lx1 ⊢ lx1,lx1_0 
							T.pnt_type_k_lst { tv lx1_0 } ⊢ { tv sx0 } 
							alc_type_k.hp_lst { { tv_n tv } lx1 } ⊢ { { tv_n tv } pl0 }
							lst.len pl0 ⊢ { pl0 n } 
							mk_jmp_tbl { lb_n n } ⊢ { lb_n ej lbl } 
							rp8.to_s8 ej ⊢ sj 
							inc_x lb_n ⊢ { lb0 lb_n }
							inc_x lb_n ⊢ { lb1 lb_n }
							^ lb0,sj,sx0 ⊢ lb0,sj,_,s0  
								"\tjmp QWORD [LB_" 0d' "+8*r10]\n"
								" ; " 2' "\n" 
								"LB_" 0d' ": dq " 1' "\n" //
							rp8.add_s8 { e0 s0 } ⊢ e0 
							ADT_HP { ahl fl %[ 0r ] tv_n tv tav evv pl0 lbl lb1 lb_n glv_n { eds e0 } } ⊢ { ahl fl tv_n tv tav evv lb1 lb_n glv_n { eds e0 } }
							^ lb1 ⊢ lb1,s0 
								"LB_" 0d' ":\n"
								"\tret\n" //
							rp8.add_s8 { e0 s0 } ⊢ e0   
							∎ { ahl fl tv_n tv tav evv lb_n glv_n { eds e0 } }
						∐. . 
							_emt ax0 ⊢ _ 
							» "emt x2" _ ⊢ ee 
									_emt ee ⊢ ee 
							∎|   
					@.adt_lp◂◂ADT { ahl fl tv_n tv tav evv lb_n glv_n { eds e0 } }
						∐ fl ⊢ _cns◂{ { ax0 tl0 lb0 } fl } . 
							$ tl0 ⊢ tl0,tl0_0 
							T.pnt_type_k_lst { tv tl0_0 } ⊢ { tv st0 } 
							^ lb0,st0 ⊢ lb0,_,se 
								"LB_" 0d' ": ;; " 1' "\n" // 
							rp8.add_s8 { e0 se } ⊢ e0 
							ADT { ahl fl ax0 tl0 tv_n tv tav evv lb_n glv_n { eds e0 } } ⊢ { ahl fl tv_n tv tav evv lb_n glv_n { eds e0 } }
							adt_lp◂◂ADT { ahl fl tv_n tv tav evv lb_n glv_n { eds e0 } } ⊢| 
						∐. . 
							∎ { ahl tv_n tv tav evv lb_n glv_n { eds e0 } }
				∎∎
			§§ dlt 
				§ 
					@.sgm_ptn { ahl fl tv_n tv tav evv lb_n glv_n is0 { eds e0 } } 
						$ is0 ⊢ 
						∐ RP.rcd◂l0 . 
							sgm_ptn_lst { ahl fl tv_n tv tav evv lb_n glv_n l0 { eds e0 } } ⊢|
						∐. RP.atm◂k0 . 
							$ k0 ⊢ 
							∐ ast.hp◂{ r h } . 
								∐ h ⊢ ast.hp.r64◂{} . 
									∎ { ahl fl tv_n tv tav evv lb_n glv_n { eds e0 } } 								
								∐. . 
									^ r ⊢ r,s0 
										"\tmov r8,SX(" 0d' ")\n"
										//		
									rp8.add_s8 { e0 s0 } ⊢ e0 
									hp { ahl fl tv_n tv tav evv lb_n glv_n h { eds e0 } } ⊢ { ahl fl tv_n tv tav evv lb_n glv_n { eds e0 } } 
									∎ { ahl fl tv_n tv tav evv lb_n glv_n { eds e0 } } 								
							∐ ast.hp_im◂_ . 
								∎ { ahl fl tv_n tv tav evv lb_n glv_n { eds e0 } }
							∐ ast.btm◂{} . 
								rp8.add_s8 { e0 %[ "\tRT_ERR 0xffff_0037\n" ] } ⊢ e0 
								∎ { ahl fl tv_n tv tav evv lb_n glv_n { eds e0 } }
							∐ ast.dyn_adt◂{ { ax al } ri rd } . 
								^ ri,rd ⊢ _,_,s0 
									\\push_c_regs
									"\tmov r10,SX(" 0d' ")\n"
									"\tmov r8,SX(" 1d' ")\n"
									//		
								rp8.add_s8 { e0 s0 } ⊢ e0
								inv ahl ⊢ { L_dlt L_emt L_rpc } 
								adp.adt_call { L_dlt fl tv lb_n e0 { ax al } } ⊢ { L_dlt fl tv lb_n e0 }
								$ iso◂{ L_dlt L_emt L_rpc } ⊢ ahl
								\\rp8.add_s8 { e0 %[ pop_c_regs ] } ⊢ e0 
								∎ { ahl fl tv_n tv tav evv lb_n glv_n { eds e0 } } 							 
							∐. ast.stt_adt◂{ ia0 na0 pa0 } .
								sgm_ptn { ahl fl tv_n tv tav evv lb_n glv_n pa0 { eds e0 } } ⊢| 
					@.sgm_ptn_lst { ahl fl tv_n tv tav evv lb_n glv_n l0 { eds e0 } } 
						$ l0 ⊢ 
						∐ _cns◂{ p0 l0 } . 
							sgm_ptn { ahl fl tv_n tv tav evv lb_n glv_n p0 { eds e0 } } ⊢ { ahl fl tv_n tv tav evv lb_n glv_n { eds e0 } }
							sgm_ptn_lst { ahl fl tv_n tv tav evv lb_n glv_n l0 { eds e0 } } ⊢|
						∐. _nil◂{} . 
							∎ { ahl fl tv_n tv tav evv lb_n glv_n { eds e0 } } 					
					
					@.ptn { ahl fl tv_n tv tav evv lb_n glv_n is0 { eds e0 } } 
						$ is0 ⊢ 
						∐ RP.rcd◂l0 . 
							ptn_lst { ahl fl tv_n tv tav evv lb_n glv_n l0 { eds e0 } } ⊢|
						∐. RP.atm◂k0 . 
							$ k0 ⊢ 
							∐ ast.hp◂{ r h } . 
								∐ h ⊢ ast.hp.r64◂{} . 
									∎ { ahl fl tv_n tv tav evv lb_n glv_n { eds e0 } } 								
								∐. . 
									^ r ⊢ r,s0 
										"\tmov r8,GLX(" 0d' ")\n"
										//		
									rp8.add_s8 { e0 s0 } ⊢ e0 
									hp { ahl fl tv_n tv tav evv lb_n glv_n h { eds e0 } } ⊢ { ahl fl tv_n tv tav evv lb_n glv_n { eds e0 } } 
									∎ { ahl fl tv_n tv tav evv lb_n glv_n { eds e0 } } 								
							∐ ast.hp_im◂_ . 
								∎ { ahl fl tv_n tv tav evv lb_n glv_n { eds e0 } }
							∐ ast.btm◂{} . 
								rp8.add_s8 { e0 %[ "\tRT_ERR 0xffff_0037\n" ] } ⊢ e0 
								∎ { ahl fl tv_n tv tav evv lb_n glv_n { eds e0 } }
							∐ ast.dyn_adt◂{ { ax al } ri rd } . 
								^ ri,rd ⊢ _,_,s0 
									\\push_c_regs
									"\tmov r10,GLX(" 0d' ")\n"
									"\tmov r8,GLX(" 1d' ")\n"
									//		
								rp8.add_s8 { e0 s0 } ⊢ e0
								inv ahl ⊢ { L_dlt L_emt L_rpc } 
								adp.adt_call { L_dlt fl tv lb_n e0 { ax al } } ⊢ { L_dlt fl tv lb_n e0 }
								$ iso◂{ L_dlt L_emt L_rpc } ⊢ ahl
								\\rp8.add_s8 { e0 %[ pop_c_regs ] } ⊢ e0 
								∎ { ahl fl tv_n tv tav evv lb_n glv_n { eds e0 } } 
							∐. ast.stt_adt◂{ ia0 na0 pa0 } .
								ptn { ahl fl tv_n tv tav evv lb_n glv_n pa0 { eds e0 } } ⊢| 
					@.hp_adt { ahl fl tv_n tv tav evv lb_n glv_n h { eds e0 } } 
						 $ h ⊢ 
						 ∐ ast.hp.sgm◂y0 . 
							alc_type_k.f_i { tav tv_n tv %[ 0r ] y0 } ⊢ { tav tv_n tv c_n pa0 }
							∐ c_n'=0r . 
								∎ { ahl fl tv_n tv tav evv lb_n glv_n { eds e0 } }
							∐. . 
								^ _ ⊢ s1 
									`	push SRC_REG 
									"\tlea SRC_REG,[r8+8]\n"
									`	push r8 
									//
								rp8.add_s8 { e0 s1 } ⊢ e0
								sgm_ptn { ahl fl tv_n tv tav evv lb_n glv_n pa0 { eds e0 } } ⊢ { ahl fl  tv_n tv tav evv lb_n glv_n { eds e0 } } 
								^ c_n ⊢ c_n,s0 
									`	pop r8 
									"\tFREE_RCD " 0d' ",r8\n"  
									`	pop SRC_REG 
									// 
								rp8.add_s8 { e0 s0 } ⊢ e0 
								∎ { ahl fl tv_n tv tav evv lb_n glv_n { eds e0 } }
						∐ ast.hp.btm◂{} . 
							rp8.add_s8 { e0 %[ "\tRT_ERR 0xffff_1017\n" ] } ⊢ e0
							∎ { ahl fl tv_n tv tav evv lb_n glv_n { eds e0 } } 						
						∐. ast.hp.hp◂h . 
							hp { ahl fl tv_n tv tav evv lb_n glv_n h { eds e0 } } ⊢|
					@.hp { ahl fl tv_n tv tav evv lb_n glv_n h { eds e0 } } 
						$ h ⊢ 
						∐ ast.hp.r64◂{} . 
							∎ { ahl fl tv_n tv tav evv lb_n glv_n { eds e0 } }
						∐ ast.hp.opq◂{} . 	
							rp8.add_s8 { e0 %[ "\tFREE_S8 r8\n" ] } ⊢ e0 
							∎ { ahl fl tv_n tv tav evv lb_n glv_n { eds e0 } }
						∐ ast.hp.id◂{ x y0 } . 
							alc_type_k.f_i { tav tv_n tv %[ 0r ] y0 } ⊢ { tav tv_n tv c_n pa0 }
							∐ x'=ast.hp.id.Clr . 
								inc_x lb_n ⊢ { lb_lp lb_n } 
								inc_x lb_n ⊢ { lb_end lb_n } 
								^ lb_lp,lb_end ⊢ lb_lp,lb_end,sc0 
									`	mov rsi,QWORD [r8+16]
									`	mov rax,QWORD [r8+24]
									`	push SRC_REG 
									`	FREE_RCD 3,r8 
									"LB_" 0d' ":\n"
									`	cmp rsi,0 
									"\tjz LB_" 1d' "\n"
									`	sub rsi,1
									`	mov r8,rax 
									`	mov rax,QWORD [r8] 
									`	sub QWORD [r8+16],1
									"\tjnz LB_" 0d' "\n"
									`	push rsi
									`	push rax 
									"\tlea SRC_REG,[r8+24]\n"
									//
								rp8.add_s8 { e0 sc0 } ⊢ e0
								sgm_ptn { ahl fl tv_n tv tav evv lb_n glv_n pa0 { eds e0 } } ⊢ { ahl fl  tv_n tv tav evv lb_n glv_n { eds e0 } } 
								_add { c_n %[ 2r ] } ⊢ { c_n _ } 
								^ lb_lp,lb_end,c_n ⊢ _,_,_,s1 	 
									`	mov rdi,SRC_REG 
									`	sub rdi,24 
									"\tFREE_RCD " 2d' ",rdi\n" 
									`	pop rax
									`	pop rsi
									"\tjmp LB_" 0d' "\n" 
									"LB_" 1d' ":\n" 
									`	pop SRC_REG 
									//
								rp8.add_s8 { e0 s1 } ⊢ e0 
								∎ { ahl fl tv_n tv tav evv lb_n glv_n { eds e0 } }
							∐ x'=ast.hp.id.pt . 
								inc_x lb_n ⊢ { lb0 lb_n } 
								inc_x lb_n ⊢ { lb1 lb_n }
								inc_x lb_n ⊢ { lb2 lb_n } 
								_add { c_n %[ 2r ] } ⊢ { c_n _ } 
								^ lb0,lb1,lb2,c_n ⊢ _,lb1,_,c_n,sc0 
									`	sub QWORD [r8+16],1
									"\tjz LB_" 0d' "\n"
									"\tjmp LB_" 1d' "\n" 
									"LB_" 0d' ":\n" 
									`	bt QWORD [r8+8],63 
									"\tjnc LB_" 2d' "\n" 
									"\tFREE_RCD " 3d' ",r8\n" 
									"\tjmp LB_" 1d' "\n" 
									"LB_" 2d' ":\n" 
									`	push SRC_REG 
									"\tlea SRC_REG,[r8+24]\n"
									//
								rp8.add_s8 { e0 sc0 } ⊢ e0
								sgm_ptn { ahl fl tv_n tv tav evv lb_n glv_n pa0 { eds e0 } } ⊢ { ahl fl  tv_n tv tav evv lb_n glv_n { eds e0 } } 
								^ lb1,c_n ⊢ lb1,c_n,s1 	 
									`	mov rdi,SRC_REG 
									`	sub rdi,24 
									"\tFREE_RCD " 1d' ",rdi\n" 
									`	pop SRC_REG 
									"LB_" 0d' ":\n" //
								rp8.add_s8 { e0 s1 } ⊢ e0 
								∎ { ahl fl tv_n tv tav evv lb_n glv_n { eds e0 } } 
							∐. . 
								∎| 
						∐. ast.hp.arr◂y0 . 
							inc_x lb_n ⊢ { lb0 lb_n } 
							inc_x lb_n ⊢ { lb1 lb_n } 
							alc_type_k.f_i { tav tv_n tv %[ 0r ] y0 } ⊢ { tav tv_n tv c_n pa0 }
							^ lb0,lb1 ⊢ lb0,lb1,s1 
								`	GET_LEN rsi,r8
								`	mov rax,0 
								`	push SRC_REG 
								"\tlea SRC_REG,[r8+8]\n"
								`	push r8 
								"LB_" 0d' ":\n"
								`	cmp rsi,0
								"\tjz LB_" 1d' "\n"
								`	push rsi 
								//
							rp8.add_s8 { e0 s1 } ⊢ e0
							sgm_ptn { ahl fl tv_n tv tav evv lb_n glv_n pa0 { eds e0 } } ⊢ { ahl fl  tv_n tv tav evv lb_n glv_n { eds e0 } } 
							^ lb0,lb1,c_n ⊢ lb0,lb1,c_n,s1 	 
								`	pop rsi 
								`	sub rsi,1 
								"\tlea SRC_REG,[SRC_REG+8*" 2d' "]\n"
								"\tjmp LB_" 0d' "\n" 
								"LB_" 1d' ":\n" 
								`	pop rdi
								`	pop SRC_REG 
								`	C_CALL_SF free 
								//	
							rp8.add_s8 { e0 s1 } ⊢ e0
							∎ { ahl fl tv_n tv tav evv lb_n glv_n { eds e0 } } 
					@.ptn_lst { ahl fl tv_n tv tav evv lb_n glv_n l0 { eds e0 } } 
						$ l0 ⊢ 
						∐ _cns◂{ p0 l0 } . 
							ptn { ahl fl tv_n tv tav evv lb_n glv_n p0 { eds e0 } } ⊢ { ahl fl tv_n tv tav evv lb_n glv_n { eds e0 } }
							ptn_lst { ahl fl tv_n tv tav evv lb_n glv_n l0 { eds e0 } } ⊢|
						∐. _nil◂{} . 
							∎ { ahl fl tv_n tv tav evv lb_n glv_n { eds e0 } } 					
					@.adt = adp.adt◂◂adt_hp
					@.adt_hp { ahl fl j0 tv_n tv tav evv lr lbl lb1 lb_n glv_n { eds e0 } } 
						∐ lbl ⊢ p_cns◂{ lbi lbl };lr ⊢ _cns◂{ h lr } . 
							lb_etr { lbi e0 } ⊢ { lbi e0 } 
							hp_adt { ahl fl tv_n tv tav evv lb_n glv_n h { eds e0 } } ⊢ { ahl fl tv_n tv tav evv lb_n glv_n { eds e0 } } 
							_inc j0 ⊢ j0 
							jmp_lb { lb1 e0 } ⊢ { lb1 e0 }
							adt_hp { ahl fl j0 tv_n tv tav evv lr lbl lb1 lb_n glv_n { eds e0 } } ⊢| 
						∐ lbl ⊢ p_end◂lbi; lr ⊢ _cns◂{ h lr } .
							$ lr ⊢ _ 
							lb_etr { lbi e0 } ⊢ { lbi e0 } 
							hp_adt { ahl fl tv_n tv tav evv lb_n glv_n h { eds e0 } } ⊢ { ahl fl tv_n tv tav evv lb_n glv_n { eds e0 } } 
							jmp_lb { lb1 e0 } ⊢ { lb1 e0 }
							∎ { ahl fl tv_n tv tav evv lb1 lb_n glv_n { eds e0 } }
						\\∐ lr ⊢ _nil◂{}; lbl ⊢ _nil◂{} . 
						∐. . 
							_emt %[ "emt adt_hp x3" ] ⊢ _ 
							∎|
					@.adt_lp = adp.adt_lp◂◂adt 
				§ @.f { gfl fl evv tv_n tv tav lb_n glv_n dl { eds e0 } } 
					$ dl ⊢ 
					∐ _cns◂{ p dl } . 
						$ p ⊢ p,p0 
						ast.pnt.rt { evv p0 } ⊢ { evv sp } 
						^ sp ⊢ sp,sc 
							"; .dlt.ptn " 0' "\n" // 
						rp8.add_s8 { e0 sc } ⊢ e0 
						ptn { gfl fl tv_n tv tav evv lb_n glv_n p { eds e0 } } ⊢ { gfl fl tv_n tv tav evv lb_n glv_n { eds e0 } }
						f { gfl fl evv tv_n tv tav lb_n glv_n dl { eds e0 } } ⊢| 
					∐. _nil◂{} . 
						∎ { gfl fl evv tv_n tv tav lb_n glv_n { eds e0 } } 
				§ f # { gfl evv tv_n tv tav lb_n glv_n dl { eg0 eds e0 } }
					$ rp8.e◂{} ⊢ e1 
					f { gfl ⟦⟧ evv tv_n tv tav lb_n glv_n dl { eds e1 } } ⊢ { gfl fl evv tv_n tv tav lb_n glv_n { eds e1 } }
					adt_lp { gfl fl tv_n tv tav evv lb_n glv_n { eds eg0 } } ⊢ { gfl tv_n tv tav evv lb_n glv_n { eds eg0 } }
					rp8.cct { e0 e1 } ⊢ e0 
					∎ { gfl evv tv_n tv tav lb_n glv_n { eg0 eds e0 } }
				§ env # { gfl evv irv tv_n tv tav lb_n glv_n { eg0 eds e0 } }
					stt_v.ptns_of_env irv ⊢ { irv dl } 
					f { gfl evv tv_n tv tav lb_n glv_n dl { eg0 eds e0 } } ⊢ { gfl evv tv_n tv tav lb_n glv_n { eg0 eds e0 } } 
					∎ { gfl evv irv tv_n tv tav lb_n glv_n { eg0 eds e0 } }
				∎∎
			§ printf { s lb_n }
				» 0r _ ⊢ rs  
				mk_db { s rs } ⊢ { s rs dbs }	
				$ lb_n ⊢ lb_n,lb0 
				_inc lb_n ⊢ lb_n 
				$ lb_n ⊢ lb_n,lb1 
				_inc lb_n ⊢ lb_n 
				^ lb0,lb1,dbs ⊢ lb0,lb1,dbs,s0
					"\tjmp LB_" 1d' "\n" 
					"LB_" 0d' ": db " 2' "\n"   
					"LB_" 1d' ":\n" 
					"\tmov rdi,LB_" 0d' "\n" 
					`	call emt_stg
					//
				∎ { s lb_n s0 }
			§ printf { eds ec0 s lb_n }
				inc_x lb_n ⊢ { lb0 lb_n }
				data_s8 { eds lb0 s } ⊢ { eds lb0 s }
				^ lb0 ⊢ lb0,sc0 
					"\tmov rdi,LB_" 0d' "\n" 
					`	call emt_stg 
					//
				rp8.add_s8 { ec0 sc0 } ⊢ ec0 
				∎ { eds ec0 s lb_n }
			§§ cmp_s8
				§ 
					@.f # { lb0 s }  
						_s8_len s ⊢ { s ls } 
						» 0r _ ⊢ i 
						$ rp8.e◂{} ⊢ e0
						lp { lb0 s ls i e0 } ⊢ { lb0 s e0 }
						∎ { lb0 s e0 } 
					@.lp { lb0 s ls i e0 } 
						∐ ls'=i' . 
							∎ { lb0 s e0 } 
						∐. . 
							_lds { s i } ⊢ { s i c } 
							^ i,c,lb0 ⊢ i,c,lb0,s0 
								"\tcmp BYTE [rdi+" 0d' "]," 1d' "\n" 
								"\tjnz LB_" 2d' "\n" 
								// 
							_inc i ⊢ i 
							rp8.add_s8 { e0 s0 } ⊢ e0 
							lp { lb0 s ls i e0 } ⊢|
				∎∎ 
			
			§§ emt 
				§
					@.emt_stg { s lb_n { eds e } } 
						_s8_len s ⊢ { s l } 
						inc_x lb_n ⊢ { lb0 lb_n }
						data_s8 { eds lb0 s } ⊢ { eds lb0 s }
						^ lb0,l ⊢ lb0,l,sc0 
							"\tEMT_CST LB_" 0d' "," 1d' "\n"  
							//
						rp8.add_s8 { e sc0 } ⊢ e 
						∎ { s lb_n { eds e } }
					\[
					@.emt_stg_T◂◂S { lb_n { eds e } } 
						_s8_len s ⊢ { s l } 
						inc_x lb_n ⊢ { lb0 lb_n }
						data_s8 { eds lb0 s } ⊢ { eds lb0 s }
						^ lb0,l ⊢ lb0,l,sc0 
							"\tEMT_CST LB_" 0d' "," 1d' "\n"  
							//
						rp8.add_s8 { e sc0 } ⊢ e 
						∎ { s lb_n { eds e } }
					\]
					@.sgm_ptn { ahl fl  tv_n tv tav evv lb_n glv_n is0 { eds e0 } } 
						$ is0 ⊢ 
						∐ RP.rcd◂l0 . 
							rp8.add_s8 { e0 %[ "\tEMT_CST fmt_rcd_l,4\n" ] } ⊢ e0
							sgm_ptn_lst { ahl fl  tv_n tv tav evv lb_n glv_n l0 { eds e0 } } ⊢ { ahl fl  tv_n tv tav evv lb_n glv_n { eds e0 } }
							rp8.add_s8 { e0 %[ "\tEMT_CST fmt_rcd_r,4\n" ] } ⊢ e0
							∎	{ ahl fl  tv_n tv tav evv lb_n glv_n { eds e0 } }
						∐. RP.atm◂k0 . 
							$ k0 ⊢ 
							∐ ast.hp◂{ r h } . 
								^ r ⊢ r,s0 
									"\tmov rdi,SX(" 0d' ")\n"
									push_c_regs 
									`	mov r8,rdi 
									//		
								rp8.add_s8 { e0 s0 } ⊢ e0 
								hp { ahl fl  tv_n tv tav evv lb_n glv_n h { eds e0 } } ⊢ { ahl fl  tv_n tv tav evv lb_n glv_n { eds e0 } } 
								rp8.add_s8 { e0 %[ pop_c_regs ] } ⊢ e0 
								∎ { ahl fl  tv_n tv tav evv lb_n glv_n { eds e0 } } 								
							∐ ast.hp_im◂c . 
								∐ c ⊢ ast.k_r64◂x . 
									^ x ⊢ x,sx 
										0d' "r" //
									emt_stg { sx lb_n { eds e0 } } ⊢ { sx lb_n { eds e0 } } 
									∎ { ahl fl tv_n tv tav evv lb_n glv_n { eds e0 } }
								∐ c ⊢ ast.k_s8◂s . 
									» 0r _ ⊢ x0 
									\\mk_esc_s8 s ⊢ { s ss } 
									$ s ⊢ ss 
									^ ss ⊢ ss,s0 
										"\"" 0' "\"" // 
									emt_stg { s0 lb_n { eds e0 } } ⊢ {s0 lb_n { eds e0 } } 
									∎ { ahl fl tv_n tv tav evv lb_n glv_n { eds e0 } }
								∐ c ⊢ ast.k_name◂e . 
									^ e ⊢ e,sx 
										"#[ " 0d' "]" //
									emt_stg { sx lb_n { eds e0 } } ⊢ { sx lb_n { eds e0 } } 
									∎ { ahl fl  tv_n tv tav evv lb_n glv_n { eds e0 } }
								∐. . 
									» "emt x0 " _ ⊢ ee 
									_emt ee ⊢ ee 
									∎|
							∐ ast.btm◂{} . 
								rp8.add_s8 { e0 %[ "\tRT_ERR 0xffff_0047\n" ] } ⊢ e0 
								∎ { ahl fl tv_n tv tav evv lb_n glv_n { eds e0 } }
							∐ ast.dyn_adt◂{ { ax al } ri rd } . 
								^ ri,rd ⊢ _,_,s0 
									push_c_regs
									"\tmov r10,SX(" 0d' ")\n"
									"\tmov r8,SX(" 1d' ")\n"
									//		
								rp8.add_s8 { e0 s0 } ⊢ e0
								inv ahl ⊢ { L_dlt L_emt L_rpc } 
								adp.adt_call { L_emt fl tv lb_n e0 { ax al } } ⊢ { L_emt fl tv lb_n e0 }
								$ iso◂{ L_dlt L_emt L_rpc } ⊢ ahl
								rp8.add_s8 { e0 %[ pop_c_regs ] } ⊢ e0 
								∎ { ahl fl tv_n tv tav evv lb_n glv_n { eds e0 } } 							  
							∐. ast.stt_adt◂{ ia0 na0 pa0 } .
								^ ia0 ⊢ ia0,sx 
										"'" 0d' "◂" //
								emt_stg { sx lb_n { eds e0 } } ⊢ { sx lb_n { eds e0 } }
								sgm_ptn { ahl fl  tv_n tv tav evv lb_n glv_n pa0 { eds e0 } } ⊢| 
					@.sgm_ptn_lst { ahl fl  tv_n tv tav evv lb_n glv_n l0 { eds e0 } } 
						$ l0 ⊢ 
						∐ _cns◂{ p0 l0 } . 
							sgm_ptn { ahl fl tv_n tv tav evv lb_n glv_n p0 { eds e0 } } ⊢ { ahl fl  tv_n tv tav evv lb_n glv_n { eds e0 } } 
							rp8.add_s8 { e0 %[ "\tEMT_CST fmt_spc,4\n" ] } ⊢ e0
							sgm_ptn_lst { ahl fl tv_n tv tav evv lb_n glv_n l0 { eds e0 } } ⊢|
						∐. _nil◂{} . 
							∎ { ahl fl tv_n tv tav evv lb_n glv_n { eds e0 } } 
					@.hp_adt { ahl fl tv_n tv tav evv lb_n glv_n h { eds e0 } } 
						$ h ⊢ 
						∐ ast.hp.sgm◂y0 . 
							alc_type_k.f_i { tav tv_n tv %[ 0r ] y0 } ⊢ { tav tv_n tv c_n pa0 }
							^ _ ⊢ s1 
								`	push SRC_REG 
								`	lea SRC_REG,[r8+8]
								`	push r8 
								//
							rp8.add_s8 { e0 s1 } ⊢ e0
							sgm_ptn { ahl fl tv_n tv tav evv lb_n glv_n pa0 { eds e0 } } ⊢ { ahl fl  tv_n tv tav evv lb_n glv_n { eds e0 } } 
							^ _ ⊢ s1 	 
								`	pop r8 
								`	pop SRC_REG
								//	
							rp8.add_s8 { e0 s1 } ⊢ e0
							∎ { ahl fl tv_n tv tav evv lb_n glv_n { eds e0 } }
						∐ ast.hp.hp◂h .
							hp { ahl fl tv_n tv tav evv lb_n glv_n h { eds e0 } } ⊢|							
						∐. ast.hp.btm◂{} . 
							rp8.add_s8 { e0 %[ "\tRT_ERR 0xffff_0027\n" ] } ⊢ e0
							∎ { ahl fl tv_n tv tav evv lb_n glv_n { eds e0 } } 
					
					@.hp { ahl fl tv_n tv tav evv lb_n glv_n h { eds e0 } } 
						$ h ⊢ 
						∐ ast.hp.r64◂{} . 		 
							rp8.add_s8 { e0 %[ "\tmov rdi,r8\n\tcall emt_r64\n" ] } ⊢ e0 
							∎ { ahl fl tv_n tv tav evv lb_n glv_n { eds e0 } }
						∐  ast.hp.opq◂{} . 		
							rp8.add_s8 { e0 %[ "\tmov rdi,r8\n\tcall emt_s8\n" ] } ⊢ e0 
							∎ { ahl fl tv_n tv tav evv lb_n glv_n { eds e0 } }
						∐ ast.hp.id◂{ x y0 } . 
							∐ x'=ast.hp.id.Clr . 
								alc_type_k.f_i { tav tv_n tv %[ 0r ] y0 } ⊢ { tav tv_n tv c_n pa0 }
								inc_x lb_n ⊢ { lb0 lb_n } 
								inc_x lb_n ⊢ { lb1 lb_n } 
								^ lb0,lb1 ⊢ lb0,lb1,s1 
									`	EMT_CST fmt_Clr_l,8
									`	mov rsi,QWORD [r8+16]
									`	mov rax,QWORD [r8+24]
									`	push SRC_REG 
									`	push r8 
									"LB_" 0d' ":\n"
									`	cmp rsi,0 
									"\tjz LB_" 1d' "\n"
									`	lea SRC_REG,QWORD [rax+24]
									`	mov rax,QWORD [rax] 
									`	sub rsi,1 
									`	push rsi 
									`	push rax 
									//
								rp8.add_s8 { e0 s1 } ⊢ e0
								sgm_ptn { ahl fl tv_n tv tav evv lb_n glv_n pa0 { eds e0 } } ⊢ { ahl fl  tv_n tv tav evv lb_n glv_n { eds e0 } } 
								^ lb0,lb1 ⊢ lb0,lb1,s1 	 
									`	EMT_CST fmt_spc,4
									`	pop rax 
									`	pop rsi 
									"\tjmp LB_" 0d' "\n" 
									"LB_" 1d' ":\n" 
									`	pop r8 
									`	pop SRC_REG
									`	EMT_CST fmt_rcd_r,4
								//	
								rp8.add_s8 { e0 s1 } ⊢ e0
								∎ { ahl fl  tv_n tv tav evv lb_n glv_n { eds e0 } } 					
							∐ x'=ast.hp.id.pt . 
								emt_stg { %[ "[=]" ] lb_n { eds e0 } } ⊢ { _ lb_n { eds e0 } }
								∎ { ahl fl tv_n tv tav evv lb_n glv_n { eds e0 } }								 								
							∐. . 
								∎|
						∐. ast.hp.arr◂y0 . 
							alc_type_k.f_i { tav tv_n tv %[ 0r ] y0 } ⊢ { tav tv_n tv c_n pa0 }
							inc_x lb_n ⊢ { lb0 lb_n } 
							inc_x lb_n ⊢ { lb1 lb_n } 
							^ lb0,lb1,c_n ⊢ lb0,lb1,c_n,s1 
								`	EMT_CST fmt_arr_l,8
								`	mov rsi,0x0000_ffff_ffff_ffff 
								`	and rsi,[r8]
								`	mov rax,0 
								`	push SRC_REG 
								`	lea SRC_REG,[r8+8]
								`	push r8 
								"LB_" 0d' ":\n"
								`	cmp rsi,rax 
								"\tjz LB_" 1d' "\n"
								`	push rsi 
								`	push rax 
								//
							rp8.add_s8 { e0 s1 } ⊢ e0
							sgm_ptn { ahl fl tv_n tv tav evv lb_n glv_n pa0 { eds e0 } } ⊢ { ahl fl  tv_n tv tav evv lb_n glv_n { eds e0 } } 
							^ lb0,lb1,c_n ⊢ lb0,lb1,c_n,s1 	 
								"\tlea SRC_REG,[SRC_REG+8*" 2d' "]\n" 
								`	EMT_CST fmt_spc,4
								`	pop rax 
								`	pop rsi 
								`	add rax,1 
								"\tjmp LB_" 0d' "\n" 
								"LB_" 1d' ":\n" 
								`	pop r8 
								`	pop SRC_REG
								`	EMT_CST fmt_arr_r,4
								//	
							rp8.add_s8 { e0 s1 } ⊢ e0
							∎ { ahl fl  tv_n tv tav evv lb_n glv_n { eds e0 } } 
					@.ptn { ahl fl  tv_n tv tav evv lb_n glv_n is0 { eds e0 } } 
						$ is0 ⊢ 
						∐ RP.rcd◂l0 . 
							rp8.add_s8 { e0 %[ "\tEMT_CST fmt_rcd_l,4\n" ] } ⊢ e0
							ptn_lst { ahl fl  tv_n tv tav evv lb_n glv_n l0 { eds e0 } } ⊢ { ahl fl  tv_n tv tav evv lb_n glv_n { eds e0 } }
							rp8.add_s8 { e0 %[ "\tEMT_CST fmt_rcd_r,4\n" ] } ⊢ e0
							∎	{ ahl fl tv_n tv tav evv lb_n glv_n { eds e0 } }
						∐. RP.atm◂k0 . 
							$ k0 ⊢ 
							∐ ast.hp◂{ r h } . 
								^ r ⊢ r,s0 
									"\tmov rdi,GLX(" 0d' ")\n"
									push_c_regs 
									`	mov r8,rdi 
									//		
								rp8.add_s8 { e0 s0 } ⊢ e0 
								hp { ahl fl  tv_n tv tav evv lb_n glv_n h { eds e0 } } ⊢ { ahl fl  tv_n tv tav evv lb_n glv_n { eds e0 } } 
								rp8.add_s8 { e0 %[ pop_c_regs ] } ⊢ e0 
								∎ { ahl fl  tv_n tv tav evv lb_n glv_n { eds e0 } } 								
							∐ ast.hp_im◂c . 
								∐ c ⊢ ast.k_r64◂x . 
									^ x ⊢ x,sx 
										0d' "r" //
									emt_stg { sx lb_n { eds e0 } } ⊢ { sx lb_n { eds e0 } } 
									∎ { ahl fl tv_n tv tav evv lb_n glv_n { eds e0 } }
								∐ c ⊢ ast.k_s8◂s . 
									» 0r _ ⊢ x0 
									\\mk_esc_s8 s ⊢ { s ss } 
									$ s ⊢ ss 
									^ ss ⊢ ss,s0 
										"\"" 0' "\"" // 
									emt_stg { s0 lb_n { eds e0 } } ⊢ {s0 lb_n { eds e0 } } 
									∎ { ahl fl tv_n tv tav evv lb_n glv_n { eds e0 } }
								∐ c ⊢ ast.k_name◂e . 
									^ e ⊢ e,sx 
										"#[ " 0d' "]" //
									emt_stg { sx lb_n { eds e0 } } ⊢ { sx lb_n { eds e0 } } 
									∎ { ahl fl  tv_n tv tav evv lb_n glv_n { eds e0 } }
								∐. . 
									» "emt x0 " _ ⊢ ee 
									_emt ee ⊢ ee 
									∎|
							∐ ast.btm◂{} . 
								rp8.add_s8 { e0 %[ "\tRT_ERR 0xffff_0047\n" ] } ⊢ e0 
								∎ { ahl fl tv_n tv tav evv lb_n glv_n { eds e0 } }
							∐ ast.dyn_adt◂{ { ax al } ri rd } . 
								^ ri,rd ⊢ _,_,s0 
									push_c_regs
									"\tmov r10,GLX(" 0d' ")\n"
									"\tmov r8,GLX(" 1d' ")\n"
									//		
								rp8.add_s8 { e0 s0 } ⊢ e0
								inv ahl ⊢ { L_dlt L_emt L_rpc } 
								adp.adt_call { L_emt fl tv lb_n e0 { ax al } } ⊢ { L_emt fl tv lb_n e0 }
								$ iso◂{ L_dlt L_emt L_rpc } ⊢ ahl
								rp8.add_s8 { e0 %[ pop_c_regs ] } ⊢ e0 
								∎ { ahl fl tv_n tv tav evv lb_n glv_n { eds e0 } } 							  
							∐. ast.stt_adt◂{ ia0 na0 pa0 } .
								^ ia0 ⊢ ia0,sx 
										"'" 0d' "◂" //
								emt_stg { sx lb_n { eds e0 } } ⊢ { sx lb_n { eds e0 } }
								ptn { ahl fl  tv_n tv tav evv lb_n glv_n pa0 { eds e0 } } ⊢| 
					
					@.ptn_lst { ahl fl  tv_n tv tav evv lb_n glv_n l0 { eds e0 } } 
						$ l0 ⊢ 
						∐ _cns◂{ p0 l0 } . 
							ptn { ahl fl  tv_n tv tav evv lb_n glv_n p0 { eds e0 } } ⊢ { ahl fl  tv_n tv tav evv lb_n glv_n { eds e0 } } 
							rp8.add_s8 { e0 %[ "\tEMT_CST fmt_spc,4\n" ] } ⊢ e0
							ptn_lst { ahl fl  tv_n tv tav evv lb_n glv_n l0 { eds e0 } } ⊢|
						∐. _nil◂{} . 
							∎ { ahl fl  tv_n tv tav evv lb_n glv_n { eds e0 } } 
				§
					@.adt = adp.adt◂◂adt_hp
					@.adt_hp { ahl fl j0  tv_n tv tav evv lr lbl lb1 lb_n glv_n { eds e0 } } 
						∐ lr ⊢ _cns◂{ h lr } .
							$ lbl ⊢ 
							∐ p_cns◂{ lbi lbl } . 
								^ lbi ⊢ lbi,s0 
									"LB_" 0d' ":\n" // 
								rp8.add_s8 { e0 s0 } ⊢ e0 
								^ j0 ⊢ j0,sx 
											"'" 0d' "◂" //
								_inc j0 ⊢ j0 
								emt_stg { sx lb_n { eds e0 } } ⊢ { sx lb_n { eds e0 } }
								hp_adt { ahl fl  tv_n tv tav evv lb_n glv_n h { eds e0 } } ⊢ { ahl fl  tv_n tv tav evv lb_n glv_n { eds e0 } } 
								^ lb1 ⊢ lb1,s0 
									"\tjmp LB_" 0d' "\n" // 
								rp8.add_s8 { e0 s0 } ⊢ e0 
								adt_hp { ahl fl j0  tv_n tv tav evv lr lbl lb1 lb_n glv_n { eds e0 } } ⊢| 
							∐. p_end◂lbi .
								$ lr ⊢ _ 
								^ lbi ⊢ lbi,s0 
									"LB_" 0d' ":\n" // 
								rp8.add_s8 { e0 s0 } ⊢ e0 
								^ j0 ⊢ j0,sx 
											"'" 0d' "◂" //
								_inc j0 ⊢ j0 
								emt_stg { sx lb_n { eds e0 } } ⊢ { sx lb_n { eds e0 } }
								hp_adt { ahl fl tv_n tv tav evv lb_n glv_n h { eds e0 } } ⊢ { ahl fl  tv_n tv tav evv lb_n glv_n { eds e0 } } 
								^ lb1 ⊢ lb1,s0 
									"\tjmp LB_" 0d' "\n" // 
								rp8.add_s8 { e0 s0 } ⊢ e0 
								∎ { ahl fl tv_n tv  tav evv lb1 lb_n glv_n { eds e0 } }
						\\∐ lr ⊢ _nil◂{}; lbl ⊢ _nil◂{} . 
						∐. . 
							_emt %[ "emt adt_hp x3" ] ⊢ _
							∎|
					@.adt_lp = adp.adt_lp◂◂adt
				∎∎
			§§ rpc
				§ 
					@.sgm_ptn_lst { ahl fl tv_n tv  tav evv lb_n glv_n l0 { eds e0 } }   					
						$ l0 ⊢
						∐ _cns◂{ p0 l0 } . 
							sgm_ptn { ahl fl tv_n tv tav evv lb_n glv_n p0 { eds e0 } } ⊢ { ahl fl tv_n tv tav evv lb_n glv_n { eds e0 } }
							sgm_ptn_lst { ahl fl tv_n tv tav evv lb_n glv_n l0 { eds e0 } } ⊢| 
						∐. _nil◂{} . 
							∎ { ahl fl tv_n tv  tav evv lb_n glv_n { eds e0 } }
					@.sgm_ptn { ahl fl tv_n tv tav evv lb_n glv_n is { eds e0 } }
						$ is ⊢ is,is0 
						$ is0 ⊢ 
						∐ RP.atm◂k . 
							$ k ⊢ 
							∐ ast.hp◂{ r0 h } . 
								$ h ⊢ h,h0
								^ r0 ⊢ r0,s0 
									"\tmov rdi,SX(" 0d' ")\n" 
									"\tmov r8,rdi\n" // 
								rp8.add_s8 { e0 s0 } ⊢ e0 
								hp { ahl fl tv_n tv tav evv lb_n glv_n h { eds e0 } } ⊢ { ahl fl tv_n tv tav evv lb_n glv_n { eds e0 } }
								^ r0 ⊢ r0,s0 
									"\tmov DX(" 0d' "),rax\n" // 
								rp8.add_s8 { e0 s0 } ⊢ e0
								∎ { ahl fl tv_n tv tav evv lb_n glv_n { eds e0 } } 
							∐ ast.hp_im◂v0 .
								∎ { ahl fl tv_n tv  tav evv lb_n glv_n { eds e0 } } 
							∐ ast.btm◂{} . 
								$ is ⊢ is,id 
								rp8.add_s8 { e0 %[ "\tRT_ERR 0xffff_0037\n" ] } ⊢ e0 
								∎ { ahl fl tv_n tv tav evv lb_n glv_n { eds e0 } }
							∐ ast.dyn_adt◂{ { ax al } ri rd } . 	
								^ ri,rd ⊢ _,rd,s0 
									\\push_c_regs
									"\tmov r10,SX(" 0d' ")\n"
									"\tmov r8,SX(" 1d' ")\n"
									"\tmov DX(" 0d' "),r10\n" 
									//		
								rp8.add_s8 { e0 s0 } ⊢ e0
								inv ahl ⊢ { L_dlt L_emt L_rpc } 
								adp.adt_call { L_rpc fl tv lb_n e0 { ax al } } ⊢ { L_rpc fl tv lb_n e0 }
								$ iso◂{ L_dlt L_emt L_rpc } ⊢ ahl
								^ rd ⊢ _,s0 
									"\tmov DX(" 0d' "),rax\n"
								\\	pop_c_regs 
									//
								rp8.add_s8 { e0 s0 } ⊢ e0 
								∎ { ahl fl tv_n tv tav evv lb_n glv_n { eds e0 } } 							  
							∐. ast.stt_adt◂{ ia na pa0 } . 
								sgm_ptn { ahl fl tv_n tv  tav evv lb_n glv_n pa0 { eds e0 } } ⊢| 
						∐. RP.rcd◂l0 . 
							sgm_ptn_lst { ahl fl tv_n tv  tav evv lb_n glv_n l0 { eds e0 } } ⊢|
					@.hp_adt { ahl fl tv_n tv tav evv lb_n glv_n h { eds e0 } }
						$ h ⊢ 
						∐ ast.hp.sgm◂y0 . 
							alc_type_k.f_i { tav tv_n tv %[ 0r ] y0 } ⊢ { tav tv_n tv c_n pa0 }
							∐ c_n'=0r . 
								rp8.add_s8 { e0 %[ "\tmov rax,unt\n" ] } ⊢ e0 
								∎ { ahl fl tv_n tv tav evv lb_n glv_n { eds e0 } } 						
							∐. . 
								^ c_n ⊢ c_n,sc0 
									"\tALC_RCD " 0d' ",rax\n" 
									`	push DST_REG
									`	push SRC_REG
									`	lea DST_REG,[rax+8]
									`	lea SRC_REG,[r8+8]
									`	push r8 
									`	push rax 
									//
								rp8.add_s8 { e0 sc0 } ⊢ e0
								sgm_ptn { ahl fl tv_n tv tav evv lb_n glv_n pa0 { eds e0 } } ⊢ { ahl fl  tv_n tv tav evv lb_n glv_n { eds e0 } } 
								» "\tpop rax\n\tpop r8\n\tpop SRC_REG\n\tpop DST_REG\n" _ ⊢ s0 
								rp8.add_s8 { e0 s0 } ⊢ e0
								∎ { ahl fl tv_n tv tav evv lb_n glv_n { eds e0 } } 						
						∐ ast.hp.hp◂h . 
							hp { ahl fl tv_n tv tav evv lb_n glv_n h { eds e0 } } ⊢|
						∐. ast.hp.btm◂{} . 
							rp8.add_s8 { e0 %[ "\tRT_ERR 0xffff_2017\n" ] } ⊢ e0
							∎ { ahl fl tv_n tv tav evv lb_n glv_n { eds e0 } } 			   					
					@.hp { ahl fl tv_n tv tav evv lb_n glv_n h { eds e0 } }
						$ h ⊢ 
						∐ ast.hp.r64◂{} . 
							rp8.add_s8 { e0 %[ "\tmov rax,r8\n" ] } ⊢ e0 
							∎ { ahl fl tv_n tv tav evv lb_n glv_n { eds e0 } }
						∐ ast.hp.opq◂{} . 
							rp8.add_s8 { e0 %[ "\tmov rdi,r8\n\tCALL_SF rpc_s8\n" ] } ⊢ e0 
							∎ { ahl fl tv_n tv tav evv lb_n glv_n { eds e0 } }
						∐ ast.hp.id◂{ x y0 } . 
							∐ x'=ast.hp.id.Clr . 
								∎| 
							∐ x'=ast.hp.id.pt . 
								^ _ ⊢ sc0 
									`	add QWORD [r8+16],1 
									`	mov rax,r8 
									// 
								rp8.add_s8 { e0 sc0 } ⊢ e0 
								∎ { ahl fl tv_n tv tav evv lb_n glv_n { eds e0 } }
							∐. . 
								∎| 
						∐. ast.hp.arr◂y0 .
							alc_type_k.f_i { tav tv_n tv %[ 0r ] y0 } ⊢ { tav tv_n tv c_n pa0 }
							inc_x lb_n ⊢ { lb0 lb_n } 
							inc_x lb_n ⊢ { lb1 lb_n } 
							^ lb0,lb1,c_n ⊢ lb0,lb1,c_n,sc0 
								`	mov r9,0x0000_ffff_ffff_ffff 
								`	and r9,QWORD [r8] 
								`	mov rdi,r9 
								"\timul rdi," 2d' "\n"
								`	lea rdi,[8+8*rdi] 
								`	mov rsi,1 
								`	xor rax,rax
								`	C_CALL_SF calloc
								`	mov QWORD [rax],r9
								`	push DST_REG
								`	push SRC_REG
								`	lea DST_REG,[rax+8]
								`	lea SRC_REG,[r8+8]
								`	push r8 
								`	push rax 
								"LB_" 0d' ":\n" 
								`	cmp r9,0 
								"\tjz LB_" 1d' "\n" 
								`	push r9
								//
							rp8.add_s8 { e0 sc0 } ⊢ e0
							$ pa0 ⊢ pa0,pa0_0 
							sgm_ptn { ahl fl tv_n tv tav evv lb_n glv_n pa0_0 { eds e0 } } ⊢ { ahl fl  tv_n tv tav evv lb_n glv_n { eds e0 } } 
							^ c_n ⊢ _,s0
								`	pop r9  
								`	sub r9,1
								"\tlea SRC_REG,[SRC_REG+8*" 0d' "]\n"
								"\tlea DST_REG,[DST_REG+8*" 0d' "]\n"
								//  
							rp8.add_s8 { e0 s0 } ⊢ e0
							jmp_lb { lb0 e0 } ⊢ { _ e0 } 
							lb_etr { lb1 e0 } ⊢ { _ e0 } 
							» "\tpop rax\n\tpop r8\n\tpop SRC_REG\n\tpop DST_REG\n" _ ⊢ s0 
							rp8.add_s8 { e0 s0 } ⊢ e0
							∎ { ahl fl tv_n tv tav evv lb_n glv_n { eds e0 } }
					@.ptn_lst { ahl fl tv_n tv  tav evv lb_n glv_n l0 { eds e0 } }   					
						$ l0 ⊢
						∐ _cns◂{ p0 l0 } . 
							ptn { ahl fl tv_n tv tav evv lb_n glv_n p0 { eds e0 } } ⊢ { ahl fl tv_n tv tav evv lb_n glv_n p0 p1 { eds e0 } }
							ptn_lst { ahl fl tv_n tv tav evv lb_n glv_n l0 { eds e0 } } ⊢ { ahl fl tv_n tv tav evv lb_n glv_n l0 l1 { eds e0 } } 
							∎ { ahl fl tv_n tv tav evv lb_n glv_n ⟦ p0 < l0 ⟧ ⟦ p1 < l1 ⟧ { eds e0 } }
						∐. _nil◂{} . 
							∎ { ahl fl tv_n tv  tav evv lb_n glv_n ⟦⟧ ⟦⟧ { eds e0 } }
					@.ptn { ahl fl tv_n tv tav evv lb_n glv_n is { eds e0 } }
						$ is ⊢ is,is0 
						$ is0 ⊢ 
						∐ RP.atm◂k . 
							$ k ⊢ 
							∐ ast.hp◂{ r0 h } . 
								$ h ⊢ h,h0
								inc_x glv_n ⊢ { rm0 glv_n }  
								^ r0 ⊢ r0,s0 
									"\tmov r8,GLX(" 0d' ")\n" 
									// 
								rp8.add_s8 { e0 s0 } ⊢ e0 
								hp { ahl fl tv_n tv tav evv lb_n glv_n h { eds e0 } } ⊢ { ahl fl tv_n tv tav evv lb_n glv_n { eds e0 } }
								^ rm0 ⊢ rm0,s0 
									"\tmov GLX(" 0d' "),rax\n" // 
								rp8.add_s8 { e0 s0 } ⊢ e0
								∎ { ahl fl tv_n tv tav evv lb_n glv_n is RP.atm◂ast.hp◂{ rm0 h0 } { eds e0 } } 
							∐ ast.hp_im◂v0 .
								$ is ⊢ is,id 
								∎ { ahl fl tv_n tv  tav evv lb_n glv_n is id { eds e0 } } 
							∐ ast.btm◂{} . 
								$ is ⊢ is,id 
								rp8.add_s8 { e0 %[ "\tRT_ERR 0xffff_0037\n" ] } ⊢ e0 
								∎ { ahl fl tv_n tv tav evv lb_n glv_n is id { eds e0 } }
							∐ ast.dyn_adt◂{ { ax al } ri rd } . 
								inc_x glv_n ⊢ { ri_1 glv_n } 
								inc_x glv_n ⊢ { rd_1 glv_n } 
								^ ri,rd,ri_1 ⊢ _,_,ri_1,s0 
									\\push_c_regs
									"\tmov r10,GLX(" 0d' ")\n"
									"\tmov r8,GLX(" 1d' ")\n"
									"\tmov GLX(" 2d' "),r10\n" //		
								rp8.add_s8 { e0 s0 } ⊢ e0
								$ { ax al } ⊢ AX0,AX1 
								inv ahl ⊢ { L_dlt L_emt L_rpc } 
								adp.adt_call { L_rpc fl tv lb_n e0 AX0 } ⊢ { L_rpc fl tv lb_n e0 }
								$ iso◂{ L_dlt L_emt L_rpc } ⊢ ahl
								^ rd_1 ⊢ rd_1,s0 
									"\tmov GLX(" 0d' "),rax\n"  
									// 
								rp8.add_s8 { e0 s0 } ⊢ e0 
								∎ { ahl fl tv_n tv tav evv lb_n glv_n is RP.atm◂ast.dyn_adt◂{ AX1 ri_1 rd_1 } { eds e0 } } 							  
							∐. ast.stt_adt◂{ ia na pa0 } . 
								ptn { ahl fl tv_n tv  tav evv lb_n glv_n pa0 { eds e0 } } ⊢ { ahl fl tv_n tv  tav evv lb_n glv_n pa0 id0 { eds e0 } }
								∎ { ahl fl  tv_n tv tav evv lb_n glv_n is RP.atm◂ast.stt_adt◂{ ia na id0 } { eds e0 } }
						∐. RP.rcd◂l0 . 
							ptn_lst { ahl fl tv_n tv  tav evv lb_n glv_n l0 { eds e0 } } ⊢ { ahl fl tv_n tv  tav evv lb_n glv_n l0 l1 { eds e0 } }
							∎ { ahl fl  tv_n tv tav evv lb_n glv_n RP.rcd◂l0 RP.rcd◂l1 { eds e0 } }						   					
				§	
					@.adt = adp.adt◂◂adt_hp 
					@.adt_hp { ahl fl j0 tv_n tv tav evv lr lbl lb1 lb_n glv_n { eds e0 } } 
						∐ lr ⊢ _cns◂{ h lr } . 
							$ lbl ⊢ 
							∐ p_cns◂{ lbi lbl } . 
								lb_etr { lbi e0 } ⊢ { lbi e0 } 
								hp_adt { ahl fl tv_n tv tav evv lb_n glv_n h { eds e0 } } ⊢ { ahl fl tv_n tv tav evv lb_n glv_n { eds e0 } } 						
								jmp_lb { lb1 e0 } ⊢ { lb1 e0 } 
								_inc j0 ⊢ j0 
								adt_hp { ahl fl j0 tv_n tv tav evv lr lbl lb1 lb_n glv_n { eds e0 } } ⊢| 
							∐. p_end◂lbi .
								lb_etr { lbi e0 } ⊢ { lbi e0 } 
								hp_adt { ahl fl tv_n tv tav evv lb_n glv_n h { eds e0 } } ⊢ { ahl fl tv_n tv tav evv lb_n glv_n { eds e0 } } 						
								jmp_lb { lb1 e0 } ⊢ { lb1 e0 } 
								∎ { ahl fl tv_n tv  tav evv lb1 lb_n glv_n { eds e0 } }
						\\∐ lr ⊢ _nil◂{}; lbl ⊢ _nil◂{} . 
						\\	∎|
						∐. . 
							∎|
					@.adt_lp = adp.adt_lp◂◂adt 
					
				∎∎ 
			§§ arr 
				§ l1 { evv a0 e0 }
					ast.r64_of_rt { evv a0 } ⊢ { evv x } 
					$ x ⊢ 
					∐ ast.im_of◂x0 .
						^ x0 ⊢ _,s0
							"\tmov rdi," 0d' "\n" //
						rp8.add_s8 { e0 s0 } ⊢ e0
						∎ { evv e0 }
					∐. ast.hp_of◂r1 . 
						^ r1 ⊢ r1,s0
							"\tmov rdi,GLX(" 0d' ")\n" //
						rp8.add_s8 { e0 s0 } ⊢ e0
						∎ { evv e0 }
				§ mk_arr { gfl is irv evv tav tv_n tv yd glv_n lb_n }
					$ rp8.e◂{} ⊢ e0 
					$ rp8.e◂{} ⊢ eg0 
					$ rp8.e◂{} ⊢ eds 
					∐ is ⊢ RP.rcd◂l0; l0 ⊢ _cns◂{ a0 l0 }; l0 ⊢ _cns◂{ a1 l0 }; l0 ⊢ _nil◂{} . 
						newvar_l { tv_n tv %[ 0r ] } ⊢ { tv_n tv lv v0 } 
						newvar_l { tv_n tv lv } ⊢ { tv_n tv lv v1 } 
						newvar_l { tv_n tv lv } ⊢ { tv_n tv lv v2 } 
						$ v2 ⊢ v2,ya0
						T.iug { tv_n tv lv RP.cns3◂{ v0 v1 TX.arr◂v2 } yd } ⊢ { tv_n tv _ _ _ }
						$ ya0 ⊢ ya0,ya0_0 
						alc_type_k.f_i { tav tv_n tv %[ 0r ] ya0_0 } ⊢ { tav tv_n tv c_n pa0 } 
						inc_x glv_n ⊢ { rm0 glv_n } 
						inc_x glv_n ⊢ { rm2 glv_n } 
						$ rm0 ⊢ rm0,rm00 
						$ a0 ⊢ a0,a00 
						$ a1 ⊢ a1,a1_0 
						$ RP.cns3◂{ a00 a1_0 stt_v.arr_reg◂{ rm00 ya0 } } ⊢ pd1 
						l1 { evv a0 e0 } ⊢ { evv e0 }
						inc_x lb_n ⊢ { lb2 lb_n } 
						inc_x lb_n ⊢ { lb3 lb_n }
						inc_x lb_n ⊢ { lb_e lb_n } 
						inc_x lb_n ⊢ { lb4 lb_n } 
						inc_x lb_n ⊢ { lb5 lb_n } 
						inc_x lb_n ⊢ { lb_m1 lb_n } 
						inc_x lb_n ⊢ { lb_m2 lb_n }
						inc_x lb_n ⊢ { lb_m3 lb_n }  
						^ rm0,rm2,lb2,lb3,c_n,lb_e,lb4,lb5,lb_m1,lb_m2,lb_m3 ⊢ _,_,_,lb3,c_n,_,_,_,_,_,_,s0 
							`	push rdi 
							"\timul rdi," 4d' "\n" 
							`	lea rsi,[8+8*rdi]
							`	mov rdi,1 
							` C_CALL_SF calloc
							`	pop rdi 
							"\tmov GLX(" 0d' "),rax\n" 
							`	mov QWORD [rax],rdi 
							`	push DST_REG
							`	lea DST_REG,[rax+8] 
							`	mov rax,rdi 
							`	and rax,3  
							`	and rdi,~3
							"\tmov GLX(" 1d' "),rdi\n"  
							"\tjmp QWORD [LB_" 6d' "+8*rax]\n" 
							"LB_" 6d' ": dq LB_" 2d' ",LB_" 8d' ",LB_" 9d' ",LB_" 10d' "\n"  
							"LB_" 10d' ":\n" 
							"\tcall LB_" 5d' "\n" 
							"LB_" 9d' ":\n" 
							"\tcall LB_" 5d' "\n" 
							"LB_" 8d' ":\n" 
							"\tcall LB_" 5d' "\n" 
							"\tmov rdi,GLX(" 1d' ")\n" 							
							"LB_" 2d' ":\n" 
							`	cmp rdi,0 
							"\tjz LB_" 3d' "\n" 
							"\tmov GLX(" 1d' "),rdi\n"  
							"\tcall LB_" 5d' "\n" 
							"\tcall LB_" 5d' "\n" 
							"\tcall LB_" 5d' "\n" 
							"\tcall LB_" 5d' "\n" 
							"\tmov rdi,GLX(" 1d' ")\n" 
							`	sub rdi,4
							"\tjmp LB_" 2d' "\n"
							"LB_" 5d' ":\n"  
							//
						rp8.add_s8 { e0 s0 } ⊢ e0 
						rpc.ptn { gfl ⟦⟧ tv_n tv tav evv lb_n glv_n a1 { eds e0 } } ⊢ { gfl fl tv_n tv tav evv lb_n glv_n a1 p1 { eds e0 } }					
						rpc.adt_lp { gfl fl tv_n tv tav evv lb_n glv_n { eds eg0 } } ⊢ { gfl tv_n tv tav evv lb_n glv_n { eds eg0 } }
						mov_ptn2.to_sgm_ptn { e0 { evv tav tv_n tv eds } glv_n p1 pa0 } ⊢ { e0 { evv tav tv_n tv eds } glv_n }
						^ lb3,c_n ⊢ _,_,sc2	
							"\tlea DST_REG,[DST_REG+8*" 1d' "]\n"
							`	ret 
							"LB_" 0d' ":\n"
							`	pop DST_REG
							//	
						rp8.add_s8 { e0 sc2 } ⊢ e0				
						∎ { gfl irv evv tav tv_n tv glv_n lb_n { eds eg0 e0 } pd1 }
					∐. . 
						» "mk_arr 0" _ ⊢ ee 
							_emt ee ⊢ ee 
							∎| 
			
				∎∎ 
			§§ lc_code 
				¶ rf 	
					∐ rf_t : _r64
					∐ rf_f : _r64 
					∐ rf_k : _r64  
				§§ rep_movsb
					§ 
						@.f { ip0 glv_n lb_n evv irv e0 } 
							∐ ip0 ⊢ RP.rcd◂l0; l0 ⊢ _cns◂{ a0 l0 }; l0 ⊢ _cns◂{ a1 l0 }; l0 ⊢ _cns◂{ a2 l0 }; l0 ⊢ _cns◂{ a3 l0 }; l0 ⊢ _cns◂{ a4 l0 };l0 ⊢ _nil◂{} . 
								ast.r64_of_rt { evv a0 } ⊢ { evv c0 } 
								ast.s8_of_rt { evv a1 } ⊢ { evv s0 } 
								ast.r64_of_rt { evv a2 } ⊢ { evv o0 } 
								ast.s8_of_rt { evv a3 } ⊢ { evv s1 } 
								ast.r64_of_rt { evv a4 } ⊢ { evv o1 } 
									f_c0 { c0 e0 } ⊢ { e0 c0 }
								f_s0 { s0 lb_n e0 } ⊢ { lb_n e0 s0 }
								f_o0 { o0 e0 } ⊢ { e0 o0 }
								f_s1 { s1 glv_n lb_n e0 } ⊢ { glv_n lb_n e0 s1 } 
								f_o1 { o1 e0 } ⊢ { e0 o1 }
								$ RP.cns5◂{ c0 s0 o0 s1 o1 } ⊢ p1 
								^ _ ⊢ sc0 
									`	mov rsi,QWORD [REP_MOVSB_VCT]
									##`	pop rsi 
									`	push rcx 
									`	mov rcx,rax 
									`	cld 
									`	rep movsb
									`	pop rcx 
									// 
								rp8.add_s8 { e0 sc0 } ⊢ e0
								∎ { glv_n lb_n evv irv e0 p1 }
							∐. . 
								∎| 
						@.f_c0 { c0 e0 } 
							$ c0 ⊢ 
							∐ ast.im_of◂c0 . 
								mov.rax_im { c0 e0 } ⊢ { c0 e0 } 
								∎ { e0 stt_v.r64_im◂c0 }
							∐. ast.hp_of◂r0 . 
								mov.rax_idx { r0 e0 } ⊢ { r0 e0 }
								∎ { e0 stt_v.r64_reg◂r0 }
						@.f_s0 { s0 lb_n e0 } 
							$ s0 ⊢ 
							∐ ast.im_of◂s0 . 
								_s8_len s0 ⊢ { s0 ls0 } 
								inc_x lb_n ⊢ { lb0 lb_n } 
								inc_x lb_n ⊢ { lb1 lb_n }  
								» 0r _ ⊢ x0 
								mk_db { s0 x0 } ⊢ { s0 x0 ss0 }
								^ lb0,lb1,ss0,ls0 ⊢ _,_,_,_,sc0 
									"\tjmp LB_" 0d' "\n"
									"\tLB_ " 1d' ": db " 2' "\n" 
									"LB_" 0d' ":\n" 
									"\tmov rsi,LB_" 1d' "\n" 
									"\tmov rdi," 3d' "\n"
									"\tsub rdi,rax\n" // 
								rp8.add_s8 { e0 sc0 } ⊢ e0
								∎ { lb_n e0 stt_v.s8_im◂s0 }
							∐. ast.hp_of◂r0 . 
								^ r0 ⊢ r0,sc0 
									"\tmov rsi,GLX(" 0d' ")\n" 
									"\tmov rdi,0x0000_ffff_ffff_ffff\n"
									"\tand rdi,[rsi]\n"
									"\tsub rdi,rax\n" 
									"\tadd rsi,8\n" // 
								rp8.add_s8 { e0 sc0 } ⊢ e0
								∎ { lb_n e0 stt_v.s8_reg◂r0 }  
						@.f_o0 { o0 e0 } 
							$ o0 ⊢ 
							∐ ast.im_of◂o0 . 
								^ o0 ⊢ o0,sc0 
									"\tcmp rdi," 0d' "\n" 
									"\tjl err_bc\n"
									"\tadd rsi," 0d' "\n" 
									`	mov QWORD [REP_MOVSB_VCT],rsi 
									##`	push rsi 
									// 
								rp8.add_s8 { e0 sc0 } ⊢ e0
								∎ { e0 stt_v.r64_im◂o0 } 
							∐. ast.hp_of◂r0 . 
								^ r0 ⊢ r0,sc0 
									"\tcmp rdi,GLX(" 0d' ")\n" 
									"\tjl err_bc\n"
									"\tadd rsi,GLX(" 0d' ")\n"
									`	mov QWORD [REP_MOVSB_VCT],rsi 
									// 
								rp8.add_s8 { e0 sc0 } ⊢ e0
								∎ { e0 stt_v.r64_reg◂r0 } 
						@.f_s1 { s1 glv_n lb_n e0 } 
							$ s1 ⊢ 
							∐ ast.im_of◂s1 . 
								_s8_len s1 ⊢ { s1 ls1 } 
								^ _ ⊢ sc0 
									"\tmov QWORD [REP_MOVSB_VCT+8],rax\n" // 
								rp8.add_s8 { e0 sc0 } ⊢ e0 
								mk_s8 s1 ⊢ { s1 es1 }
								rp8.cct { e0 es1 } ⊢ e0 
								inc_x glv_n ⊢ { rm0 glv_n } 
								^ rm0,ls1 ⊢ rm0,_,sc0 
									"\tmov GLX(" 0d' "),rax\n" 
									`	lea rsi,[rax+8]
									`	mov rax,QWORD [REP_MOVSB_VCT+8]
									"\tmov rdi," 1d' "\n"
									`	sub rdi,rax
									// 
								rp8.add_s8 { e0 sc0 } ⊢ e0 
								∎ { glv_n lb_n e0 stt_v.s8_reg◂rm0 }
							∐. ast.hp_of◂r0 . 
								^ r0 ⊢ r0,s0 
									"\tmov rsi,GLX(" 0d' ")\n" 
									"\tmov rdi,0x0000_ffff_ffff_ffff\n"
									"\tand rdi,[rsi]\n"
									`	add rsi,8 
									`	sub rdi,rax 
									// 
								rp8.add_s8 { e0 s0 } ⊢ e0
								$ stt_v.s8_reg◂r0 ⊢ p1 
								∎ { glv_n lb_n e0 p1 }  
						@.f_o1 { o1 e0 } 
							$ o1 ⊢ 
							∐ ast.im_of◂o1 . 
								^ o1 ⊢ o1,sc0 
									"\tcmp rdi," 0d' "\n" 
									"\tjl err_bc\n"
									"\tadd rsi," 0d' "\n"
									`	mov rdi,rsi
									// 
								rp8.add_s8 { e0 sc0 } ⊢ e0
								∎ { e0 stt_v.r64_im◂o1 } 
							∐. ast.hp_of◂r0 . 
								^ r0 ⊢ r0,sc0 
									"\tcmp rdi,GLX(" 0d' ")\n" 
									"\tjl err_bc\n"
									"\tadd rsi,GLX(" 0d' ")\n" 
									`	mov rdi,rsi 
									// 
								rp8.add_s8 { e0 sc0 } ⊢ e0
								∎ { e0 stt_v.r64_reg◂r0 } 
					∎∎
					§§ sts 
						§ 
						@.f { ip0 glv_n evv e0 } 
							∐ ip0 ⊢ RP.rcd◂l0; l0 ⊢ _cns◂{ a0 l0 }; l0 ⊢ _cns◂{ a1 l0 }; l0 ⊢ _cns◂{ a2 l0 }; l0 ⊢ _nil◂{} . 
								ast.s8_of_rt { evv a0 } ⊢ { evv s0 } 
								ast.r64_of_rt { evv a1 } ⊢ { evv o0 } 
								ast.r64_of_rt { evv a2 } ⊢ { evv c0 } 
								f_s0 { glv_n s0 e0 } ⊢ { glv_n e0 s0 } 
								f_o0 { o0 e0 } ⊢ { e0 o0 }
								f_c0 { c0 e0 } ⊢ { e0 c0 }
								∎ { glv_n evv e0 RP.cns3◂{ s0 o0 c0 } }
							∐. . 
								∎| 
						@.f_s0 { glv_n s0 e0 } 
							$ s0 ⊢ 
							∐ ast.im_of◂s0 . 
								_s8_len s0 ⊢ { s0 ls0 }  
								mk_s8 s0 ⊢ { s0 es0 }
								rp8.cct { e0 es0 } ⊢ e0 
								inc_x glv_n ⊢ { rm0 glv_n } 
								^ rm0,ls0 ⊢ rm0,_,sc0 
									"\tmov GLX(" 0d' "),rax\n" 
									"\tmov rdi," 1d' "\n" // 
								rp8.add_s8 { e0 sc0 } ⊢ e0 
								∎ { glv_n e0 stt_v.s8_reg◂rm0 }
							∐. ast.hp_of◂r0 . 
								^ r0 ⊢ r0,s0 
									"\tmov rax,GLX(" 0d' ")\n" 
									"\tmov rdi,0x0000_ffff_ffff_ffff\n"
									"\tand rdi,[rax]\n" // 
								rp8.add_s8 { e0 s0 } ⊢ e0
								∎ { glv_n e0 stt_v.s8_reg◂r0 }  
						@.f_o0 { o0 e0 } 
							$ o0 ⊢ 
							∐ ast.im_of◂o0 . 
								^ o0 ⊢ o0,sc0 
									"\tcmp rdi," 0d' "\n" 
									"\tjle err_bc\n"
									"\tmov rsi," 0d' "\n" 
									// 
								rp8.add_s8 { e0 sc0 } ⊢ e0
								∎ { e0 stt_v.r64_im◂o0 } 
							∐. ast.hp_of◂r0 . 
								^ r0 ⊢ r0,sc0 
									"\tcmp rdi,GLX(" 0d' ")\n" 
									"\tjle err_bc\n"
									"\tmov rsi,GLX(" 0d' ")\n"
									// 
								rp8.add_s8 { e0 sc0 } ⊢ e0
								∎ { e0 stt_v.r64_reg◂r0 } 
						@.f_c0 { c0 e0 } 
							$ c0 ⊢ 
							∐ ast.im_of◂c0 . 
								^ c0 ⊢ c0,sc0 
									"\tmov BYTE [rax+8+rsi]," 0d' "\n" 
									// 
								rp8.add_s8 { e0 sc0 } ⊢ e0
								∎ { e0 stt_v.r64_im◂c0 } 
							∐. ast.hp_of◂r0 . 
								^ r0 ⊢ r0,sc0 
									"\tmov rdi,GLX(" 0d' ")\n" 
									"\tmov BYTE [rax+8+rsi],dil\n" // 
								rp8.add_s8 { e0 sc0 } ⊢ e0
								∎ { e0 stt_v.r64_reg◂r0 }   
					∎∎
				§§ exp_s8 
					§ @.lp0 { ep0 evv rr i irv sl dl dll } 
						∐ sl ⊢ _cns◂{ s sl }; dl ⊢ _cns◂{ d dl } .
							idx.csm { { evv irv } s } ⊢ { { evv irv } ip } 
							$ ip ⊢ ip,ip0
							idx.crt { irv d ip0 dll } ⊢ { irv dll }
							$ ip ⊢ ip,ip0 
							» "," _ ⊢ sc0 
							rp8.add_s8 { ep0 sc0 } ⊢ ep0 
							ast.pnt.rt { evv ip0 } ⊢ { evv sp0 } 
							rp8.add_s8 { ep0 sp0 } ⊢ ep0 
							_inc i ⊢ i 
							lp0 { ep0 evv rr i irv sl dl dll } ⊢ { ep0 evv i irv dll ar rr } 
							_dec i ⊢ i 
							set_tv { ar i ip } ⊢ { ar i } 
							∎ { ep0 evv i irv dll ar rr } 
						∐ sl ⊢ _nil◂{}; dl ⊢ _cns◂{ d dl }; dl ⊢ _nil◂{} .  
							$ rr ⊢ rr,rr0 
							idx.crt { irv d RP.atm◂ast.hp◂{ rr0 ast.hp.opq◂{} } dll } ⊢ { irv dll }
							ini_tv_n i ⊢ { i ar }
							∎ { ep0 evv i irv dll ar rr }
						∐. . 
							» "exp_s8 0" _ ⊢ ee 
							_emt ee ⊢ ee 
							∎| 
					§ 
						@.ip2 { evv l e0 } 
							$ l ⊢ 
							∐ _cns◂{ p1 l } . 
								∐ p1 ⊢ ast.exp_s8_cst◂s1 . 
									ast.s8_of_k { evv s1 } ⊢ { evv s1 } 
									rp8.add_s8 { e0 s1 } ⊢ e0 
									ip2 { evv l e0 } ⊢| 
								∐. . 
									rp8.to_s8 e0 ⊢ s0
									ip0 { evv l } ⊢ { evv l } 
									∎ { evv ⟦ ast.exp_s8_cst◂ast.k_s8◂s0 p1 < l ⟧ } 
							∐. _nil◂{} . 
								rp8.to_s8 e0 ⊢ s0
								∎ { evv ⟦ ast.exp_s8_cst◂ast.k_s8◂s0 ⟧ }
						@.ip0 { evv l }  
							$ l ⊢ 
							∐ _cns◂{ p0 l } . 
								∐ p0 ⊢ ast.exp_s8_cst◂s0 . 
									ast.s8_of_k { evv s0 } ⊢ { evv s0 } 
									ip2 { evv l rp8.of_s8◂s0 } ⊢| 
								∐. . 
									ip0 { evv l } ⊢ { evv l } 
									∎ { evv ⟦ p0 < l ⟧ }
							∐. _nil◂{} . 
								∎ { evv ⟦⟧ } 
					§ 
						@.s8 { v_n evv { eds e0 } ld lb_n irv ar s0 rr pl }
							_s8_len s0 ⊢ { s0 l0 } 
							_add { ld l0 } ⊢ { ld l0 } 
							lp1 { v_n evv { eds e0 } ld lb_n irv ar rr pl } ⊢ { v_n evv { eds e0 } ld lb_n irv ar }
							_sub { ld l0 } ⊢ { ld l0 }
							inc_x lb_n ⊢ { lb0 lb_n }  
							data_s8 { eds lb0 s0 } ⊢ { eds lb0 s0 }
							^ lb0,l0 ⊢ lb0,l0,sr 
								"\tlea rsi,[LB_" 0d' "+" 1d' "-1]\n" 
								"\tmov rcx," 1d' "\n" 
								`	rep movsb
								//
							rp8.add_s8 { e0 sr } ⊢ e0 
							∎ { v_n evv { eds e0 } ld lb_n irv ar }
						@.d # { v_n evv { eds e0 } ld lb_n irv ar x0 rr pl }
							^ x0 ⊢ x0,s0 
								0d' // 
							s8 { v_n evv { eds e0 } ld lb_n irv ar s0 rr pl } ⊢| 
						@.s8_for { v_n evv { eds e0 } ld lb_n irv ar x0 s0 rr pl }
							_s8_len s0 ⊢ { s0 l0 } 
							$ l0 ⊢ l0,l00 
							_imul { l00 x0 } ⊢ { l00 x0 }
							_add { ld l00 } ⊢ { ld l00 } 
							lp1 { v_n evv { eds e0 } ld lb_n irv ar rr pl } ⊢ { v_n evv { eds e0 } ld lb_n irv ar }
							_sub { ld l00 } ⊢ { ld l00 }
							inc_x lb_n ⊢ { lb1 lb_n }  
							data_s8 { eds lb1 s0 } ⊢ { eds lb1 s0 } 
							inc_x lb_n ⊢ { lb2 lb_n }
							inc_x lb_n ⊢ { lb3 lb_n }
							^ lb1,l0,x0,lb2,lb3 ⊢ lb1,l0,x0,lb2,lb3,sr 
								"\tmov rax," 2d' "\n" 
								"LB_" 3d' ":\n"
								`	cmp rax,0
								"\tjz LB_" 4d' "\n" 
								`	sub rax,1
								"\tlea rsi,[LB_" 0d' "+" 1d' "-1]\n" 
								"\tmov rcx," 1d' "\n" 
								`	rep movsb 
								"\tjmp LB_" 3d' "\n" 
								"LB_" 4d' ":\n"
								//
							rp8.add_s8 { e0 sr } ⊢ e0 
							∎ { v_n evv { eds e0 } ld lb_n irv ar } 
					@.lp1 { v_n evv { eds e0 } ld lb_n irv ar rr pl }
						$ pl ⊢ 
						∐ _cns◂{ ps pl } . 
							$ ps ⊢ 
							∐ ast.exp_s8_cst◂c0 . 
								ast.s8_of_k { evv c0 } ⊢ { evv s0 } 
								mk_esc_s8 s0 ⊢ { s0 ss0 } 
								^ ss0 ⊢ _,sc0 
									"; \"" 0' "\"\n" // 
								rp8.add_s8 { e0 sc0 } ⊢ e0 
								s8 { v_n evv { eds e0 } ld lb_n irv ar s0 rr pl } ⊢|									
							∐ ast.exp_s8_idx◂{ f0 j0 } . 
								^ j0 ⊢ j0,sc0 
									"; " 0d' "'\n" // 
								rp8.add_s8 { e0 sc0 } ⊢ e0 
								lod_tv { ar j0 } ⊢ { ar j0 p0 }
								$ f0 ⊢ 
								∐ ast.fmt_s◂{} . 
									ast.s8_of_rt { evv p0 } ⊢ { evv s0 } 
									$ s0 ⊢ 
									∐ ast.im_of◂s0 . 
										s8 { v_n evv { eds e0 } ld lb_n irv ar s0 rr pl } ⊢|									
									∐. ast.hp_of◂r0 . 
										^ r0,v_n ⊢ r0,v_n,s1 
												"\tmov rsi,GLX(" 0d' ")\n" 
												`	mov rax,0x0000_ffff_ffff_ffff 
												`	and rax,[rsi] 
												`	add rdi,rax 
												"\tmov QWORD [EXP_S8_VCT+" 1d' "],rax\n" // 
											rp8.add_s8 { e0 s1 } ⊢ e0
											incq v_n ⊢ v_n 
											lp1 { v_n evv { eds e0 } ld lb_n irv ar rr pl } ⊢ { v_n evv { eds e0 } ld lb_n irv ar }
											decq v_n ⊢ v_n 
											^ r0,v_n ⊢ _,v_n,sr 
												"\tmov rsi,GLX(" 0d' ")\n"  
												"\tmov rcx,QWORD [EXP_S8_VCT+" 1d' "]\n" 
												`	lea rsi,[rsi+7+rcx]
												`	rep movsb
												//
											rp8.add_s8 { e0 sr } ⊢ e0 
											∎ { v_n evv { eds e0 } ld lb_n irv ar } 					
								∐ ast.fmt_d◂{} .
									ast.r64_of_rt { evv p0 } ⊢ { evv x0 } 
									$ x0 ⊢ 
									∐ ast.im_of◂x0 . 
										d { v_n evv { eds e0 } ld lb_n irv ar x0 rr pl } ⊢|									
									∐. ast.hp_of◂r0 . 
										^ r0,v_n ⊢ r0,v_n,s1 
											"\tmov rax,GLX(" 0d' ")\n" 
											push_c_regs 
											`	push rdi 
											"\tlea QWORD rdi,[EXP_S8_VCT+" 1d' "]\n" 
											"\tmov rdx,rax\n" 
											`	mov rsi,fmt_d
											` xor rax,rax
											`	C_CALL sprintf
											`	pop rdi
											pop_c_regs 
											`	add rdi,rax 
											"\tmov QWORD [EXP_S8_VCT+128+" 1d' "],rax\n" 
											// 
										rp8.add_s8 { e0 s1 } ⊢ e0
										» 136r _ ⊢ w0 
										_add { v_n w0 } ⊢ { v_n w0 }
										lp1 { v_n evv { eds e0 } ld lb_n irv ar rr pl } ⊢ { v_n evv { eds e0 } ld lb_n irv ar }
										_sub { v_n w0 } ⊢ { v_n w0 }
										^ v_n ⊢ v_n,sr 
											"\tmov rcx,QWORD [EXP_S8_VCT+128+" 0d' "]\n" 
											"\tlea rsi, [EXP_S8_VCT+" 0d' "+rcx-1]\n" 
											`	rep movsb
											//
										rp8.add_s8 { e0 sr } ⊢ e0 
										∎ { v_n evv { eds e0 } ld lb_n irv ar } 	 
								∐ ast.fmt_x◂{} .
									ast.r64_of_rt { evv p0 } ⊢ { evv x0 } 
									$ x0 ⊢ 
									∐ ast.im_of◂x0 . 
										d { v_n evv { eds e0 } ld lb_n irv ar x0 rr pl } ⊢|									
									∐. ast.hp_of◂r0 . 
										^ r0,v_n ⊢ r0,v_n,s1 
											"\tmov rax,GLX(" 0d' ")\n" 
											push_c_regs 
											`	push rdi 
											"\tlea QWORD rdi,[EXP_S8_VCT+" 1d' "]\n" 
											"\tmov rdx,rax\n" 
											`	mov rsi,fmt_d
											` xor rax,rax
											`	C_CALL sprintf
											`	pop rdi
											pop_c_regs 
											`	add rdi,rax 
											"\tmov QWORD [EXP_S8_VCT+128+" 1d' "],rax\n" 
											// 
										rp8.add_s8 { e0 s1 } ⊢ e0
										» 136r _ ⊢ w0 
										_add { v_n w0 } ⊢ { v_n w0 }
										lp1 { v_n evv { eds e0 } ld lb_n irv ar rr pl } ⊢ { v_n evv { eds e0 } ld lb_n irv ar }
										_sub { v_n w0 } ⊢ { v_n w0 }
										^ v_n ⊢ v_n,sr 
											"\tmov rcx,QWORD [EXP_S8_VCT+128+" 0d' "]\n" 
											"\tlea rsi, [EXP_S8_VCT+" 0d' "+rcx-1]\n" 
											`	rep movsb
											//
										rp8.add_s8 { e0 sr } ⊢ e0 
										∎ { v_n evv { eds e0 } ld lb_n irv ar } 	
								∐. ast.fmt_p◂{} .
									∎| 
							∐. ast.exp_s8_for◂{ j0 s0 } . 
								ast.s8_of_k { evv s0 } ⊢ { evv s0 } 
								mk_esc_s8 s0 ⊢ { s0 ss0 } 
								^ j0,ss0 ⊢ j0,_,sc0 
									"; " 0d' "'*\"" 1' "\"\n" // 
								rp8.add_s8 { e0 sc0 } ⊢ e0 
								lod_tv { ar j0 } ⊢ { ar j0 p0 }
								ast.r64_of_rt { evv p0 } ⊢ { evv x0 } 
								$ x0 ⊢ 
								∐ ast.im_of◂x0 . 
									s8_for { v_n evv { eds e0 } ld lb_n irv ar x0 s0 rr pl } ⊢|									
								∐. ast.hp_of◂r0 . 
									_s8_len s0 ⊢ { s0 l0 } 
									^ r0,l0,v_n ⊢ r0,l0,v_n,s1 
										"\tmov rsi,GLX(" 0d' ")\n" 
										"\tmov QWORD [EXP_S8_VCT+" 2d' "],rsi\n" 
										"\timul rsi," 1d' "\n" 
										`	add rdi,rsi 
										// 
									rp8.add_s8 { e0 s1 } ⊢ e0
									incq v_n ⊢ v_n 
									lp1 { v_n evv { eds e0 } ld lb_n irv ar rr pl } ⊢ { v_n evv { eds e0 } ld lb_n irv ar }
									decq v_n ⊢ v_n 
									inc_x lb_n ⊢ { lb1 lb_n }  
									data_s8 { eds lb1 s0 } ⊢ { eds lb1 s0 } 
									inc_x lb_n ⊢ { lb2 lb_n }
									inc_x lb_n ⊢ { lb3 lb_n }
									^ lb1,l0,lb2,lb3,v_n ⊢ _,_,_,_,v_n,sr 
										"\tmov rax,QWORD [EXP_S8_VCT+" 4d' "]\n" 
										"LB_" 2d' ":\n"
										`	cmp rax,0
										"\tjz LB_" 3d' "\n"
										`	sub rax,1
										"\tlea rsi,[LB_" 0d' "+" 1d' "-1]\n" 
										"\tmov rcx," 1d' "\n" 
										`	rep movsb 
										"\tjmp LB_" 2d' "\n" 
										"LB_" 3d' ":\n" 
										//
									rp8.add_s8 { e0 sr } ⊢ e0 
									∎ { v_n evv { eds e0 } ld lb_n irv ar } 	 
						∐. _nil◂{} . 
							^ ld,rr ⊢ ld,_,s1 
								"\tadd rdi," 0d' "\n" 
								`	push rdi 
								`	call mlc_s8 
								`	pop rdi
								"\tmov GLX(" 1d' "),rax\n" 
								`	lea rdi,[rax+7+rdi]
								`	std 
								`	mov QWORD [tmp],rcx 
								//
							rp8.add_s8 { e0 s1 } ⊢ e0 
							∎ { v_n evv { eds e0 } ld lb_n irv ar }
					§ f { gfl evv tv_n tv tav glv_n lb_n irv sl dl pl { eg0 eds e0 } }
							ip0 { evv pl } ⊢ { evv pl } 
						inc_x glv_n ⊢ { rr glv_n } 
						lp0 { rp8.e◂{} evv rr %[ 0r ] irv sl dl ⟦⟧ } ⊢ { ep0 evv i irv dll ar rr }
						rp8.add_s8 { e0 %[ "; ^ " ] } ⊢ e0 
						rp8.cct { e0 ep0 } ⊢ e0 
						rp8.add_s8 { e0 %[ " ⊢ ..\n" ] } ⊢ e0 
						rp8.add_s8 { e0 %[ "\tmov rdi,0\n" ] } ⊢ e0 
						lp1 { %[ 0r ] evv { eds e0 } %[ 0r ] lb_n   irv ar rr pl } ⊢ { v_n evv { eds e0 } ld lb_n   irv ar }
						rp8.add_s8 { e0 %[ "\tmov rcx,QWORD [tmp]\n" ] } ⊢ e0 
						dlt.f { gfl evv tv_n tv tav lb_n glv_n dll { eg0 eds e0 } } ⊢ { gfl evv tv_n tv tav lb_n glv_n { eg0 eds e0 } }
						∎ { gfl evv tv_n tv tav glv_n lb_n irv { eg0 eds e0 } }
					∎∎ 
				§§ op2 
					§ op_dmy # { x y } 
						∎| 
					§ @.f◂◂OP { fb op { evv tav } glv_n lb_n a irv is }
						$ rp8.e◂{} ⊢ e0 
						∐ is ⊢ RP.rcd◂l; l ⊢ _cns◂{ a0 l }; l ⊢ _cns◂{ a1 l }; l ⊢ _nil◂{} . 
							ast.r64_of_rt { evv a0 } ⊢ { evv x0 } 
							ast.r64_of_rt { evv a1 } ⊢ { evv x1 } 
							$ x0 ⊢ 
							∐ ast.hp_of◂r0 .
								$ x1 ⊢ 
								∐ ast.hp_of◂r1 . 
									^ r0,r1,op ⊢ r0,r1,op,ec1 
										"\tmov rdi,GLX(" 1d' ")\n" 
										"\t" 2' " GLX(" 0d' "),rdi\n" //
									rp8.add_s8 { e0 ec1 } ⊢ e0 
									$ RP.cns2◂{ stt_v.r64_reg◂r0 stt_v.r64_reg◂r1 } ⊢ is 
									∎ { { evv tav } glv_n lb_n a irv is e0 }
								∐. ast.im_of◂x1 .
									^ r0,x1,op ⊢ r0,x1,_,ec1 
										"\tmov rdi," 1d' "\n" 
										"\t" 2' " GLX(" 0d' "),rdi\n" 
										//
									$ RP.cns2◂{ stt_v.r64_reg◂r0 stt_v.r64_im◂x1 } ⊢ is
									rp8.add_s8 { e0 ec1 } ⊢ e0 
									∎ { { evv tav } glv_n lb_n a irv is e0 }
							∐. ast.im_of◂x0 . 
								$ x1 ⊢ 
								∐ ast.hp_of◂r1 . 
									inc_x glv_n ⊢ { rm0 glv_n } 
									^ rm0,r1,x0,op ⊢ rm0,r1,x0,op,ec1 
										"\tmov rdi," 2d' "\n" 
										"\t" 3' " rdi,GLX(" 1d' ")\n" 
										"\tmov GLX(" 0d' "),rdi\n"  
										//
									rp8.add_s8 { e0 ec1 } ⊢ e0 
									$ RP.cns2◂{ stt_v.r64_reg◂rm0 stt_v.r64_reg◂r1 } ⊢ is 
									∎ { { evv tav } glv_n lb_n a irv is e0 }
								∐. ast.im_of◂x1 . 
									∐ fb ⊢ bl.t◂{} . 
										$ RP.cns2◂{ stt_v.r64_im◂x0 stt_v.r64_im◂x1 } ⊢ is 						
										∎ { { evv tav } glv_n lb_n a irv is e0 }
									∐. . 
										inc_x glv_n ⊢ { rm0 glv_n } 
										inc_x glv_n ⊢ { rm1 glv_n } 
										^ rm0,rm1,x0,x1,op ⊢ rm0,rm1,_,_,_,sc0 
											"\tmov rdi," 2d' "\n" 
											"\tmov rsi," 3d' "\n" 
											"\t" 4' " rdi,rsi\n" 
											"\tmov GLX(" 0d' "),rdi\n" 
											"\tmov GLX(" 1d' "),rsi\n" //
											rp8.add_s8 { e0 sc0 } ⊢ e0 
										$ RP.cns2◂{ stt_v.r64_reg◂rm0 stt_v.r64_reg◂rm1 } ⊢ is 
										∎ { { evv tav } glv_n lb_n a irv is e0 }	
						∐. . 
							» "lc_code.f _imul 3" _ ⊢ se 
							_emt se ⊢ se 
							∎|
					∎∎
				§ op_shr◂◂{ OP OP_N } { evv tav glv_n lb_n a irv is ec0 } 
					∐ is ⊢ RP.rcd◂l; l ⊢ _cns◂{ p0 l }; l ⊢ _cns◂{ p1 l }; l ⊢ _nil◂{} . 
						ast.r64_of_rt { evv p0 } ⊢ { evv x0 } 
						ast.r64_of_rt { evv p1 } ⊢ { evv x1 } 
						$ x0 ⊢ 
						∐ ast.hp_of◂r0 . 
							$ x1 ⊢ 
							∐ ast.hp_of◂r1 . 
								^ r0,r1 ⊢ r0,r1,sc0 
									"\tmov rdi,GLX(" 0d' ")\n" 
									"\tmov rax,GLX(" 1d' ")\n" 
									`	push rcx 
									`	mov rcx,rax
									"\t" OP_N " rdi,cl\n"  
									`	pop rcx 
									"\tmov GLX(" 0d' "),rdi\n" // 
								rp8.add_s8 { ec0 sc0 } ⊢ ec0 
								$ RP.cns2◂{ stt_v.r64_reg◂r0 stt_v.r64_reg◂r1 } ⊢ is1  
								∎ { evv tav glv_n lb_n a irv is1 ec0 }	
						
						∐. ast.im_of◂x1 . 
								^ r0,x1 ⊢ r0,x1,sc0 
									"\t" OP_N " GLX(" 0d' ")," 1d' "\n" // 
								rp8.add_s8 { ec0 sc0 } ⊢ ec0 
								$ RP.cns2◂{ stt_v.r64_reg◂r0 stt_v.r64_im◂x1 } ⊢ is1  
								∎ { evv tav glv_n lb_n a irv is1 ec0 }	
						∐. ast.im_of◂x0 . 
							$ x1 ⊢ 
							∐ ast.hp_of◂r1 . 
								inc_x glv_n ⊢ { rm0 glv_n } 
								^ x0,rm0,r1 ⊢ x0,rm0,r1,sc0 
									"\tmov rdi," 0d' "\n" 
									"\tmov rax,GLX(" 2d' ")\n" 
									`	push rcx 
									`	mov rcx,rax
									"\t" OP_N " rdi,cl\n"  
									`	pop rcx 
									"\tmov GLX(" 1d' "),rdi\n" // 
								rp8.add_s8 { ec0 sc0 } ⊢ ec0
								$ RP.cns2◂{ stt_v.r64_reg◂rm0 stt_v.r64_reg◂r1 } ⊢ is1  
								∎ { evv tav glv_n lb_n a irv is1 ec0 }	
							∐. ast.im_of◂x1 . 
								OP { x0 x1 } ⊢ { x0 x1 } 
								$ RP.cns2◂{ stt_v.r64_im◂x0 stt_v.r64_im◂x1 } ⊢ is1  
								∎ { evv tav glv_n lb_n a irv is1 ec0 }	
						∐. . 
							_emt %[ "op_axm shr 0" ] ⊢ _ 
							∎|
				§ op1◂◂{ OP OP_N } { evv   is ec0 }  
					ast.r64_of_rt { evv is } ⊢ { evv x0 } 
					$ x0 ⊢ 
					∐ ast.hp_of◂r . 
						^ r ⊢ r,ec1 
							"\t" OP_N " GLX(" 0d' "),1\n" 
							//
						rp8.add_s8 { ec0 ec1 } ⊢ ec0
						$ stt_v.r64_reg◂r ⊢ is 
						∎ { evv   is ec0 }
					∐. ast.im_of◂x . 
						OP x ⊢ x 
						∎ { evv   stt_v.r64_im◂x ec0 }
				§ imul { evv glv_n is irv ec0 } 
					∐ is ⊢ RP.rcd◂l; l ⊢ _cns◂{ a0 l }; l ⊢ _cns◂{ a1 l }; l ⊢ _nil◂{} . 
						ast.r64_of_rt { evv a0 } ⊢ { evv x0 } 
						ast.r64_of_rt { evv a1 } ⊢ { evv x1 } 
						$ x0 ⊢ 
						∐ ast.hp_of◂r0 . 
							$ x1 ⊢ 
							∐ ast.hp_of◂r1 . 
								^ r0,r1 ⊢ r0,r1,ec1 
									"\tmov rdi,GLX(" 0d' ")\n" 
									"\timul rdi,GLX(" 1d' ")\n"
									"\tmov GLX(" 0d' "),rdi\n"
									//
								rp8.add_s8 { ec0 ec1 } ⊢ ec0 
								$ RP.cns2◂{ stt_v.r64_reg◂r0 stt_v.r64_reg◂r1 } ⊢ is 
								∎ { evv glv_n is irv ec0 } 
							∐. ast.im_of◂x1 .
								^ r0,x1 ⊢ r0,x1,ec1 
									"\tmov rdi,GLX(" 0d' ")\n" 
									"\timul rdi," 1d' "\n"
									"\tmov GLX(" 0d' "),rdi\n" 
									//
								rp8.add_s8 { ec0 ec1 } ⊢ ec0 
								$ RP.cns2◂{ stt_v.r64_reg◂r0 stt_v.r64_im◂x1 } ⊢ is
								∎ { evv glv_n is irv ec0 } 
						∐. ast.im_of◂x0 . 
							$ x1 ⊢ 
							∐ ast.hp_of◂r1 .  
								inc_x glv_n ⊢ { rm0 glv_n } 
								^ rm0,r1,x0 ⊢ rm0,r1,x0,ec1 
									"\tmov rdi," 2d' "\n" 
									"\timul rdi,GLX(" 1d' ")\n" 
									"\tmov GLX(" 0d' "),rdi\n"  
									//
								rp8.add_s8 { ec0 ec1 } ⊢ ec0 
								$ RP.cns2◂{ stt_v.r64_reg◂rm0 stt_v.r64_reg◂r1 } ⊢ is 
								∎ { evv glv_n is irv ec0 } 
							∐. ast.im_of◂x1 . 
								_imul { x0 x1 } ⊢ { x0 x1 } 
								$ RP.cns2◂{ stt_v.r64_im◂x0 stt_v.r64_im◂x1 } ⊢ is 
								∎ { evv glv_n is irv ec0 } 
					∐. . 
						» "lc_code.f _imul 3" _ ⊢ se 
						_emt se ⊢ se 
						∎|
				§ s8_to_rdi_rsi { eds ec0 lb_n s0 } 
					$ s0 ⊢ 
					∐ ast.im_of◂s0 . 
						inc_x lb_n ⊢ { lb0 lb_n } 
						_s8_len s0 ⊢ { s0 l0 }
						data_s8 { eds lb0 s0 } ⊢ { eds lb0 s0 }
						^ l0,lb0 ⊢ _,_,sc0 
							"\tmov rdi," 0d' "\n" 
							"\tlea rsi,[LB_" 1d' "]\n" // 
						rp8.add_s8 { ec0 sc0 } ⊢ ec0 
						∎ { eds ec0 lb_n }
					∐. ast.hp_of◂r0 . 
						^ r0 ⊢ _,sc0 
							"\tmov rdi,GLX(" 0d' ")\n" 
							"\tlea rsi,[rdi+8]\n"
							"\tmov rdi,QWORD [rdi]\n" //
						rp8.add_s8 { ec0 sc0 } ⊢ ec0 
						∎ { eds ec0 lb_n }
				§ scf { s lb_n ec0 } 
					inc_x lb_n ⊢ { lb0 lb_n } 
					inc_x lb_n ⊢ { lb1 lb_n } 
					^ lb0,lb1,s ⊢ _,_,_,sc0 
						`	cmp rax,rdi
						"\tjge LB_" 0d' "\n"
						` lea rdi,[rsi+rax] 
						`	push rax 
						"\tCALL_SF " 2' "\n" 
						`	pop rbx 
						`	cmp rax,0 
						"\tjz LB_" 0d' "\n" 
						`	lea rax,[rbx+rsi]
						"\tmov rsi,rdi\n"
						`	mov r10,0
						"\tjmp LB_" 1d' "\n"			
						"LB_" 0d' ":\n" 
						`	mov rsi,unt
						`	mov r10,1 
						"LB_" 1d' ":\n" //		
					rp8.add_s8 { ec0 sc0 } ⊢ ec0 
					∎ { lb_n ec0 }
				§ grm_axm { evv lb_n ax axl ec0 } 
					∐ ax'=EX.byt . 
						inc_x lb_n ⊢ { lb0 lb_n } 
						inc_x lb_n ⊢ { lb1 lb_n } 
						^ lb0,lb1 ⊢ _,_,sc0 
							`	cmp rax,rdi
							"\tjge LB_" 0d' "\n" 
							`	movzx rsi,BYTE [rsi+rax]
							`	add rax,1 
							`	mov r10,0 
							"\tjmp LB_" 1d' "\n" 
							"LB_" 0d' ":\n" 
							"\tmov rsi,unt\n"
							"\tmov r10,1\n"  
							"LB_" 1d' ":\n" 
							//
						rp8.add_s8 { ec0 sc0 } ⊢ ec0 
						∎ { evv lb_n ec0 TX.r64◂{} }
					∐ ax'=EX.psc; axl ⊢ _cns◂{ sx axl }; axl ⊢ _nil◂{}; sx ⊢ RP.atm◂sx . 
						ast.s8_of_k { evv sx } ⊢ { evv s } 
						_s8_len s ⊢ { s ls } 
						inc_x lb_n ⊢ { lb0 lb_n } 
						inc_x lb_n ⊢ { lb1 lb_n } 
						^ ls,lb0 ⊢ ls,lb0,sc1 
							"\tlea rdi,[rdi-" 0d' "]\n"
							"\tcmp rax,rdi\n"
							"\tjg LB_" 1d' "\n"
							"\tlea rdi,[rsi+rax]\n" 
							// 
							rp8.add_s8 { ec0 sc1 } ⊢ ec0
							cmp_s8.f { lb0 s } ⊢ { lb0 s e1 }
							rp8.cct { ec0 e1 } ⊢ ec0 
							^ ls,lb0,lb1 ⊢ ls,_,_,sc0 
								"\tadd rax," 0d' "\n" 
								"\tmov rsi,unt\n"
								`	mov r10,0
								"\tjmp LB_" 2d' "\n" 
								"LB_" 1d' ":\n" 
								"\tmov rsi,unt\n" 
								"\tmov r10,1\n"
								"LB_" 2d' ":\n" 
								//
							rp8.add_s8 { ec0 sc0 } ⊢ ec0 
							∎ { evv lb_n ec0 RP.unt◂{} } 
					∐ ax'=EX.scf_d . 
						scf { %[ "scf_d" ] lb_n ec0 } ⊢ { lb_n ec0 }
						∎ { evv lb_n ec0 TX.r64◂{} } 
					∐ ax'=EX.scf_x . 
						scf { %[ "scf_x" ] lb_n ec0 } ⊢ { lb_n ec0 }
						∎ { evv lb_n ec0 TX.r64◂{} } 
					∐ ax'=EX.synt . 
						inc_x lb_n ⊢ { lb0 lb_n } 
						inc_x lb_n ⊢ { lb1 lb_n } 
						inc_x lb_n ⊢ { lb2 lb_n } 
						^ lb0,lb1,lb2 ⊢ _,_,_,sc0 
							"\tjmp LB_" 1d' "\n" 
							"LB_" 0d' ":\n" 
							`	add rax,1 
							"LB_" 1d' ":\n" 
							`	cmp rax,rdi
							"\tjge LB_" 2d' "\n" 
							"\tJZ_SPC BYTE [rsi+rax], LB_" 0d' "\n"  
							"LB_" 2d' ":\n" 
							`	mov rsi,unt
							`	mov r10,0
							//
						rp8.add_s8 { ec0 sc0 } ⊢ ec0 
						∎ { evv lb_n ec0 RP.unt◂{} }
					∐ ax'=EX.line . 
						inc_x lb_n ⊢ { lb0 lb_n } 
						inc_x lb_n ⊢ { lb1 lb_n } 
						inc_x lb_n ⊢ { lb2 lb_n } 
						^ lb0,lb1,lb2 ⊢ _,_,_,sc0 
							"\tjmp LB_" 1d' "\n" 
							"LB_" 0d' ":\n" 
							`	add rax,1 
							"LB_" 1d' ":\n" 
							`	cmp rax,rdi
							"\tjge LB_" 2d' "\n" 
							"\tJZ_LINE_SPC BYTE [rsi+rax], LB_" 0d' "\n"  
							"LB_" 2d' ":\n" 
							`	mov rsi,unt
							`	mov r10,0
							//
						rp8.add_s8 { ec0 sc0 } ⊢ ec0 
						∎ { evv lb_n ec0 RP.unt◂{} }
					∐. . 
						_emt %[ "grm_axm 0" ] ⊢ _ 
						_emt ax ⊢ _ 
						\\_emt axl ⊢ _ 
						lst.pnt_l◂◂{ ast.pnt.ct_ptn " " } { evv axl } ⊢ { evv ee }
						_emt ee ⊢ _ 
						∎| 
			¶ 
				@.rt_atm r',e' 	
					∐ hp : { r' ast.hp.t }
					∐ hp_im : ast.cst◂e'  
					∐ btm : {} 
					∐ adt_v : adt_v 
				@.adt_v = _r64 
				@.rt r',e' = RP.t◂(rt_atm◂r'◂e')
				@.adt r',e' 
					∐ stt : { _r64 _r64 rt◂r'◂e' } 
					∐ dyn : { { _r64 _lst◂(type.t◂_r64) } r' r' }
			§ 
				@.mtc_rt_of { { rirv_n rirv } p } 
					$ p ⊢ 
					∐ RP.rcd◂l .
						lst.map_l◂◂mtc_rt_of { { rirv_n rirv } l } ⊢ { { rirv_n rirv } l } 
						∎ { { rirv_n rirv } RP.rcd◂l }
					∐. RP.atm◂a .
						$ a ⊢ 
						∐ ast.stt_adt◂{ ia na pa } . 
							mtc_rt_of { { rirv_n rirv } pa } ⊢ { { rirv_n rirv } pa } 
							inc_x rirv_n ⊢ { i rirv_n } 
							hsh_tbl.r64.set { rirv { i stt◂{ ia na pa } } } ⊢ { rirv { i o } } 
							nnt o ⊢ {} 
							∎ { { rirv_n rirv } RP.atm◂adt_v◂i }
						∐ ast.dyn_adt◂da . 
							inc_x rirv_n ⊢ { i rirv_n } 
							hsh_tbl.r64.set { rirv { i dyn◂da } } ⊢ { rirv { i o } } 
							nnt o ⊢ {} 
							∎ { { rirv_n rirv } RP.atm◂adt_v◂i }
						∐ ast.btm◂{} .
							∎ { { rirv_n rirv } RP.atm◂btm◂{} }
						∐ ast.hp_im◂c . 
							∎ { { rirv_n rirv } RP.atm◂hp_im◂c }
						∐. ast.hp◂h . 
							∎ { { rirv_n rirv } RP.atm◂hp◂h }
			§ 
				@.rt_of { { rirv_n rirv } p }
					$ p ⊢ 
					∐ RP.rcd◂l .
						lst.map_l◂◂rt_of { { rirv_n rirv } l } ⊢ { { rirv_n rirv } l } 
						∎ { { rirv_n rirv } RP.rcd◂l }
					∐. RP.atm◂a .
						$ a ⊢ 
						∐ adt_v◂v . 
							hsh_tbl.r64.asc { rirv v } ⊢ { rirv { v o } } 
							smt_err◂◂"rt_of:0" o ⊢ d 
							$ d ⊢ 
							∐ stt◂{ ia na pa } . 
								rt_of { { rirv_n rirv } pa } ⊢ { { rirv_n rirv } pa } 
								∎ { { rirv_n rirv } RP.atm◂ast.stt_adt◂{ ia na pa } }
							∐. dyn◂da . 
								∎ { { rirv_n rirv } RP.atm◂ast.dyn_adt◂da }
						∐ btm◂{} .
							∎ { { rirv_n rirv } RP.atm◂ast.btm◂{} }
						∐ hp_im◂c . 
							∎ { { rirv_n rirv } RP.atm◂ast.hp_im◂c }
						∐. hp◂h . 
							∎ { { rirv_n rirv } RP.atm◂ast.hp◂h }
			§§ test
					§ 
						@.cmp { lb_n evv mirv MV lb_t lb_f v0 v1 ec0 }
							$ v0 ⊢ 
							∐ ast.test_var◂i0 . 
								$ v1 ⊢ 
								∐ ast.test_cst◂c1 . 
									cmp_var_cst { bl.t◂{} i0 c1 lb_n evv mirv MV lb_t lb_f ec0 } ⊢| 
								∐. ast.test_var◂i1 . 
									hsh_tbl.r64.asc { mirv i0 } ⊢ { mirv { i0 p0 } } 
									smt_err◂◂"test.cmp:0" p0 ⊢ p0 
									hsh_tbl.r64.asc { mirv i1 } ⊢ { mirv { i1 p1 } }
									smt_err◂◂"test.cmp:1" p1 ⊢ p1 
									rt_of { MV p0 } ⊢ { MV p0 } 
									rt_of { MV p1 } ⊢ { MV p1 } 
									ast.r64_of_rt { evv p0 } ⊢ { evv x0 } 
									ast.r64_of_rt { evv p1 } ⊢ { evv x1 } 
									$ { x0 x1 } ⊢
									∐ { ast.hp_of◂r0 ast.hp_of◂r1 } .
										cmp.idx_idx { r0 r1 ec0 } ⊢ { _ _ ec0 } 
										jg_lb { lb_f ec0 } ⊢ { lb_f ec0 }
										jmp_lb { lb_t ec0 } ⊢ { lb_t ec0 } 
										∎ { lb_n evv mirv MV lb_t lb_f ec0 }
									∐ { ast.hp_of◂r0 ast.im_of◂x1 } .
										cmp.idx_im { r0 x1 ec0 } ⊢ { _ _ ec0 } 
										jg_lb { lb_f ec0 } ⊢ { lb_f ec0 }
										jmp_lb { lb_t ec0 } ⊢ { lb_t ec0 } 
										∎	{ lb_n evv mirv MV lb_t lb_f ec0 }
									∐ { ast.im_of◂x0 ast.hp_of◂r1 } . 
										cmp.idx_im { r1 x0 ec0 } ⊢ { _ _ ec0 } 
										jl_lb { lb_f ec0 } ⊢ { lb_f ec0 }
										jmp_lb { lb_t ec0 } ⊢ { lb_t ec0 } 	
										∎ { lb_n evv mirv MV lb_t lb_f ec0 }									
									∐. { ast.im_of◂x0 ast.im_of◂x1 } . 
										∐ x0'=<x1' . 
											jmp_lb { lb_t ec0 } ⊢ { lb_t ec0 } 
											∎ { lb_n evv mirv MV lb_t lb_f ec0 }
										∐. . 
											jmp_lb { lb_f ec0 } ⊢ { lb_f ec0 }
											∎ { lb_n evv mirv MV lb_t lb_f ec0 } 
							∐. ast.test_cst◂c0 . 
								$ v1 ⊢ 
								∐ ast.test_var◂i1 . 
									cmp_var_cst { bl.f◂{} i1 c0 lb_n evv mirv MV lb_t lb_f ec0 } ⊢| 
								∐. ast.test_cst◂c1 . 
									∎|
					@.cmp_var_r64 { bf p0 x1 lb_n evv mirv MV lb_t lb_f ec0 }
						ast.r64_of_rt { evv p0 } ⊢ { evv x0 } 
						$ x0 ⊢ 
						∐ ast.hp_of◂r0 . 
							cmp.idx_im { r0 x1 ec0 } ⊢ { r0 x1 ec0 }
							$ bf ⊢ 
							∐ bl.t◂{} . 
								jg_lb { lb_f ec0 } ⊢ { lb_f ec0 } 
								jmp_lb { lb_t ec0 } ⊢ { lb_t ec0 }	
								∎ { lb_n evv mirv MV lb_t lb_f ec0 }
							∐. bl.f◂{} . 
								jl_lb { lb_f ec0 } ⊢ { lb_f ec0 } 
								jmp_lb { lb_t ec0 } ⊢ { lb_t ec0 }
								∎ { lb_n evv mirv MV lb_t lb_f ec0 }
						∐. ast.im_of◂x0 . 
							setge { x1 x0 } ⊢ { x1 x0 bc } 
							∐ bf ⊢ bl.t◂{}; bc'=1r . 
								jmp_lb { lb_t ec0 } ⊢ { lb_t ec0 }
								∎ { lb_n evv mirv MV lb_t lb_f ec0 }
							∐ bf ⊢ bl.f◂{}; bc'=0r . 
								jmp_lb { lb_t ec0 } ⊢ { lb_t ec0 }
								∎ { lb_n evv mirv MV lb_t lb_f ec0 }
							∐. . 
								jmp_lb { lb_f ec0 } ⊢ { lb_f ec0 }
								∎ { lb_n evv mirv MV lb_t lb_f ec0 }
					@.cmp_var_cst { bf i0 c1 lb_n evv mirv MV lb_t lb_f ec0 }
						hsh_tbl.r64.asc { mirv i0 } ⊢ { mirv { i0 p0 } }
						smt_err◂◂"cmp_var_cst:0" p0 ⊢ p0 
						rt_of { MV p0 } ⊢ { MV p0 } 
						∐ c1 ⊢ ast.k_r64◂x1 . 
							cmp_var_r64 { bf p0 x1 lb_n evv mirv MV lb_t lb_f ec0 } ⊢| 
						∐ c1 ⊢ ast.k_s8◂s1 . 
							» "ret_f D682" _ ⊢ ee0 
							_emt ee0 ⊢ _ 
							∎| 
						∐ c1 ⊢ ast.k_name◂i1 .
							lod_tv { evv i1 } ⊢ { evv i1 c1 } 
							cmp_var_cst { bf i0 c1 lb_n evv mirv MV lb_t lb_f ec0 } ⊢|
						∐. . 
							» "ret_f D983" _ ⊢ ee0 
							_emt ee0 ⊢ _ 
								∎|
				§ 
					@.eq { be lb_n evv mirv MV lb_t lb_f v0 v1 ec0 }
						$ v0 ⊢ 
						∐ ast.test_var◂i0 . 
							$ v1 ⊢ 
							∐ ast.test_cst◂c1 . 
								hsh_tbl.r64.asc { mirv i0 } ⊢ { mirv { i0 p0 } } 
								smt_err◂◂"eq:0" p0 ⊢ p0 
								rt_of { MV p0 } ⊢ { MV p0 } 
								eq_var_cst { be p0 c1 lb_n evv mirv MV lb_t lb_f ec0 } ⊢|
							∐. ast.test_var◂i1 . 
								hsh_tbl.r64.asc { mirv i0 } ⊢ { mirv { i0 p0 } } 
								hsh_tbl.r64.asc { mirv i1 } ⊢ { mirv { i1 p1 } }
								smt_err◂◂"eq:1" p0 ⊢ p0 
								smt_err◂◂"eq:2" p1 ⊢ p1 
								rt_of { MV p0 } ⊢ { MV p0 } 
								rt_of { MV p1 } ⊢ { MV p1 } 
								∐ p0 ⊢ RP.atm◂a0; a0 ⊢ ast.hp◂{ r0 h0 } .
									∐ p1 ⊢ RP.atm◂a1; a1 ⊢ ast.hp◂{ r1 h1 } .
										∐ h0 ⊢ ast.hp.r64◂{} . 
											cmp.idx_idx { r0 r1 ec0 } ⊢ { _ _ ec0 } 
											jz_bl_lb { be lb_f ec0 } ⊢ { lb_f ec0 }		
											jmp_lb { lb_t ec0 } ⊢ { lb_t ec0 } 
											∎ { lb_n evv mirv MV lb_t lb_f ec0 }
										∐ h0 ⊢ ast.hp.opq◂{} . 
											^ r0,r1 ⊢ _,_,e0 
												"\tmov rdi,GLX(" 1d' ")\n"
												"\tmov rsi,GLX(" 0d' ")\n" 
												`	call eq_s8_q  
												"\tcmp rax,1\n" // 
											rp8.add_s8 { ec0 e0 } ⊢ ec0 
											jz_bl_lb { be lb_f ec0 } ⊢ { lb_f ec0 }		
											jmp_lb { lb_t ec0 } ⊢ { lb_t ec0 }
											∎ { lb_n evv mirv MV lb_t lb_f ec0 }
										∐. . 
											» "ret_f D683" _ ⊢ ee0 
											_emt ee0 ⊢ _ 
											∎| 
									∐ p1 ⊢ RP.atm◂a1; a1 ⊢ ast.hp_im◂iv; iv ⊢ ast.k_r64◂x1 .
										cmp.idx_im { r0 x1 ec0 } ⊢ { _ _ ec0 } 
										jz_bl_lb { be lb_f ec0 } ⊢ { lb_f ec0 }		
										jmp_lb { lb_t ec0 } ⊢ { lb_t ec0 } 
										∎ { lb_n evv mirv MV lb_t lb_f ec0 }
									∐. . 
										» "ret_f D674" _ ⊢ ee0 
										_emt ee0 ⊢ _ 
										∎|												
								∐ p0 ⊢ RP.atm◂a0; a0 ⊢ ast.hp_im◂iv; iv ⊢ ast.k_r64◂x0 . 
									∐ p1 ⊢ RP.atm◂a1; a1 ⊢ ast.hp◂{ r1 h1 } .
										cmp.idx_im { r1 x0 ec0 } ⊢ { _ _ ec0 } 
										jz_bl_lb { be lb_f ec0 } ⊢ { lb_f ec0 }		
										jmp_lb { lb_t ec0 } ⊢ { lb_t ec0 } 
										∎ { lb_n evv mirv MV lb_t lb_f ec0 }
									∐ p1 ⊢ RP.atm◂a1; a1 ⊢ ast.hp_im◂iv; iv ⊢ ast.k_r64◂x1 .
										∐ x0'=x1' . 
											jmp_lb { lb_t ec0 } ⊢ { lb_t ec0 }
											∎ { lb_n evv mirv MV lb_t lb_f ec0 } 
										∐. . 
											jmp_lb { lb_f ec0 } ⊢ { lb_f ec0 }
											∎ { lb_n evv mirv MV lb_t lb_f ec0 } 
									∐. . 
										» "ret_f D675" _ ⊢ ee0 
										_emt ee0 ⊢ _ 
										∎| 	
								∐. . 
									» "ret_f D676" _ ⊢ ee0 
									_emt ee0 ⊢ _ 
									∎| 	
						∐. ast.test_cst◂c0 . 
							$ v1 ⊢ 
							∐ ast.test_var◂i1 . 
								hsh_tbl.r64.asc { mirv i1 } ⊢ { mirv { i1 p0 } }
								smt_err◂◂"eq:3" p0 ⊢ p0 
								rt_of { MV p0 } ⊢ { MV p0 } 
								eq_var_cst { be p0 c0 lb_n evv mirv MV lb_t lb_f ec0 } ⊢|
							∐. ast.test_cst◂c1 . 
								∎|	
					@.eq_var_cst { be p0 c1 lb_n evv mirv MV lb_t lb_f ec0 }
						∐ c1 ⊢ ast.k_r64◂x1 . 
							ast.r64_of_rt { evv p0 } ⊢ { evv x0 } 
							$ x0 ⊢ 
							∐ ast.hp_of◂r0 .
								cmp.idx_im { r0 x1 ec0 } ⊢ { _ _ ec0 } 
								jz_bl_lb { be lb_f ec0 } ⊢ { lb_f ec0 }		
								jmp_lb { lb_t ec0 } ⊢ { lb_t ec0 } 
								∎ { lb_n evv mirv MV lb_t lb_f ec0 }
							∐. ast.im_of◂x0 . 
								∐ x0'=x1' . 
									$ { x0 x1 } ⊢ _ 
									jmp_lb { lb_t ec0 } ⊢ { lb_t ec0 } 
									∎ { lb_n evv mirv MV lb_t lb_f ec0 }
								∐. . 
									$ { x0 x1 } ⊢ _ 
									jmp_lb { lb_f ec0 } ⊢ { lb_f ec0 } 
									∎ { lb_n evv mirv MV lb_t lb_f ec0 }
						∐ c1 ⊢ ast.k_s8◂s1 . 
							» "ret_f D679" _ ⊢ ee0 
							_emt ee0 ⊢ _ 
							∎|
						∐ c1 ⊢ ast.k_name◂i1 . 
							lod_tv { evv i1 } ⊢ { evv _ c1 }
							eq_var_cst { be p0 c1 lb_n evv mirv MV lb_t lb_f ec0 } ⊢|						 
						∐. .
							» "ret_f D780" _ ⊢ ee0 
							_emt ee0 ⊢ _ 
							∎|
					
					∎∎
				§ suw { lb_w rsp } 
					$ rsp ⊢ rsp,x 
					_inc x ⊢ x 
					_shl { x %[ 3r ] } ⊢ { x _ } 
					^ lb_w,x ⊢ lb_w,_,s 
						"EXH_" 0d' ":\n" 
						"\tadd rsp," 1d' "\n" 
						"\tpop rax\n" 
						"\tjmp rax\n" // 
					$ rp8.of_s8◂s ⊢ e 
					∎ { lb_w rsp e }
				§ exh { ox lb_w nb l } 
					$ ox ⊢ 
					∐ _some◂lb_x . 
						^ lb_w ⊢ _,sc0 
							"EXH_" 0d' ":\n" // 
						$ rp8.of_s8◂sc0 ⊢ e  
						pop_regs.exh { nb l } ⊢ { _ e1 }
						rp8.cct { e e1 } ⊢ e 
						^ lb_x ⊢ _,s 
							"\tjmp LB_" 0d' "\n" // 
						rp8.add_s8 { e s } ⊢ e 
						∎ e
					∐. _none◂{} . 
						_imul { nb %[ 8r ] } ⊢ { nb _ } 
						suw { lb_w nb } ⊢ { _ _ e } 
						∎ e 
				
				§ @.push_gl { l c } 
					$ l ⊢ 
					∐ _cns◂{ i l } .
						_inc c ⊢ c 
						push_gl { l c } ⊢ { c l e } 
						_dec c ⊢ c 
						^ i,c ⊢ i,c,s 
							"\tMOV_RDI QWORD [rsp+8*" 1d' "],GLX(" 0d' ")\n" // 
						rp8.add_s8 { e s } ⊢ e 
						∎ { c ⟦ i < l ⟧ e }
					∐. _nil◂{} . 
						^ c ⊢ c,s 
							"\tlea rsp,[rsp-8*" 0d' "]\n" // 
						$ rp8.of_s8◂s ⊢ e 
						∎ { c ⟦⟧ e }
					
				§ @.pop_gl { e l } 
					$ l ⊢ 
					∐ _cns◂{ j l } . 
						^ j ⊢ _,s 
							"\tpop GLX(" 0d' ")\n" // 
						rp8.add_s8 { e s } ⊢ e 
						pop_gl { e l } ⊢| 
					∐. _nil◂{} . 
						∎ e 
				§ min_rfv { b0 b1 }
					$ b0 ⊢ 
					∐ _some◂l0 . 
						$ b1 ⊢ 
						∐ _some◂l1 . 
							min { l0 l1 } ⊢ { _ _ l2 }
							∎ _some◂l2 
						∐. _none◂{} . 
							∎ ‹ l0 › 
					∐. _none◂{} . 
						∎ b1  
				§ gnr_rfv { rfv o rfl rfb rfb_g } 
					$ rfb_g ⊢ rfb_g,rfb_g0 
					min_rfv { rfb rfb_g } ⊢ rfb 
					$ rfb_g0 ⊢ 
					∐ _some◂l . 
						∐ l'=<rfl' . 
							hsh_tbl.r64.set { rfv { o rf_t◂l } } ⊢ { rfv { o _ } } 
							∎ { bl.t◂{} rfv o rfl rfb %[ ";; rfb=t\n" ] }
						∐. . 
							hsh_tbl.r64.set { rfv { o rf_f◂l } } ⊢ { rfv { o _ } } 
							∎ { bl.f◂{} rfv o rfl rfb %[ ";; rfb=f\n" ] }
					∐. _none◂{} . 
						$ rfl ⊢ rfl,l
						hsh_tbl.r64.set { rfv { o rf_f◂l } } ⊢ { rfv { o _ } } 
						∎ { bl.f◂{} rfv o rfl rfb %[ ";; rfb=f\n" ] }					
				§ dlt_wl_i # { irv wr }
					hsh_tbl.r64.get { irv wr } ⊢ { irv { wr o } }
					smt_err◂◂"dlt_wl:0" o ⊢ _ 
					∎ irv
				§ dlt_wl = lst.fld_l◂◂dlt_wl_i
				\[
				\\@.nd ◂ m',e' = { m' _opn◂(p◂e') _opn◂(nxp◂e') nxp◂e' }
				@.nd ◂ m',e' 
					∐ nd_m : { m' _opn◂rbp _opn◂brp nxp }
					∐ nd_e : e' 
			¶ m ◂ t',f',b'
				∐ m_t : t' 
				∐ m_f : f' 
				∐ m_b : b'  
			\]
			§ nx_m = ast.nx_m 
			§ nx_e = ast.nx_e 
			§ p = ast.p
			§ mirv_of_i # { { mirv { rirv_n rirv } } { r p } } 
				mtc_rt_of { { rirv_n rirv } p } ⊢ { { rirv_n rirv } p } 
				hsh_tbl.r64.set { mirv { r p } } ⊢ { mirv { r o } } 
				nnt o ⊢ {} 
				∎ { mirv { rirv_n rirv } } 
			§ mirv_of = hsh_tbl.fld◂◂mirv_of_i 
			§ irv_of_i # { { irv { rirv_n rirv } } { r p } } 
				rt_of { { rirv_n rirv } p } ⊢ { { rirv_n rirv } p } 
				hsh_tbl.r64.set { irv { r p } } ⊢ { irv { r o } } 
				nnt o ⊢ {} 
				∎ { irv { rirv_n rirv } } 
			§ irv_of = hsh_tbl.fld◂◂irv_of_i 
			§ 
				@.csm { { evv mirv { rirv_n rirv } } s } 
					$ s ⊢ 
					∐ ast.re_v◂c . 
						∎ { { evv mirv { rirv_n rirv } } RP.atm◂hp_im◂c }
					∐ ast.re_agl◂{ e sp } . 
						csm_ptn { { evv mirv { rirv_n rirv } } sp } ⊢ { { evv mirv { rirv_n rirv } } ip } 
						lod_tv { evv e } ⊢ { evv e k1 } 
						ast.ctr_of_k { evv k1 } ⊢ { evv { ia1 na1 vi } }	
						inc_x rirv_n ⊢ { r rirv_n } 
						hsh_tbl.r64.set { rirv { r stt◂{ ia1 na1 ip } } } ⊢ { rirv { r o } }
						nnt o ⊢ {}  
						∎ { { evv mirv { rirv_n rirv } } RP.atm◂adt_v◂r }
					∐. ast.re_reg◂r . 
						hsh_tbl.r64.asc { mirv r } ⊢ { mirv { r o } } 
						smt_err◂◂"csm:re_reg" o ⊢ ip 
						∎ { { evv mirv { rirv_n rirv } } ip } 
				@.csm_ptn = RP.map_l_atm◂◂csm	
			
			§ alc_hp { { rirv_n rirv } tv_n tv tav glv_n e0 r h } 
			$ h ⊢ 
			∐ ast.hp.btm◂{} . 
				∎ { { rirv_n rirv } tv_n tv tav glv_n e0 RP.atm◂btm◂{} }  
			∐ ast.hp.sgm◂y0 . 
				alc_type_k.f_i { tav tv_n tv %[ 0r ] y0 } ⊢ { tav tv_n tv c_n pa0 }				
				∐ c_n'=0r . 
					lod_sgm.ptn { { e0 glv_n } pa0 } ⊢ { { e0 glv_n } pa1 } 
					mtc_rt_of { { rirv_n rirv } pa1 } ⊢ { { rirv_n rirv } pa1 } 					
					∎ { { rirv_n rirv } tv_n tv tav glv_n e0 pa1 }  
				∐. . 
					^ r ⊢ _,sc0
						`	push SRC_REG 
						"\tmov SRC_REG,GLX(" 0d' ")\n" 
						`	add SRC_REG,8
						//
					rp8.add_s8 { e0 sc0 } ⊢ e0
					lod_sgm.ptn { { e0 glv_n } pa0 } ⊢ { { e0 glv_n } pa1 } 
					^ c_n ⊢ _,sc0 
						`	sub SRC_REG,8 
						`	mov rdi,SRC_REG 
						"\tFREE_RCD " 0d' ",rdi\n"
						`	pop SRC_REG 
						//
					rp8.add_s8 { e0 sc0 } ⊢ e0 
					mtc_rt_of { { rirv_n rirv } pa1 } ⊢ { { rirv_n rirv } pi } 					
					∎ { { rirv_n rirv } tv_n tv tav glv_n e0 pi }  
				∐. ast.hp.hp◂h1 . 
					∎ { { rirv_n rirv } tv_n tv tav glv_n e0 RP.atm◂hp◂{ r h1 } }  
			
				§ 
					@.stt_etr { V rfv oa0 { og ok dp r_ng ibg } { o_n ys yr } { gfl cl mfv } glv_n ei_n lb_n { ev_n ev evv } rv tav tv_n tv lcg { eg0 eds } } 
						$ oa0 ⊢ 
						∐ _some◂{ lb ig o_k gys p0 gyd } . 
							$ rfv ⊢ { rfl rfb rfv } 
							hsh_tbl.r64.asc { rfv ig } ⊢ { rfv { ig a0 } }
							smt_err◂◂"stt_etr:0" a0 ⊢ rfb0 
							$ rfb0 ⊢ 
							∐  rf_k◂l . 
								min_rfv { ‹ l › rfb } ⊢ rfb  
								∎ { V bl.t◂{} { rfl rfb rfv } { lb ig o_k gys p0 gyd } yr { gfl cl mfv } glv_n ei_n lb_n { ev_n ev evv } rv tav tv_n tv { eg0 eds } } 
							∐ rf_t◂l . 
								∐ l'=<rfl' . 
									∎ { V bl.t◂{} { rfl rfb rfv } { lb ig o_k gys p0 gyd } yr { gfl cl mfv } glv_n ei_n lb_n { ev_n ev evv } rv tav tv_n tv { eg0 eds } } 
								∐. . 
									∎ { V bl.f◂{} { rfl rfb rfv } { lb ig o_k gys p0 gyd } yr { gfl cl mfv } glv_n ei_n lb_n { ev_n ev evv } rv tav tv_n tv { eg0 eds } } 									
							∐. rf_f◂l . 
								∎ { V bl.f◂{} { rfl rfb rfv } { lb ig o_k gys p0 gyd } yr { gfl cl mfv } glv_n ei_n lb_n { ev_n ev evv } rv tav tv_n tv { eg0 eds } } 
						∐. _none◂{} . 
							$ yr ⊢ yr,yr0
							$ ok ⊢ ok,ok0 
							ip.inl.gnr_inl { V evv r_ng og ok0 lcg } ⊢ { V evv r_ng lcg } 
							gnr_lc_code { V rfv ok { o_n ys yr0 dp } { gfl cl mfv } glv_n ei_n lb_n { ev_n ev evv } rv tav tv_n tv lcg } ⊢ { V bf rfv { eeg0 eds0 ee0 } R0 { gfl cl mfv } glv_n ei_n lb_n { ev_n ev evv } rv tav tv_n tv }
							rp8.cct { eg0 eeg0 } ⊢ eg0 
							rp8.cct { eg0 ee0 } ⊢ eg0 
							rp8.cct { eds eds0 } ⊢ eds 
							∎ { V bf rfv R0 yr { gfl cl mfv } glv_n ei_n lb_n { ev_n ev evv } rv tav tv_n tv { eg0 eds } } 
					@.stt_jmp_axm { ec0 evv tav tv_n tv eds glv_n p1 fc }
						$ fc ⊢ 
						∐ f_call◂{} . 
							∎ { ec0 evv tav tv_n tv eds glv_n p1 } 
						\[
						∐ f_tj◂{ lbi pr } . 
							$ pr ⊢ pr,pr0 
							mov_ptn2.ptn { ec0 { evv tav tv_n tv eds } glv_n p1 pr0 } ⊢ { ec0 { evv tav tv_n tv eds } glv_n } 
							∎ { ec0 evv tav tv_n tv eds glv_n pr } 
						\]
						∐. f_jmp◂{ lbi pr } . 
							$ pr ⊢ pr,pr0 
							mov_ptn2.ptn { ec0 { evv tav tv_n tv eds } glv_n p1 pr0 } ⊢ { ec0 { evv tav tv_n tv eds } glv_n } 
							rp8.add_s8 { ec0 %[ "\tret\n" ] } ⊢ ec0  
							∎ { ec0 evv tav tv_n tv eds glv_n pr } 
					@.stt_lds { evv glv_n lb_n ec0 eds is }
						∐ is ⊢ RP.rcd◂l; l ⊢ _cns◂{ p0 l }; l ⊢ _cns◂{ p1 l }; l ⊢ _nil◂{} .  
							ast.s8_of_rt { evv p0 } ⊢ { evv s } 
							ast.r64_of_rt { evv p1 } ⊢ { evv x } 
							$ s ⊢ 
							∐ ast.hp_of◂r0 .
								inc_x glv_n ⊢ { m0 glv_n } 
								$ x ⊢ 
								∐ ast.hp_of◂r1 .
									^ r0,r1,m0 ⊢ r0,r1,m0,sc0 
										"\tmov rdi,GLX(" 0d' ")\n" 
										"\tmov rsi,GLX(" 1d' ")\n" 
										"\tmov rax,0x0000_ffff_ffff_ffff\n" 
										"\tand rax,QWORD [rdi]\n" 
										"\tcmp rsi,rax\n" 
										"\tjge err_bc\n" 
										\\`	BC ge,rax 
										"\tmovzx rax,BYTE [rdi+8+rsi]\n" 
											"\tmov GLX(" 2d' "),rax\n" //
									rp8.add_s8 { ec0 sc0 } ⊢ ec0 
									$ RP.cns3◂{ stt_v.s8_reg◂r0 stt_v.r64_reg◂r1 stt_v.r64_reg◂m0 } ⊢ iy  
									∎ { evv glv_n lb_n ec0 eds iy } 
								∐. ast.im_of◂x .  
									^ r0,x,m0 ⊢ r0,x,m0,sc0 
										"\tmov rdi,GLX(" 0d' ")\n" 
										"\tmov rax,0x0000_ffff_ffff_ffff\n" 
										"\tand rax,QWORD [rdi]\n" 
										"\tcmp rax," 1d' "\n" 
										\\"\tjle err_bc\n" 
										`	BC le,rax 
										"\tmovzx rax,BYTE [rdi+8+" 1d' "]\n" 
										"\tmov GLX(" 2d' "),rax\n" //
									rp8.add_s8 { ec0 sc0 } ⊢ ec0 
									$ RP.cns3◂{ stt_v.s8_reg◂r0 stt_v.r64_im◂x stt_v.r64_reg◂m0 } ⊢ iy  
									∎ { evv glv_n lb_n ec0 eds iy } 
							∐. ast.im_of◂s . 
								$ x ⊢ 
								∐ ast.hp_of◂r1 . 
									inc_x glv_n ⊢ { m0 glv_n } 
									_s8_len s ⊢ { s ls } 
									inc_x lb_n ⊢ { lb0 lb_n } 
									data_s8 { eds lb0 s } ⊢ { eds lb0 s } 
									^ ls,lb0,r1,m0 ⊢ _,_,r1,m0,sc0 
										"\tmov rsi,GLX(" 2d' ")\n" 
										"\tcmp rsi," 0d' "\n" 
										\\"\tjge err_bc\n" 
										`	BC ge,rax
										"\tmovzx rax,BYTE [LB_" 1d' "+rsi]\n" 
										"\tmov GLX(" 3d' "),rax\n" //
									rp8.add_s8 { ec0 sc0 } ⊢ ec0 
									$ RP.cns3◂{ stt_v.s8_im◂ s stt_v.r64_reg◂r1 stt_v.r64_reg◂m0 } ⊢ iy  
									∎ { evv glv_n lb_n ec0 eds iy } 
								∐. ast.im_of◂x . 
									_lds { s x } ⊢ { s x c } 
									$ RP.cns3◂{ stt_v.s8_im◂s stt_v.r64_im◂x stt_v.r64_im◂c } ⊢ iy  
									∎ { evv glv_n lb_n ec0 eds iy } 
							∐. . 
								» "op_axm lds 0" _ ⊢ ee0 
								_emt ee0 ⊢ _ 
								∎| 
					@.stt_lds64 { evv glv_n lb_n ec0 eds is }
						∐ is ⊢ RP.rcd◂l; l ⊢ _cns◂{ p0 l }; l ⊢ _cns◂{ p1 l }; l ⊢ _nil◂{} .  
							ast.s8_of_rt { evv p0 } ⊢ { evv s } 
							ast.r64_of_rt { evv p1 } ⊢ { evv x } 
							$ s ⊢ 
							∐ ast.hp_of◂r0 .
								inc_x glv_n ⊢ { m0 glv_n } 
								$ x ⊢ 
								∐ ast.hp_of◂r1 .
									^ r0,r1,m0 ⊢ r0,r1,m0,sc0 
										"\tmov rdi,GLX(" 0d' ")\n" 
										"\tmov rsi,GLX(" 1d' ")\n" 
										"\tmov rax,0x0000_ffff_ffff_ffff\n" 
										"\tand rax,QWORD [rdi]\n" 
										`	sub rax,7 
										"\tcmp rsi,rax\n" 
										\\"\tjge err_bc\n" 
										`	BC ge,rax
										"\tmov rax,QWORD [rdi+8+rsi]\n" 
										"\tmov GLX(" 2d' "),rax\n" //
									rp8.add_s8 { ec0 sc0 } ⊢ ec0 
									$ RP.cns3◂{ stt_v.s8_reg◂r0 stt_v.r64_reg◂r1 stt_v.r64_reg◂m0 } ⊢ iy  
									∎ { evv glv_n lb_n ec0 eds iy }
								∐. ast.im_of◂x .  
									^ r0,x,m0 ⊢ r0,x,m0,sc0 
										"\tmov rdi,GLX(" 0d' ")\n" 
										"\tmov rax,0x0000_ffff_ffff_ffff\n" 
										"\tand rax,QWORD [rdi]\n" 
										`	sub rax,7
										"\tcmp rax," 1d' "\n" 
										"\tjle err_bc\n" 
										"\tmov rax,QWORD [rdi+8+" 1d' "]\n" 
										"\tmov GLX(" 2d' "),rax\n" //
									rp8.add_s8 { ec0 sc0 } ⊢ ec0 
									$ RP.cns3◂{ stt_v.s8_reg◂r0 stt_v.r64_im◂x stt_v.r64_reg◂m0 } ⊢ iy  
									∎ { evv glv_n lb_n ec0 eds iy }
							∐. ast.im_of◂s . 
								inc_x glv_n ⊢ { m0 glv_n } 
								$ x ⊢ 
								∐ ast.hp_of◂r1 . 
									_s8_len s ⊢ { s ls } 
									inc_x lb_n ⊢ { lb0 lb_n } 
									data_s8 { eds lb0 s } ⊢ { eds lb0 s } 
									_sub { ls %[ 7r ] } ⊢ { ls _ } 
									^ ls,lb0,r1,m0 ⊢ _,_,r1,m0,sc0 
										"\tmov rsi,GLX(" 2d' ")\n" 
										"\tcmp rsi," 0d' "\n" 
										"\tjge err_bc\n" 
										"\tmov rax,QWORD [LB_" 1d' "+rsi]\n" 
										"\tmov GLX(" 3d' "),rax\n" //
										rp8.add_s8 { ec0 sc0 } ⊢ ec0 
										$ RP.cns3◂{ stt_v.s8_im◂s stt_v.r64_reg◂r1 stt_v.r64_reg◂m0 } ⊢ iy  
										∎ { evv glv_n lb_n ec0 eds iy }
									∐. ast.im_of◂x . 
										_s8_len s ⊢ { s ls } 
										inc_x lb_n ⊢ { lb0 lb_n } 
										data_s8 { eds lb0 s } ⊢ { eds lb0 s } 
										_sub { ls %[ 7r ] } ⊢ { ls _ } 
										^ ls,lb0,x,m0 ⊢ _,_,x,m0,sc0 
											"\tmov rsi," 2d' "\n" 
											"\tcmp rsi," 0d' "\n" 
											"\tjge err_bc\n" 
											"\tmov rax,QWORD [LB_" 1d' "+rsi]\n" 
											"\tmov GLX(" 3d' "),rax\n" //
										rp8.add_s8 { ec0 sc0 } ⊢ ec0 
										$ RP.cns3◂{ stt_v.s8_im◂s stt_v.r64_im◂x stt_v.r64_reg◂m0 } ⊢ iy  
										∎ { evv glv_n lb_n ec0 eds iy }
							∐. . 
								» "op_axm lds 0" _ ⊢ ee0 
								_emt ee0 ⊢ _ 
								∎| 
					@.stt_s8_len { evv glv_n ec0 is } 
						ast.s8_of_rt { evv is } ⊢ { evv s0 } 
						$ s0 ⊢ 
						∐ ast.im_of◂s0 . 
							_s8_len s0 ⊢ { s0 l0 } 
							$ RP.cns2◂{ stt_v.s8_im◂s0 stt_v.r64_im◂l0 } ⊢ iy 
							∎ { evv glv_n ec0 iy } 
						∐. ast.hp_of◂r0 . 
							inc_x glv_n ⊢ { rm0 glv_n } 
							^ r0,rm0 ⊢ r0,rm0,sc0 
								"\tmov rdi,GLX(" 0d' ")\n" 
								`	mov rsi,0x0000_ffff_ffff_ffff
								`	and rsi,[rdi] 
								"\tmov GLX(" 1d' "),rsi\n" // 
							rp8.add_s8 { ec0 sc0 } ⊢ ec0 
							$ RP.cns2◂{ stt_v.s8_reg◂r0 stt_v.r64_reg◂rm0 } ⊢ iy 
							∎ { evv glv_n ec0 iy } 
					@.stt_s8_hsh { evv glv_n ec0 is } 
						ast.s8_of_rt { evv is } ⊢ { evv s0 } 
						$ s0 ⊢ 
						∐ ast.im_of◂s0 . 
							_s8_hsh s0 ⊢ { s0 h } 
							$ RP.cns2◂{ stt_v.s8_im◂s0 stt_v.r64_im◂h } ⊢ iy 
							∎ { evv glv_n ec0 iy } 							
						∐. ast.hp_of◂r0 . 
							inc_x glv_n ⊢ { rm0 glv_n } 
							^ r0,rm0 ⊢ r0,rm0,sc0 
								"\tmov rdi,GLX(" 0d' ")\n" 
								`	call mm32 
								"\tmov GLX(" 1d' "),rax\n" // 
							rp8.add_s8 { ec0 sc0 } ⊢ ec0 
							$ RP.cns2◂{ stt_v.s8_reg◂r0 stt_v.r64_reg◂rm0 } ⊢ iy 
							∎ { evv glv_n ec0 iy } 
					@.stt_emt_s8_to { evv glv_n lb_n ec0 eds is }
						∐ is ⊢ RP.rcd◂l0; l0 ⊢ _cns◂{ a0 l0 }; l0 ⊢ _cns◂{ a1 l0 }; l0 ⊢ _nil◂{} . 
								ast.s8_of_rt { evv a0 } ⊢ { evv fn }
								ast.s8_of_rt { evv a1 } ⊢ { evv sb0 }
								$ fn ⊢ 
								∐ ast.hp_of◂r0 .
									$ sb0 ⊢ 
									∐ ast.hp_of◂r1 . 
										mov.rdi_idx { r0 ec0 } ⊢ { r0 ec0 }
										mov.rax_idx { r1 ec0 } ⊢ { r1 ec0 } 
										^ _ ⊢ sc0 
											push_c_regs 
											`	add rdi,8 
											` lea rsi,[rax+8]
											`	mov rdx,0x0000_ffff_ffff_ffff
											`	and rdx,QWORD [rax]
											`	C_CALL emt_s8_to 
											pop_c_regs 
											//	
										rp8.add_s8 { ec0 sc0 } ⊢ ec0 
										$ RP.cns2◂{ stt_v.s8_reg◂r0 stt_v.s8_reg◂r1 } ⊢ iy 
										∎ { evv glv_n lb_n ec0 eds iy }
									∐. ast.im_of◂s1 . 
										inc_x lb_n ⊢ { lb0 lb_n }
										data_s8 { eds lb0 s1 } ⊢ { eds lb0 s1 }
										mov.rdi_idx { r0 ec0 } ⊢ { r0 ec0 }
										^ lb0 ⊢ lb0,sc0 
											push_c_regs 
											`	add rdi,8 
											"\tmov rsi,LB_" 0d' "\n" 
											`	mov rdx,0x0000_ffff_ffff_ffff
											`	and rdx,QWORD [rax]
											`	C_CALL emt_s8_to 
											pop_c_regs 
											//	
										rp8.add_s8 { ec0 sc0 } ⊢ ec0 
										$ RP.cns2◂{ stt_v.s8_reg◂r0 stt_v.s8_im◂s1 } ⊢ iy 
										∎ { evv glv_n lb_n ec0 eds iy }
								∐. ast.im_of◂s0 . 
									$ sb0 ⊢ 
									∐ ast.hp_of◂r1 . 
										inc_x lb_n ⊢ { lb0 lb_n }
										data_s8 { eds lb0 s0 } ⊢ { eds lb0 s0 }
										mov.rax_idx { r1 ec0 } ⊢ { r1 ec0 } 
										^ lb0 ⊢ lb0,sc0 
											push_c_regs 
											"\tmov rdi,LB_" 0d' "\n" 
											` lea rsi,[rax+8]
											`	mov rdx,0x0000_ffff_ffff_ffff
											`	and rdx,QWORD [rax]
											`	C_CALL emt_s8_to 
											pop_c_regs 
											//	
										rp8.add_s8 { ec0 sc0 } ⊢ ec0 
										$ RP.cns2◂{ stt_v.s8_im◂s0 stt_v.s8_reg◂r1 } ⊢ iy 
										∎ { evv glv_n lb_n ec0 eds iy }
									∐. ast.im_of◂s1 . 
										inc_x lb_n ⊢ { lb0 lb_n }
										data_s8 { eds lb0 s0 } ⊢ { eds lb0 s0 }
										inc_x lb_n ⊢ { lb1 lb_n }
										data_s8 { eds lb0 s1 } ⊢ { eds lb0 s1 }
										^ lb0,lb1 ⊢ _,_,sc0 
											push_c_regs 
											`	add rdi,8 
											"\tmov rdi,LB_" 0d' "\n"
											"\tmov rsi,LB_" 1d' "\n" 
											`	mov rdx,0x0000_ffff_ffff_ffff
											`	and rdx,QWORD [rax]
											`	C_CALL emt_s8_to 
											pop_c_regs 
											//	
										rp8.add_s8 { ec0 sc0 } ⊢ ec0 
										$ RP.cns2◂{ stt_v.s8_im◂s0 stt_v.s8_im◂s1 } ⊢ iy 
										∎ { evv glv_n lb_n ec0 eds iy }
							∐. . 
								» "emt_s8_to 0" _ ⊢ ee0 
								_emt ee0 ⊢ _ 
								∎| 
					@.stt_cd { evv glv_n lb_n ec0 eds is }
						ast.s8_of_rt { evv is } ⊢ { evv s0 } 
						$ s0 ⊢ 
						∐ ast.im_of◂s0 . 
							inc_x lb_n ⊢ { lb0 lb_n }
							data_s8 { eds lb0 s0 } ⊢ { eds lb0 s0 }
							^ lb0 ⊢ lb0,sc0 
								push_c_regs 
								"\tmov rdi,LB_" 0d' "\n" 
								`	C_CALL system 
								pop_c_regs 
								//	
							rp8.add_s8 { ec0 sc0 } ⊢ ec0 
							$ stt_v.s8_im◂s0 ⊢ iy 
							∎ { evv glv_n lb_n ec0 eds iy }								 
						∐. ast.hp_of◂r0 . 
							mov.rdi_idx { r0 ec0 } ⊢ { r0 ec0 }
							^ _ ⊢ sc0 
								push_c_regs 
								`	add rdi,8 
								`	C_CALL system 
								pop_c_regs 
								//	
							rp8.add_s8 { ec0 sc0 } ⊢ ec0 
							$ stt_v.s8_reg◂r0 ⊢ iy 
							∎ { evv glv_n lb_n ec0 eds iy }
					@.stt_exc_q { evv tav tv_n tv glv_n lb_n ec0 eds c_n pa0 y2_00 is }
						∐ is ⊢ RP.rcd◂l0; l0 ⊢ _cns◂{ a0 l0 }; l0 ⊢ _cns◂{ a1 l0 }; l0 ⊢ _cns◂{ a2 l0 }; l0 ⊢ _nil◂{} .
							ast.arr_of_rt { evv a0 } ⊢ { evv { r0 _ } } 
							$ r0 ⊢ r0,r0_0 
							$ stt_v.arr_reg◂{ r0_0 y2_00 } ⊢ a0
							$ a1 ⊢ a1,a1_0 
							r64_to_rax { evv a1_0 } ⊢ { evv sc0 } 
							rp8.add_s8 { ec0 sc0 } ⊢ ec0 
							^ r0,c_n ⊢ r0,c_n,sc0 
								"\tmov rdi,GLX(" 0d' ")\n" 
								`	mov rsi,0x0000_ffff_ffff_ffff 
								`	and rsi,QWORD [rdi]
								`	cmp rax,rsi 
								`	jge err_exc_q
								\\`	BC ge,rsi 
								"\t imul rax," 1d' "\n" 
								`	lea rdi,[rdi+8+8*rax]
								`	mov DST_REG,rdi 
								`	mov SRC_REG,rdi
								//
							rp8.add_s8 { ec0 sc0 } ⊢ ec0 
							$ pa0 ⊢ pa0,pa0_0 
							lod_sgm.ptn { { ec0 glv_n } pa0_0 } ⊢ { { ec0 glv_n } pa1 } 
							mov_ptn2.to_sgm_ptn { ec0 { evv tav tv_n tv eds } glv_n a2 pa0 } ⊢ { ec0 { evv tav tv_n tv eds } glv_n } 
							$ RP.cns3◂{ a0 a1 pa1 } ⊢ iy
							∎ { evv tav tv_n tv glv_n lb_n ec0 eds iy }
						∐. .
							_emt %[ "exc_q D1" ] ⊢ _ 
							∎|
				@.stt_lod_q { gfl evv tav tv_n tv glv_n lb_n ec0 eds eg0 is }
					∐ is ⊢ RP.rcd◂l0; l0 ⊢ _cns◂{ a0 l0 }; l0 ⊢ _cns◂{ a1 l0 }; l0 ⊢ _nil◂{}; a0 ⊢ RP.atm◂aa0 .
						$ a1 ⊢ a1,a1_0
						r64_to_rax { evv a1_0 } ⊢ { evv sc0 } 
						rp8.add_s8 { ec0 sc0 } ⊢ ec0 
						$ aa0 ⊢ aa0,aa00 
						RP.atm aa0 ⊢ a0
						∐ aa00 ⊢ ast.hp◂{ r0 h0 }; h0 ⊢ ast.hp.arr◂ya0 . 
							$ ya0 ⊢ ya0,ya0_0,ya2
							alc_type_k.f_i { tav tv_n tv %[ 0r ] ya0 } ⊢ { tav tv_n tv c_n pa0 }
							^ r0,c_n ⊢ r0,c_n,sc0 
								"\tmov rdi,GLX(" 0d' ")\n"
								`	mov rsi,0x0000_ffff_ffff_ffff 
								`	and rsi,QWORD [rdi]
								`	cmp rax,rsi 
								`	jge err_lod_q 
								`	BC ge,rsi
								"\timul rax," 1d' "\n"
								`	lea rdi,[rdi+8+8*rax]
								"\tmov SRC_REG,rdi\n"
								//
							rp8.add_s8 { ec0 sc0 } ⊢ ec0 
							$ pa0 ⊢ pa0,pa0_0
							lod_sgm.ptn { { ec0 glv_n } pa0_0 } ⊢ { { ec0 glv_n } pa1 } 
							rpc.ptn { gfl ⟦⟧ tv_n tv tav evv lb_n glv_n pa1 { eds ec0 } } ⊢ { gfl fl tv_n tv tav evv lb_n glv_n pa1 pa2 { eds ec0 } }					
							rpc.adt_lp { gfl fl tv_n tv tav evv lb_n glv_n { eds eg0 } } ⊢ { gfl tv_n tv tav evv lb_n glv_n { eds eg0 } }
							$ RP.cns3◂{ a0 a1 pa2 } ⊢ iy 
							∎ { gfl evv tav tv_n tv glv_n lb_n ec0 eds eg0 iy }
						∐. . 
							» "lod_q 0" _ ⊢ ee0 
							_emt ee0 ⊢ _ 
							∎| 
					∐. . 
						» "lod_q 1" _ ⊢ ee0 
						_emt ee0 ⊢ _ 
						∎|
				@.stt_arr_len { evv glv_n ec0 is }
					∐ is ⊢ RP.atm◂a0; a0 ⊢ ast.hp◂{ r0 h0 }; h0 ⊢ ast.hp.arr◂ha .
						inc_x glv_n ⊢ { rm0 glv_n } 
						^ r0,rm0 ⊢ r0,rm0,sc0 
							"\tmov rdi,GLX(" 0d' ")\n" 
							`	mov rsi,0x0000_ffff_ffff_ffff 
							`	and rsi,QWORD [rdi]
							"\tmov GLX(" 1d' "),rsi\n" // 
						rp8.add_s8 { ec0 sc0 } ⊢ ec0 
						$ RP.cns2◂{ RP.atm◂ast.hp◂{ r0 ast.hp.arr◂ha } stt_v.r64_reg◂rm0 } ⊢ iy 
						∎ { evv glv_n ec0 iy }
					∐. . 
						» "arr_len 0" _ ⊢ se 
						_emt se ⊢ se 
						∎|	 
				@.stt_in_fn { evv lb_n ec0 eds rm0 s0 }
					$ s0 ⊢ 
					∐ ast.hp_of◂r0 . 
						^ r0,rm0 ⊢ r0,rm0,sc0 
							"\tmov rdi,GLX(" 0d' ")\n" 
							push_c_regs 
							`	add rdi,8
							`	call in_fn
							pop_c_regs 
							"\tmov GLX(" 1d' "),rax\n" 
							// 
						rp8.add_s8 { ec0 sc0 } ⊢ ec0
						$ RP.cns2◂{ stt_v.s8_reg◂r0 stt_v.s8_reg◂rm0 } ⊢ iy 
						∎ { evv lb_n ec0 eds iy }
					∐. ast.im_of◂s0 . 
						inc_x lb_n ⊢ { lb0 lb_n } 
						data_s8 { eds lb0 s0 } ⊢ { eds lb0 s0 }
						^ lb0,rm0 ⊢ lb0,rm0,sr 
							"\tmov rdi,LB_" 0d' "\n" 
							`	CALL_SF in_fn 
							"\tmov GLX(" 1d' "),rax\n" 
						//
						rp8.add_s8 { ec0 sr } ⊢ ec0 
						$ RP.cns2◂{ stt_v.s8_im◂s0 stt_v.s8_reg◂rm0 } ⊢ iy 
						∎ { evv lb_n ec0 eds iy }
					@.stt_mlc_s8 { evv glv_n ec0 x } 
						$ x ⊢ 
						∐ ast.im_of◂l0 . 
							_mlc_s8 l0 ⊢ { l0 s1 }   
							$ RP.cns2◂{ stt_v.r64_im◂l0 stt_v.s8_im◂s1 } ⊢ iy
							∎ { evv glv_n ec0 iy } 
						∐. ast.hp_of◂r0 . 
							inc_x glv_n ⊢ { rm0 glv_n } 
							^ r0,rm0 ⊢ r0,rm0,sc0 
								"\tmov rdi,GLX(" 0d' ")\n" 
								`	call mlc_s8
								"\tmov GLX(" 1d' "),rax\n" // 
								rp8.add_s8 { ec0 sc0 } ⊢ ec0 
								$ RP.cns2◂{ stt_v.r64_reg◂r0 stt_v.s8_reg◂rm0 } ⊢ iy 
								∎ { evv glv_n ec0 iy } 								
					\\[
					@.stt_jmp { V rfv ox f_c { gfl cl mfv } glv_n ei_n lb_n { ev_n ev evv }  { rv irv } tav tv_n tv { eg0 eds ec0 } { ys is o yr } } 
						evl_ct_ptn { evv o } ⊢ { evv k } 
						∐ k ⊢ RP.atm◂k . 
							∐ k ⊢ ast.k_ctr◂{ ia na _ } . 
								∎ { V rfv  { gfl cl mfv } glv_n ei_n lb_n { ev_n ev evv }  { rv irv } tav tv_n tv { eg0 eds ec0 rp8.e◂{} } { RP.atm◂ast.stt_adt◂{ ia na is } yr } } 
							∐ k ⊢ ast.k_op_gnr◂{ og o_n ok dp r_ng ibg lcg _ } . 
								find_gf.e { tv evv mfv o_n ys ok } ⊢ { tv evv mfv o_n ys ok oa0 }
								stt_etr { V rfv  oa0 { og ok dp r_ng ibg } { o_n ys yr } { gfl cl mfv } glv_n ei_n lb_n { ev_n ev evv } rv tav tv_n tv lcg { eg0 eds } } ⊢ { V bf rfv { lb ig o_k y1 p0 gyd } yr { gfl cl mfv } glv_n ei_n lb_n { ev_n ev evv } rv tav tv_n tv { eg0 eds } } 
								alc_type_k.f_i { tav tv_n tv %[ 0r ] gyd } ⊢ { tav tv_n tv _ p1 }
								∐ f_c ⊢ f_jmp◂{ lb_i _ } . 
									mov_ptn2.ptn { ec0 { evv tav tv_n tv eds } glv_n is p0 } ⊢ { ec0 { evv tav tv_n tv eds } glv_n }
									^ lb ⊢ lb,sc0 
										"\tjmp JMP_" 0d' "\n" // 
									rp8.add_s8 { ec0 sc0 } ⊢ ec0 
									∎ { V rfv  { gfl cl mfv } glv_n ei_n lb_n { ev_n ev evv }  { rv irv } tav tv_n tv { eg0 eds ec0 rp8.e◂{} } { p1 yr } } 
								∐. . 
									^ lb ⊢ lb,se0 
										"LB_" 0d' // 
									$ rp8.e◂{} ⊢ er 
									inc_x lb_n ⊢ { lb_w lb_n } 
									stt_v.mk_lst_env { irv ⟦⟧ } ⊢ { irv vl } 
									∐ bf ⊢ bl.t◂{} . 
										push_gl { vl %[ 0r ] } ⊢ { _ l ep }
										rp8.cct { er ep } ⊢ er  
										$ l ⊢ l,l0 
										^ lb_w ⊢ lb_w,s0 
											"\tpush EXH_" 0d' "\n" // 
										rp8.add_s8 { er s0 } ⊢ er 
										exh { ox lb_w %[ 0r ] l0 } ⊢ ew1
										mov_ptn2.ptn { er { evv tav tv_n tv eds } glv_n is p0 } ⊢ { er { evv tav tv_n tv eds } glv_n }
										^ se0 ⊢ se0,e1 
											"\tcall " 0' "\n" //
										rp8.add_s8 { er e1 } ⊢ er 
										rp8.cct { ec0 er } ⊢ ec0 
										rp8.add_s8 { ec0 %[ "\tadd rsp,8\n" ] } ⊢ ec0 
										mov_ptn2.alc_ptn { { ec0 glv_n } p1 } ⊢ { { ec0 glv_n } p1 } 
										pop_gl { ec0 l } ⊢ ec0 
										∎ { V rfv  { gfl cl mfv } glv_n ei_n lb_n { ev_n ev evv }  { rv irv } tav tv_n tv { eg0 eds ec0 ew1 } { p1 yr } } 
									\\[
									∐. . 
										^ lb_w ⊢ lb_w,s0 
											"\tpush EXH_" 0d' "\n" // 
										rp8.add_s8 { er s0 } ⊢ er 
										exh { ox lb_w %[ 0r ] ⟦⟧ } ⊢ ew1
										mov_ptn2.ptn { er { evv tav tv_n tv eds } glv_n is p0 } ⊢ { er { evv tav tv_n tv eds } glv_n }
										^ se0 ⊢ se0,e1 
											"\tcall " 0' "\n" //
										rp8.add_s8 { er e1 } ⊢ er 
										rp8.cct { ec0 er } ⊢ ec0 
										rp8.add_s8 { ec0 %[ "\tadd rsp,8\n" ] } ⊢ ec0 
										mov_ptn2.alc_ptn { { ec0 glv_n } p1 } ⊢ { { ec0 glv_n } p1 } 
										∎ { V rfv { gfl cl mfv } glv_n ei_n lb_n { ev_n ev evv }  { rv irv } tav tv_n tv { eg0 eds ec0 ew1 } { p1 yr } } 
							\\]
							∐ k ⊢ ast.k_app◂{ k0 k1 } . 
								_emt %[ "stt_call app 1" ] ⊢ _
								∎|  
							∐ k ⊢ ast.k_op_axm◂{ a la } . 
								$ yr ⊢ yr,yd 
								=+ a' 
								\\ mk_arr 
								∐ 
									arr.mk_arr { gfl is irv evv tav tv_n tv yd glv_n lb_n  } ⊢ { gfl irv evv tav tv_n tv glv_n lb_n  { eds1 eg1 e0 } iy }
									rp8.cct { eds eds1 } ⊢ eds 
									rp8.cct { ec0 e0 } ⊢ ec0  
									rp8.cct { eg0 eg1 } ⊢ eg0 
									stt_jmp_axm { ec0 evv tav tv_n tv eds glv_n iy f_c } ⊢ { ec0 evv tav tv_n tv eds glv_n iy }
									∎ { V rfv  { gfl cl mfv } glv_n ei_n lb_n { ev_n ev evv }  { rv irv } tav tv_n tv { eg0 eds ec0 rp8.e◂{} } { iy yr } } 									 
								\\ exc_q 
								∐ 
									$ yd ⊢ yd,yd0 
									newvar_l { tv_n tv %[ 1r ] } ⊢ { tv_n tv lv y0 } 
									newvar_l { tv_n tv lv } ⊢ { tv_n tv lv y1 } 
									newvar_l { tv_n tv lv } ⊢ { tv_n tv lv y2 }
									$ y2 ⊢ y2,y2_0 
									inst { tv_n tv lv yd0 } ⊢ { tv_n tv lv yd0 } 
									T.unify.f { tv RP.cns3◂{ y0 y1 y2 } yd0 } ⊢ tv 
									_dec lv ⊢ lv 
									gen { tv_n tv lv y2_0 } ⊢ { tv_n tv lv y2_0 } 
									$ y2_0 ⊢ y2_0,y2_00,y3
									alc_type_k.f_i { tav tv_n tv %[ 0r ] y3 } ⊢ { tav tv_n tv c_n pa0 }
									stt_exc_q { evv tav tv_n tv glv_n lb_n ec0 eds c_n pa0 y2_00 is } ⊢ { evv tav tv_n tv glv_n lb_n ec0 eds iy }
									stt_jmp_axm { ec0 evv tav tv_n tv eds glv_n iy f_c } ⊢ { ec0 evv tav tv_n tv eds glv_n iy }
									∎ { V rfv  { gfl cl mfv } glv_n ei_n lb_n { ev_n ev evv }  { rv irv } tav tv_n tv { eg0 eds ec0 rp8.e◂{} } { iy yr } } 								
								\\ set_q 
								∐
									∎| 
								\\ get_q 
								∐ 
									∎| 
								\\lod_q 
								∐ 
									stt_lod_q { gfl evv tav tv_n tv glv_n lb_n ec0 eds eg0 is } ⊢ { gfl evv tav tv_n tv glv_n lb_n ec0 eds eg0 iy }
									stt_jmp_axm { ec0 evv tav tv_n tv eds glv_n iy f_c } ⊢ { ec0 evv tav tv_n tv eds glv_n iy }
									∎ { V rfv  { gfl cl mfv } glv_n ei_n lb_n { ev_n ev evv }  { rv irv } tav tv_n tv { eg0 eds ec0 rp8.e◂{} } { iy yr } } 										
								\\ args 
								∐ 
									∎|
								\\ mlc_s8 
								∐ 
									ast.r64_of_rt { evv is } ⊢ { evv x } 
									stt_mlc_s8 { evv glv_n ec0 x } ⊢ { evv glv_n ec0 iy } 
									stt_jmp_axm { ec0 evv tav tv_n tv eds glv_n iy f_c } ⊢ { ec0 evv tav tv_n tv eds glv_n iy }
									∎ { V rfv  { gfl cl mfv } glv_n ei_n lb_n { ev_n ev evv }  { rv irv } tav tv_n tv { eg0 eds ec0 rp8.e◂{} } { iy yr } }  
								\\ s8_len 
								∐ 
									stt_s8_len { evv glv_n ec0 is } ⊢ { evv glv_n ec0 iy } 
									stt_jmp_axm { ec0 evv tav tv_n tv eds glv_n iy f_c } ⊢ { ec0 evv tav tv_n tv eds glv_n iy }
									∎ { V rfv  { gfl cl mfv } glv_n ei_n lb_n { ev_n ev evv }  { rv irv } tav tv_n tv { eg0 eds ec0 rp8.e◂{} } { iy yr } } 																		
								\\ emt 
								∐ 
									T.pnt_type_k { tv yd } ⊢ { tv syd } 
									^ syd ⊢ _,syd 
										" : " 0' "\n" //
									$ rp8.e◂{} ⊢ e0 
									$ is ⊢ is,is0  
									rp8.add_s8 { e0 %[ "\tmov QWORD [SIG_FLG],1\n\tmov QWORD [SIG_ETR],emt_bof_hdl\n\tEMT_CST fmt_emt,64\n" ] } ⊢ e0 
									emt.ptn { gfl _nil◂{} tv_n tv tav evv lb_n glv_n is0 { eds e0 } } ⊢ { gfl fl tv_n tv tav evv lb_n glv_n { eds e0 } }
									rp8.add_s8 { e0 %[ "\tEMT_CST fmt_nl,4\n" ] } ⊢ e0 
									emt.adt_lp { gfl fl tv_n tv tav evv lb_n glv_n { eds eg0 } } ⊢ { gfl tv_n tv tav evv lb_n glv_n { eds eg0 } }
									emt.emt_stg { syd lb_n { eds e0 } } ⊢ { _ lb_n { eds e0 } }
									rp8.add_s8 { e0 %[ "\tEMT_FLSH\n\tmov QWORD [SIG_FLG],0\n" ] } ⊢ e0 
									rp8.cct { ec0 e0 } ⊢ ec0 
									$ is ⊢ iy 
									stt_jmp_axm { ec0 evv tav tv_n tv eds glv_n iy f_c } ⊢ { ec0 evv tav tv_n tv eds glv_n iy }
									∎ { V rfv  { gfl cl mfv } glv_n ei_n lb_n { ev_n ev evv }  { rv irv } tav tv_n tv { eg0 eds ec0 rp8.e◂{} } { iy yr } } 
								\\ inc 
								∐ 
									op1◂◂{ _inc "add" } { evv  is ec0 } ⊢ { evv  iy ec0 }
									stt_jmp_axm { ec0 evv tav tv_n tv eds glv_n iy f_c } ⊢ { ec0 evv tav tv_n tv eds glv_n iy }
									∎ { V rfv  { gfl cl mfv } glv_n ei_n lb_n { ev_n ev evv }  { rv irv } tav tv_n tv { eg0 eds ec0 rp8.e◂{} } { iy yr } } 
								\\ dec 
								∐ 
									op1◂◂{ _dec "sub" } { evv  is ec0 } ⊢ { evv  iy ec0 }
									stt_jmp_axm { ec0 evv tav tv_n tv eds glv_n iy f_c } ⊢ { ec0 evv tav tv_n tv eds glv_n iy }
									∎ { V rfv  { gfl cl mfv } glv_n ei_n lb_n { ev_n ev evv }  { rv irv } tav tv_n tv { eg0 eds ec0 rp8.e◂{} } { iy yr } } 
								\\ add 
								∐ 
									op2.f◂◂_add { bl.t◂{} %[ "add" ] { evv tav } glv_n lb_n a irv is } ⊢ { { evv tav } glv_n lb_n a irv iy ec1 }
									rp8.cct { ec0 ec1 } ⊢ ec0 
									stt_jmp_axm { ec0 evv tav tv_n tv eds glv_n iy f_c } ⊢ { ec0 evv tav tv_n tv eds glv_n iy }
									∎ { V rfv  { gfl cl mfv } glv_n ei_n lb_n { ev_n ev evv }  { rv irv } tav tv_n tv { eg0 eds ec0 rp8.e◂{} } { iy yr } } 
								\\ sub 
								∐ 
									op2.f◂◂_sub { bl.t◂{} %[ "sub" ] { evv tav } glv_n lb_n a irv is } ⊢ { { evv tav } glv_n lb_n a irv iy ec1 }
									rp8.cct { ec0 ec1 } ⊢ ec0 
									stt_jmp_axm { ec0 evv tav tv_n tv eds glv_n iy f_c } ⊢ { ec0 evv tav tv_n tv eds glv_n iy }
									∎ { V rfv  { gfl cl mfv } glv_n ei_n lb_n { ev_n ev evv }  { rv irv } tav tv_n tv { eg0 eds ec0 rp8.e◂{} } { iy yr } } 
								\\ imul 
								∐ 
									imul { evv glv_n is irv ec0 } ⊢ { evv glv_n iy irv ec0 }
									stt_jmp_axm { ec0 evv tav tv_n tv eds glv_n iy f_c } ⊢ { ec0 evv tav tv_n tv eds glv_n iy }
									∎ { V rfv  { gfl cl mfv } glv_n ei_n lb_n { ev_n ev evv }  { rv irv } tav tv_n tv { eg0 eds ec0 rp8.e◂{} } { iy yr } } 			
								\\ sts 
								∐ 
									$ rp8.e◂{} ⊢ e0 
									sts.f { is glv_n evv e0 } ⊢ { glv_n evv e0 iy }
									rp8.cct { ec0 e0 } ⊢ ec0 
									stt_jmp_axm { ec0 evv tav tv_n tv eds glv_n iy f_c } ⊢ { ec0 evv tav tv_n tv eds glv_n iy }
									∎ { V rfv  { gfl cl mfv } glv_n ei_n lb_n { ev_n ev evv }  { rv irv } tav tv_n tv { eg0 eds ec0 rp8.e◂{} } { iy yr } } 
								\\ lds 
								∐ 
									stt_lds { evv glv_n lb_n ec0 eds is } ⊢ { evv glv_n lb_n ec0 eds iy } 
									stt_jmp_axm { ec0 evv tav tv_n tv eds glv_n iy f_c } ⊢ { ec0 evv tav tv_n tv eds glv_n iy }
									∎ { V rfv  { gfl cl mfv } glv_n ei_n lb_n { ev_n ev evv }  { rv irv } tav tv_n tv { eg0 eds ec0 rp8.e◂{} } { iy yr } } 
								\\ setget 
								∐
									∎|
								\\ rep_movsb 
								∐ 
									$ rp8.e◂{} ⊢ e0 
									rep_movsb.f { is glv_n lb_n evv irv e0 } ⊢ { glv_n lb_n evv irv e0 iy }
									rp8.cct { ec0 e0 } ⊢ ec0  
									stt_jmp_axm { ec0 evv tav tv_n tv eds glv_n iy f_c } ⊢ { ec0 evv tav tv_n tv eds glv_n iy }
									∎ { V rfv  { gfl cl mfv } glv_n ei_n lb_n { ev_n ev evv }  { rv irv } tav tv_n tv { eg0 eds ec0 rp8.e◂{} } { iy yr } } 
								\\ nil 
								∐ 
									∎| 
								\\ cns 
								∐ 
									∎| 
								\\ some 
								∐ 
									∎| 
								\\ none 
								∐ 
									∎| 
								\\ in_fn 
								∐ 
									$ rp8.e◂{} ⊢ e0 
									inc_x glv_n ⊢ { rm0 glv_n } 
									ast.s8_of_rt { evv is } ⊢ { evv s0 } 
									stt_in_fn { evv lb_n ec0 eds rm0 s0 } ⊢ { evv lb_n ec0 eds iy }
									stt_jmp_axm { ec0 evv tav tv_n tv eds glv_n iy f_c } ⊢ { ec0 evv tav tv_n tv eds glv_n iy }
									∎ { V rfv  { gfl cl mfv } glv_n ei_n lb_n { ev_n ev evv }  { rv irv } tav tv_n tv { eg0 eds ec0 rp8.e◂{} } { iy yr } } 																
								\\ emt_s8_to 
								∐ 
									stt_emt_s8_to { evv glv_n lb_n ec0 eds is } ⊢ { evv glv_n lb_n ec0 eds iy }
									stt_jmp_axm { ec0 evv tav tv_n tv eds glv_n iy f_c } ⊢ { ec0 evv tav tv_n tv eds glv_n iy }
									∎ { V rfv  { gfl cl mfv } glv_n ei_n lb_n { ev_n ev evv }  { rv irv } tav tv_n tv { eg0 eds ec0 rp8.e◂{} } { iy yr } } 
								\\ cd 
								∐ 
									stt_cd { evv glv_n lb_n ec0 eds is } ⊢ { evv glv_n lb_n ec0 eds iy }
									stt_jmp_axm { ec0 evv tav tv_n tv eds glv_n iy f_c } ⊢ { ec0 evv tav tv_n tv eds glv_n iy }
									∎ { V rfv  { gfl cl mfv } glv_n ei_n lb_n { ev_n ev evv }  { rv irv } tav tv_n tv { eg0 eds ec0 rp8.e◂{} } { iy yr } } 									
								\\ byt 
								∐ 
									∎| 
								\\ mk_clr 
								∐ 
									∎| 
								\\ alp 
								∐ 
									∎|
								\\ frp 
								∐ 
									∎| 
								\\ mkp 
								∐ 
									∎| 
								\\ dlp 
								∐ 
									∎| 
								\\ arr_len 
								∐ 
									stt_arr_len { evv glv_n ec0 is } ⊢ { evv glv_n ec0 iy }
									stt_jmp_axm { ec0 evv tav tv_n tv eds glv_n iy f_c } ⊢ { ec0 evv tav tv_n tv eds glv_n iy }
									∎ { V rfv  { gfl cl mfv } glv_n ei_n lb_n { ev_n ev evv }  { rv irv } tav tv_n tv { eg0 eds ec0 rp8.e◂{} } { iy yr } } 															
								\\ arr_of_lst 
								∐ 
									∎| 
								\\ scf_d 
								∐ 
									∎| 
								\\ scf_x 
								∐ 
									∎| 
								\\ dlt0 
								∐ 
									∎| 
								\\ info 
								∐ 
									rp8.add_s8 { ec0 %[ "\tcall info\n" ] } ⊢ ec0 
									$ is ⊢ iy
									stt_jmp_axm { ec0 evv tav tv_n tv eds glv_n iy f_c } ⊢ { ec0 evv tav tv_n tv eds glv_n iy }
									∎ { V rfv  { gfl cl mfv } glv_n ei_n lb_n { ev_n ev evv }  { rv irv } tav tv_n tv { eg0 eds ec0 rp8.e◂{} } { iy yr } } 									 
								\\ rpc 
								∐ 
									rpc.ptn { gfl _nil◂{} tv_n tv tav evv lb_n glv_n is { eds ec0 } } ⊢ { gfl fl tv_n tv tav evv lb_n glv_n is id { eds ec0 } } 
									rpc.adt_lp { gfl fl tv_n tv tav evv lb_n glv_n { eds eg0 } } ⊢ { gfl tv_n tv tav evv lb_n glv_n { eds eg0 } }							 
									$ RP.cns2◂{ is id } ⊢ iy
									stt_jmp_axm { ec0 evv tav tv_n tv eds glv_n iy f_c } ⊢ { ec0 evv tav tv_n tv eds glv_n iy }
									∎ { V rfv  { gfl cl mfv } glv_n ei_n lb_n { ev_n ev evv }  { rv irv } tav tv_n tv { eg0 eds ec0 rp8.e◂{} } { iy yr } } 									 
								\\ getchar 
								∐ 
									inc_x glv_n ⊢ { rm0 glv_n } 
									^ rm0 ⊢ rm0,sc0 
										`	mov rdi,fmt_getchar 
										`	call emt_stg 
										`	xor rax,rax 
										`	C_CALL_SF getchar 
										"\tmov GLX(" 0d' "),rax\n" // 
									rp8.add_s8 { ec0 sc0 } ⊢ ec0 
									$ stt_v.r64_reg◂rm0 ⊢ iy 
									stt_jmp_axm { ec0 evv tav tv_n tv eds glv_n iy f_c } ⊢ { ec0 evv tav tv_n tv eds glv_n iy }
									∎ { V rfv  { gfl cl mfv } glv_n ei_n lb_n { ev_n ev evv }  { rv irv } tav tv_n tv { eg0 eds ec0 rp8.e◂{} } { iy yr } } 									 
								\\ shl 
								∐ 
									op_shr◂◂{ _shl "shl" } { evv tav glv_n lb_n a irv is ec0 }  ⊢ { evv tav glv_n lb_n a irv iy ec0 }
									stt_jmp_axm { ec0 evv tav tv_n tv eds glv_n iy f_c } ⊢ { ec0 evv tav tv_n tv eds glv_n iy }
									∎ { V rfv  { gfl cl mfv } glv_n ei_n lb_n { ev_n ev evv }  { rv irv } tav tv_n tv { eg0 eds ec0 rp8.e◂{} } { iy yr } } 									 
								\\ shr 
								∐ 
									op_shr◂◂{ _shr "shr" } { evv tav glv_n lb_n a irv is ec0 }  ⊢ { evv tav glv_n lb_n a irv iy ec0 }
									stt_jmp_axm { ec0 evv tav tv_n tv eds glv_n iy f_c } ⊢ { ec0 evv tav tv_n tv eds glv_n iy }
									∎ { V rfv  { gfl cl mfv } glv_n ei_n lb_n { ev_n ev evv }  { rv irv } tav tv_n tv { eg0 eds ec0 rp8.e◂{} } { iy yr } }  
								\\ app 
								∐ 
									∎| 
								\\ and 
								∐ 
									op2.f◂◂_and { bl.f◂{} %[ "and" ] { evv tav } glv_n lb_n a irv is } ⊢ { { evv tav } glv_n lb_n a irv iy ec1 }
									rp8.cct { ec0 ec1 } ⊢ ec0 
									stt_jmp_axm { ec0 evv tav tv_n tv eds glv_n iy f_c } ⊢ { ec0 evv tav tv_n tv eds glv_n iy }
									∎ { V rfv  { gfl cl mfv } glv_n ei_n lb_n { ev_n ev evv }  { rv irv } tav tv_n tv { eg0 eds ec0 rp8.e◂{} } { iy yr } } 
								\\ or 
								∐ 
									op2.f◂◂op2.op_dmy { bl.f◂{} %[ "or" ] { evv tav } glv_n lb_n a irv is } ⊢ { { evv tav } glv_n lb_n a irv iy ec1 }
									rp8.cct { ec0 ec1 } ⊢ ec0 
									stt_jmp_axm { ec0 evv tav tv_n tv eds glv_n iy f_c } ⊢ { ec0 evv tav tv_n tv eds glv_n iy }
									∎ { V rfv  { gfl cl mfv } glv_n ei_n lb_n { ev_n ev evv }  { rv irv } tav tv_n tv { eg0 eds ec0 rp8.e◂{} } { iy yr } } 								
								\\ prs 
								∐ 
									∐ la ⊢ _cns◂{ k1 la }; la ⊢ _nil◂{} . 
										∐ k1 ⊢ RP.atm◂k1; k1 ⊢ ast.k_op_axm◂{ ax1 axl1 } . 
											∐ ax1'=EX.grm; axl1 ⊢ _cns◂{ k1 axl1 }; axl1 ⊢ _nil◂{} .
												stt_jmp { V rfv  ox f_c { gfl cl mfv } glv_n ei_n lb_n { ev_n ev evv }  { rv irv } tav tv_n tv { eg0 eds ec0 } { ys is k1 yr } } ⊢| 									 
											∐. . 
												∐ is ⊢ RP.rcd◂l0; l0 ⊢ _cns◂{ p0 l0 }; l0 ⊢ _cns◂{ p1 l0 }; l0 ⊢ _nil◂{} . 
													$ p0 ⊢ p0,p0_0
													inc_x glv_n ⊢ { rm0 glv_n } 
													inc_x glv_n ⊢ { rm1 glv_n } 
													inc_x glv_n ⊢ { rm2 glv_n } 
													ast.s8_of_rt { evv p0 } ⊢ { evv s0 } 
													s8_to_rdi_rsi { eds ec0 lb_n s0 } ⊢ { eds ec0 lb_n }
													r64_to_rax { evv p1 } ⊢ { evv sc0 } 
													rp8.add_s8 { ec0 sc0 } ⊢ ec0 
													grm_axm { evv lb_n ax1 axl1 ec0 } ⊢ { evv lb_n ec0 yt } 	
													^ rm0,rm1,rm2 ⊢ rm0,rm1,rm2,sc0 
														"\tmov GLX(" 0d' "),rax\n" 
														"\tmov GLX(" 1d' "),rsi\n"
														"\tmov GLX(" 2d' "),r10\n" // 
													rp8.add_s8 { ec0 sc0 } ⊢ ec0
													$ RP.cns3◂{ p0_0 stt_v.r64_reg◂rm0 RP.atm◂ast.dyn_adt◂{ { %[ TX.id.opn ] ⟦ yt ⟧ } rm2 rm1 } } ⊢ iy
													stt_jmp_axm { ec0 evv tav tv_n tv eds glv_n iy f_c } ⊢ { ec0 evv tav tv_n tv eds glv_n iy }
													∎ { V rfv  { gfl cl mfv } glv_n ei_n lb_n { ev_n ev evv }  { rv irv } tav tv_n tv { eg0 eds ec0 rp8.e◂{} } { iy yr } } 														
												∐. . 
													∎|			
										∐. . 
											_emt %[ "stt_call app 2" ] ⊢ _ 
											∎| 
									∐. . 
										∎|
								\\ opn_exn 
								∐ 
									∎| 
								\\ id 
								∐ 
									stt_jmp_axm { ec0 evv tav tv_n tv eds glv_n is f_c } ⊢ { ec0 evv tav tv_n tv eds glv_n iy }
									∎ { V rfv  { gfl cl mfv } glv_n ei_n lb_n { ev_n ev evv }  { rv irv } tav tv_n tv { eg0 eds ec0 rp8.e◂{} } { iy yr } } 
								\\ c_call 
								∐
									_emt %[ "EX.c_call:0" ] ⊢ _ 
									∎| 
								\\ xor 
								∐ 
									op2.f◂◂op2.op_dmy { bl.f◂{} %[ "xor" ] { evv tav } glv_n lb_n a irv is } ⊢ { { evv tav } glv_n lb_n a irv iy ec1 }
									rp8.cct { ec0 ec1 } ⊢ ec0 
									stt_jmp_axm { ec0 evv tav tv_n tv eds glv_n iy f_c } ⊢ { ec0 evv tav tv_n tv eds glv_n iy }
									∎ { V rfv  { gfl cl mfv } glv_n ei_n lb_n { ev_n ev evv }  { rv irv } tav tv_n tv { eg0 eds ec0 rp8.e◂{} } { iy yr } } 
								\\ lds64 
								∐ 
									stt_lds64 { evv glv_n lb_n ec0 eds is } ⊢ { evv glv_n lb_n ec0 eds iy } 
									stt_jmp_axm { ec0 evv tav tv_n tv eds glv_n iy f_c } ⊢ { ec0 evv tav tv_n tv eds glv_n iy }
									∎ { V rfv  { gfl cl mfv } glv_n ei_n lb_n { ev_n ev evv }  { rv irv } tav tv_n tv { eg0 eds ec0 rp8.e◂{} } { iy yr } } 									
								\\ s8_hsh 
								∐ 
									stt_s8_hsh { evv glv_n ec0 is } ⊢ { evv glv_n ec0 iy } 
									stt_jmp_axm { ec0 evv tav tv_n tv eds glv_n iy f_c } ⊢ { ec0 evv tav tv_n tv eds glv_n iy }
									∎ { V rfv  { gfl cl mfv } glv_n ei_n lb_n { ev_n ev evv }  { rv irv } tav tv_n tv { eg0 eds ec0 rp8.e◂{} } { iy yr } } 									 
								\\ dlt 
								∐ 
									dlt.ptn { gfl _nil◂{} tv_n tv tav evv lb_n glv_n is { eds ec0 } } ⊢ { gfl fl tv_n tv tav evv lb_n glv_n { eds ec0 } }
									dlt.adt_lp { gfl fl tv_n tv tav evv lb_n glv_n { eds eg0 } } ⊢ { gfl tv_n tv tav evv lb_n glv_n { eds eg0 } }
									stt_jmp_axm { ec0 evv tav tv_n tv eds glv_n RP.unt◂{} f_c } ⊢ { ec0 evv tav tv_n tv eds glv_n iy }
									∎ { V rfv  { gfl cl mfv } glv_n ei_n lb_n { ev_n ev evv }  { rv irv } tav tv_n tv { eg0 eds ec0 rp8.e◂{} } { iy yr } } 
								∐ 
									∎| 
								∐ 
									∎| 
								∐ 
									∎| 
								∐ 
									∎|
								∐ 
									∎| 
								∐ 
									∎| 
								∐ 
									∎| 
								∐ 
									∎| 
								\\ tj 
								∐ 
									∐ la ⊢ _cns◂{ k1 la }; la ⊢ _nil◂{} . 
										∐ k1 ⊢ RP.rcd◂l1; l1 ⊢ _cns◂{ kv l1 }; l1 ⊢ _cns◂{ ke l1 }; l1 ⊢ _nil◂{}; kv ⊢ RP.atm◂ast.k_arr◂kv . 
											∎| 
										∐. . 
											∎|
									∐. . 
										∎|
								\\ ala 
								∐ 
									∐ la ⊢ _cns◂{ k1 _nil◂{} }; is ⊢ RP.rcd◂_cns◂{ pv _cns◂{ pi _cns◂{ pa _nil◂{} } } } . 
										\\$ yr ⊢ yr,yr0 
										newvar_l { tv_n tv %[ 1r ] } ⊢ { tv_n tv lv v0 } 
										newvar_l { tv_n tv lv } ⊢ { tv_n tv lv v1 } 
										$ v0 ⊢ v0,v0_0 
										$ v1 ⊢ v1,v1_0 
										T.unify.f { tv RP.cns3◂{ v0_0 TX.r64◂{} TX.arr◂v1_0 } ys } ⊢ tv 
										_dec lv ⊢ lv 
										gen { tv_n tv lv v0 } ⊢ { tv_n tv lv yv } 
										gen { tv_n tv lv v1 } ⊢ { tv_n tv lv yk } 
										$ RP.cns3◂{ yv TX.r64◂{} yk } ⊢ ys1 
										
										$ yr ⊢ yr,yr0 
										newvar_l { tv_n tv lv } ⊢ { tv_n tv lv v0 } 
										newvar_l { tv_n tv lv } ⊢ { tv_n tv lv v1 } 
										$ v0 ⊢ v0,v0_0 
										$ v1 ⊢ v1,v1_0 
										T.unify.f { tv RP.cns2◂{ v0_0 TX.arr◂v1_0 } yr0 } ⊢ tv 
										_dec lv ⊢ lv 
										gen { tv_n tv lv v0 } ⊢ { tv_n tv lv yw } 
										gen { tv_n tv lv v1 } ⊢ { tv_n tv lv yk1 } 
										$ RP.cns2◂{ yw yk1 } ⊢ yr1 
										
										ast.arr_of_rt { evv pa } ⊢ { evv { r0 ya } } 
										$ ya ⊢ ya,ya0 
										alc_type_k.f_i { tav tv_n tv %[ 0r ] ya0 } ⊢ { tav tv_n tv c_n pa0 }
										$ r0 ⊢ r0,r0_0 
										$ stt_v.arr_reg◂{ r0_0 ya } ⊢ a0
										$ pi ⊢ pi,pi_0 
										r64_to_rax { evv pi_0 } ⊢ { evv sc0 } 
										rp8.add_s8 { ec0 sc0 } ⊢ ec0 
										^ r0,c_n ⊢ r0,c_n,sc0 
											"\tmov rdi,GLX(" 0d' ")\n" 
											`	mov rsi,0x0000_ffff_ffff_ffff 
											`	and rsi,QWORD [rdi]
											`	cmp rax,rsi 
											`	jge err_exc_q
											\\`	BC ge,rsi 
											"\t imul rax," 1d' "\n" 
											`	push rdi 
											`	lea SRC_REG,[rdi+8+8*rax]
											`	push SRC_REG
											//
										rp8.add_s8 { ec0 sc0 } ⊢ ec0 
										$ pa0 ⊢ pa0,pa0_0 
										lod_sgm.ptn { { ec0 glv_n } pa0_0 } ⊢ { { ec0 glv_n } pa1 } 
										$ RP.cns3◂{ pv pi pa1 } ⊢ is1 
										stt_jmp { V rfv ox f_c { gfl cl mfv } glv_n ei_n lb_n { ev_n ev evv }  { rv irv } tav tv_n tv { eg0 eds ec0 } { ys1 is1 k1 yr1 } } ⊢ { V rfv  { gfl cl mfv } glv_n ei_n lb_n { ev_n ev evv }  { rv irv } tav tv_n tv { eg0 eds ec0 ew1 } { p1 yr1 } }  									 			
										∐ p1 ⊢ RP.rcd◂_cns◂{ pv1 _cns◂{ pk1 _nil◂{} } } . 
											^ r0 ⊢ _,sc0 
												"\tpop DST_REG\n" 
												"\tpop GLX(" 0d' ")\n" // 
											rp8.add_s8 { ec0 sc0 } ⊢ ec0 
											mov_ptn2.to_sgm_ptn { ec0 { evv tav tv_n tv eds } glv_n pk1 pa0 } ⊢ { ec0 { evv tav tv_n tv eds } glv_n } 
											mov_ptn2.alc_ptn { { ec0 glv_n } pv1 } ⊢ { { ec0 glv_n } pv1 } 
											$ RP.cns2◂{ pv1 a0 } ⊢ iy 
											∎ { V rfv  { gfl cl mfv } glv_n ei_n lb_n { ev_n ev evv } { rv irv } tav tv_n tv { eg0 eds ec0 ew1 } { iy yr } } 							
										∐. . 
											∎|					
									∐. . 
										∎|
								\\ cli 
								∐ 
									$ yr ⊢ yr,yr0 
									inst { tv_n tv %[ 1r ] yr0 } ⊢ { tv_n tv lv yr0 }
									newvar_l { tv_n tv lv } ⊢ { tv_n tv lv v0 } 
									$ v0 ⊢ v0,v0_0 
									T.unify.f { tv TX.Clr◂v0_0 yr0 } ⊢ tv 
									_dec lv ⊢ lv 
									gen { tv_n tv lv v0 } ⊢ { tv_n tv lv yv } 
									inc_x glv_n ⊢ { p0 glv_n } 
									^ p0 ⊢ p0,sc0 
										`	mov rdi,QWORD [CLR_N]
										`	add QWORD [CLR_N],1 
										`	ALC_RCD 3,rax
										"\tmov GLX(" 0d' "),rax\n" 
										`	mov QWORD [rax+8],rdi
										`	mov QWORD [rax+16],0 
										`	bts rdi,63
										"\tmov QWORD [rax+24],rdi\n" // 
									rp8.add_s8 { ec0 sc0 } ⊢ ec0 
									$ stt_v.id_reg◂{ p0 %[ ast.hp.id.Clr ] yv } ⊢ iy
									∎ { V rfv { gfl cl mfv } glv_n ei_n lb_n { ev_n ev evv } { rv irv } tav tv_n tv { eg0 eds ec0 rp8.e◂{} } { iy yr } } 																
								\\ clp 
								∐ 
									∐ is ⊢ RP.rcd◂_cns◂{ RP.atm◂ast.hp◂{ r0 _ } _cns◂{ pk _nil◂{} } } . 
										$ yr ⊢ yr,yr0 
										inst { tv_n tv %[ 1r ] yr0 } ⊢ { tv_n tv lv yr0 }
										newvar_l { tv_n tv lv } ⊢ { tv_n tv lv v0 } 
										newvar_l { tv_n tv lv } ⊢ { tv_n tv lv v1 } 
										$ v0 ⊢ v0,v0_0 
										$ v1 ⊢ v1,v1_0 
										T.unify.f { tv RP.cns2◂{ TX.Clr◂v0_0 v1_0 } yr0 } ⊢ tv 
										_dec lv ⊢ lv 
										gen { tv_n tv lv v0 } ⊢ { tv_n tv lv yk } 
										gen { tv_n tv lv v1 } ⊢ { tv_n tv lv _ } 
										$ yk ⊢ yk,yk0 
										alc_type_k.f_i { tav tv_n tv %[ 0r ] yk0 } ⊢ { tav tv_n tv c_n pa0 }
										inc_x glv_n ⊢ { i0 glv_n } 
										_add { c_n %[ 2r ] } ⊢ { c_n _ } 
										^ c_n,r0,i0 ⊢ _,r0,i0,sc0 
											"\tALC_RCD " 0d' ",rax\n" 
											"\tmov GLX(" 2d' "),rax\n" 
											"\tmov rdi,GLX(" 1d' ")\n"
											`	add QWORD [rdi+16],1 
											`	mov rsi,QWORD [rdi+8]
											`	mov QWORD [rax+8],rsi 
											`	mov rsi,QWORD [rdi+24]
											`	mov QWORD [rax],rsi 
											`	mov QWORD [rdi+24],rax 
											`	mov QWORD [rax+16],2 
											`	lea DST_REG,[rax+24]
											//
										rp8.add_s8 { ec0 sc0 } ⊢ ec0 
										mov_ptn2.to_sgm_ptn { ec0 { evv tav tv_n tv eds } glv_n pk pa0 } ⊢ { ec0 { evv tav tv_n tv eds } glv_n } 
										$ yk ⊢ yk,yk0 
										$ RP.cns2◂{ stt_v.Clr_reg◂{ r0 yk } stt_v.pt_reg◂{ i0 yk0 } } ⊢ iy 
										∎ { V rfv { gfl cl mfv } glv_n ei_n lb_n { ev_n ev evv } { rv irv } tav tv_n tv { eg0 eds ec0 rp8.e◂{} } { iy yr } } 																										
							
									∐. . 
										∎| 
								\\ cla 
								∐ 
									∐ la ⊢ _cns◂{ k1 _nil◂{} }; is ⊢ RP.rcd◂_cns◂{ pv _cns◂{ RP.atm◂ast.hp◂{ ri _ } _cns◂{ RP.atm◂ast.hp◂{ r0 ast.hp.id◂{ _ ya } } _nil◂{} } } } . 
										newvar_l { tv_n tv %[ 1r ] } ⊢ { tv_n tv lv v0 } 
										newvar_l { tv_n tv lv } ⊢ { tv_n tv lv v1 } 
										$ v0 ⊢ v0,v0_0 
										$ v1 ⊢ v1,v1_0,v1_1 
										T.unify.f { tv RP.cns3◂{ v0_0 TX.pt◂v1_1 TX.Clr◂v1_0 } ys } ⊢ tv 
										_dec lv ⊢ lv 
										gen { tv_n tv lv v0 } ⊢ { tv_n tv lv yv } 
										gen { tv_n tv lv v1 } ⊢ { tv_n tv lv yk } 
										$ RP.cns2◂{ yv yk } ⊢ ys1 

										$ yr ⊢ yr,yr0 
										newvar_l { tv_n tv lv } ⊢ { tv_n tv lv v0 } 
										newvar_l { tv_n tv lv } ⊢ { tv_n tv lv v1 } 
										$ v0 ⊢ v0,v0_0 
										$ v1 ⊢ v1,v1_0,v1_1 
										T.unify.f { tv RP.cns3◂{ v0_0 TX.pt◂v1_1 TX.Clr◂v1_0 } yr0 } ⊢ tv 
										_dec lv ⊢ lv 
										gen { tv_n tv lv v0 } ⊢ { tv_n tv lv yw } 
										gen { tv_n tv lv v1 } ⊢ { tv_n tv lv yk1 } 
										$ yk1 ⊢ yk1,yk1_0 
										$ RP.cns2◂{ yw yk1_0 } ⊢ yr1 

										$ ya ⊢ ya,ya0 
										alc_type_k.f_i { tav tv_n tv %[ 0r ] ya0 } ⊢ { tav tv_n tv c_n pa0 }
										^ r0,c_n,ri ⊢ r0,c_n,ri,sc0 
											"\tmov rax,GLX(" 2d' ")\n" 
											"\tmov rdi,GLX(" 0d' ")\n" 
											`	mov rsi,QWORD [rax+8] 
											`	cmp QWORD [rdi+8],rsi 
											`	jnz err_exc_q
											`	push rdi 
											`	push rax 
											`	lea SRC_REG,[rax+24]
											`	push SRC_REG 
											//
										rp8.add_s8 { ec0 sc0 } ⊢ ec0 
										$ pa0 ⊢ pa0,pa0_0 
										lod_sgm.ptn { { ec0 glv_n } pa0_0 } ⊢ { { ec0 glv_n } pa1 } 
										$ RP.cns2◂{ pv pa1 } ⊢ is1 
										stt_jmp { V rfv ox f_c { gfl cl mfv } glv_n ei_n lb_n { ev_n ev evv }  { rv irv } tav tv_n tv { eg0 eds ec0 } { ys1 is1 k1 yr1 } } ⊢ { V rfv  { gfl cl mfv } glv_n ei_n lb_n { ev_n ev evv }  { rv irv } tav tv_n tv { eg0 eds ec0 ew1 } { p1 yr1 } }  									 			
										∐ p1 ⊢ RP.rcd◂_cns◂{ pv1 _cns◂{ pk1 _nil◂{} } } . 
											^ r0,ri ⊢ r0,ri,sc0 
												"\tpop DST_REG\n" 
												"\tpop GLX(" 1d' ")\n"
												"\tpop GLX(" 0d' ")\n" // 
											rp8.add_s8 { ec0 sc0 } ⊢ ec0 
											mov_ptn2.to_sgm_ptn { ec0 { evv tav tv_n tv eds } glv_n pk1 pa0 } ⊢ { ec0 { evv tav tv_n tv eds } glv_n } 
											mov_ptn2.alc_ptn { { ec0 glv_n } pv1 } ⊢ { { ec0 glv_n } pv1 } 
											$ yk1 ⊢ yk1,yk1_0
											$ RP.cns3◂{ pv1 stt_v.pt_reg◂{ ri yk1_0 } stt_v.Clr_reg◂{ r0 yk1 } } ⊢ iy 
											∎ { V rfv { gfl cl mfv } glv_n ei_n lb_n { ev_n ev evv } { rv irv } tav tv_n tv { eg0 eds ec0 ew1 } { iy yr } } 							
										∐. . 
											∎|					
									∐. . 
										∎| 
								\\ cln 
								∐ 
									∐ is ⊢ RP.atm◂ast.hp◂{ r0 _ } . 
										$ yr ⊢ yr,yr0 
										inst { tv_n tv %[ 1r ] yr0 } ⊢ { tv_n tv lv yr0 }
										newvar_l { tv_n tv lv } ⊢ { tv_n tv lv v0 } 
										newvar_l { tv_n tv lv } ⊢ { tv_n tv lv v1 } 
										$ v0 ⊢ v0,v0_0 
										$ v1 ⊢ v1,v1_0 
										T.unify.f { tv RP.cns2◂{ TX.Clr◂v0_0 v1_0 } yr0 } ⊢ tv 
										_dec lv ⊢ lv 
										gen { tv_n tv lv v0 } ⊢ { tv_n tv lv yk } 
										gen { tv_n tv lv v1 } ⊢ { tv_n tv lv _ } 
										$ yk ⊢ yk,yk0 
										alc_type_k.f_i { tav tv_n tv %[ 0r ] yk0 } ⊢ { tav tv_n tv c_n pa0 }
										inc_x glv_n ⊢ { i0 glv_n } 
										_add { c_n %[ 2r ] } ⊢ { c_n _ } 
										^ c_n,r0,i0 ⊢ _,r0,i0,sc0 
											"\tALC_RCD " 0d' ",rax\n" 
											"\tmov GLX(" 2d' "),rax\n" 
											"\tmov rdi,GLX(" 1d' ")\n"
											`	mov rsi,QWORD [rdi+8]
											\\`	or rsi,0xf000_0000_0000_0000 
											`	bts rsi,63 
											`	mov QWORD [rax],~0x0f0f 
											`	mov QWORD [rax+8],rsi 
											`	mov QWORD [rax+16],1 
											//
										rp8.add_s8 { ec0 sc0 } ⊢ ec0 
										$ yk ⊢ yk,yk0 
										$ RP.cns2◂{ stt_v.Clr_reg◂{ r0 yk } stt_v.pt_reg◂{ i0 yk0 } } ⊢ iy 
										∎ { V rfv { gfl cl mfv } glv_n ei_n lb_n { ev_n ev evv } { rv irv } tav tv_n tv { eg0 eds ec0 rp8.e◂{} } { iy yr } } 																										
									∐. . 
										∎| 
								\\ cls 
								∐ 
									∐ is ⊢ RP.rcd◂_cns◂{ RP.atm◂ast.hp◂{ r0 _ } _cns◂{ RP.atm◂ast.hp◂{ i0 _ } _cns◂{ pk _nil◂{} } } } . 
										$ yr ⊢ yr,yr0 
										inst { tv_n tv %[ 1r ] yr0 } ⊢ { tv_n tv lv yr0 }
										newvar_l { tv_n tv lv } ⊢ { tv_n tv lv v0 } 
										newvar_l { tv_n tv lv } ⊢ { tv_n tv lv v1 } 
										$ v0 ⊢ v0,v0_0,v0_1 
										$ v1 ⊢ v1 
										T.unify.f { tv RP.cns2◂{ TX.Clr◂v0_0 TX.pt◂v0_1 } yr0 } ⊢ tv 
										_dec lv ⊢ lv 
										gen { tv_n tv lv v0 } ⊢ { tv_n tv lv yk } 
										gen { tv_n tv lv v1 } ⊢ { tv_n tv lv _ } 
										$ yk ⊢ yk,yk0 
										alc_type_k.f_i { tav tv_n tv %[ 0r ] yk0 } ⊢ { tav tv_n tv c_n pa0 }
										_add { c_n %[ 2r ] } ⊢ { c_n _ } 
										^ c_n,r0,i0 ⊢ _,r0,i0,sc0 
											"\tmov rdi,GLX(" 1d' ")\n"
											"\tmov rax,GLX(" 2d' ")\n" 
											`	mov rsi,QWORD [rax+8]
											`	bt rsi,63 
											`	jnc err_exc_q 
											`	mov rbx,0x0fff_ffff_ffff_ffff
											`	and rsi,rbx
											`	cmp QWORD [rdi+8],rsi 
											`	jnz err_exc_q 
											`	mov QWORD [rax+8],rsi 
											`	mov rsi,QWORD [rdi+24]
											`	mov QWORD [rax],rsi 
											`	mov QWORD [rdi+24],rax 
											`	add QWORD [rdi+16],1 
											`	add QWORD [rax+16],1 
											`	lea DST_REG,[rax+24]
											//
										rp8.add_s8 { ec0 sc0 } ⊢ ec0 
										mov_ptn2.to_sgm_ptn { ec0 { evv tav tv_n tv eds } glv_n pk pa0 } ⊢ { ec0 { evv tav tv_n tv eds } glv_n } 
										$ yk ⊢ yk,yk0 
										$ RP.cns2◂{ stt_v.Clr_reg◂{ r0 yk } stt_v.pt_reg◂{ i0 yk0 } } ⊢ iy 
										∎ { V rfv { gfl cl mfv } glv_n ei_n lb_n { ev_n ev evv } { rv irv } tav tv_n tv { eg0 eds ec0 rp8.e◂{} } { iy yr } } 																										
									∐. . 
										∎|
								∐.  
									^ a ⊢ a,ee1 
										"; ##" 0d' ".. ⊢ ..\n"
										"\tcall ETR_" 0d' "\n" //
									_emt ee1 ⊢ ee1 
									∎| 											
					∐. . 
								ast.pnt.cst { evv k } ⊢ { evv sk } 
								^ sk ⊢ _,ec1 
									"; " "#" 0' ".." " ⊢|\n"  // 
								_emt ec1 ⊢ _ 
								∎|

				∐. . 
									_emt %[ "stt_call app 3" ] ⊢ _
							∎| 
					
					@.f # { V rfv { gfl cl mfv } glv_n ei_n lb_n { ev_n ev evv }  { rv irv } tav tv_n tv lc { eg0 eds ec0 ew0 } ft } 
						ret_f { V rfv { gfl cl mfv } glv_n ei_n lb_n { ev_n ev evv }  { rv irv } tav tv_n tv lc { eg0 eds ec0 ew0 } ft } ⊢|						
					@.ret_f { V rfv { gfl cl mfv } glv_n ei_n lb_n { ev_n ev evv }  { rv irv } tav tv_n tv lc { eg0 eds ec0 ew0 } ft } 
						pnt_env { evv irv } ⊢ { evv irv srl } 
						rp8.add_s8 { ec0 srl } ⊢ ec0 
						$ lc ⊢
						∐ ast.jmp◂{ o x } . 
							$ x ⊢ x,s0
							crt_type_k.src_ptn { { ev tv_n tv rv } s0 } ⊢ { { ev tv_n tv rv } ys } 
							T.inst_cl { tv_n tv ys cl } ⊢ { tv_n tv ys cl }
							idx.csm_ptn { { evv irv } x } ⊢ { { evv irv } is }
							$ is ⊢ is,is0 
							ast.pnt.rt { evv is0 } ⊢ { evv sis }
							$ o ⊢ o,o0 
							ast.pnt.ct_ptn { evv o0 } ⊢ { evv so } 
							^ so,sis ⊢ so,sis,ec1 
								"; #" 0' " " 1' " ⊢|\n" //
							rp8.add_s8 { ec0 ec1 } ⊢ ec0 
							dlt.env { gfl evv irv tv_n tv tav lb_n glv_n { eg0 eds ec0 } } ⊢ { gfl evv irv tv_n tv tav lb_n glv_n { eg0 eds ec0 } } 
							slv.ct_ptn { { %[ 1r ] ev tv_n tv } o } ⊢ { { lv ev tv_n tv } o yk } 
							_dec lv ⊢ lv 
							gen { tv_n tv lv yk } ⊢ { tv_n tv lv yk }
							_inc lv ⊢ lv  
							∐ ft ⊢ f_etr◂{ lb_i pr yr } . 
								$ yr ⊢ yr,yr0 
								T.iug_imp { tv_n tv lv ys yr0 yk } ⊢ { tv_n tv lv ys _ yk } 
								$ lb_i ⊢ lb_i,lb_i0 
								$ pr ⊢ pr,pr0
								$ f_jmp◂{ lb_i0 pr0 } ⊢ f_c 
								stt_jmp { V rfv  ‹› f_c { gfl cl mfv } glv_n ei_n lb_n { ev_n ev evv }  { rv irv } tav tv_n tv { eg0 eds ec0 } { ys is o yr } } ⊢ { V rfv  { gfl cl mfv } glv_n ei_n lb_n { ev_n ev evv }  { rv irv } tav tv_n tv { eg0 eds ec0 ew1 } { p1 yr } }  
								rp8.cct { ew0 ew1 } ⊢ ew0 
								$ f_etr◂{ lb_i pr yr } ⊢ ft 
								∎ { V rfv { gfl cl mfv } glv_n ei_n lb_n { ev_n ev evv }  { rv irv } tav tv_n tv { eg0 eds ec0 ew0 } ft } 
							∐. . 
								» "ret_f D664" _ ⊢ ee0 
									_emt ee0 ⊢ _ 
									\\]
									∎|
						∐ ast.seq◂{ ll lc } .
							$ ll ⊢
							∐ ast.op_name◂{ o ib s d } .			
								\\[
								$ s ⊢ s,s0
								crt_type_k.src_ptn { { ev tv_n tv rv } s0 } ⊢ { { ev tv_n tv rv } ys } 
								idx.csm_ptn { { evv irv } s } ⊢ { { evv irv } is }
								$ is ⊢ is,is0 
								ast.pnt.rt { evv is0 } ⊢ { evv sis }
								$ d ⊢ d,d0 
								crt_type_k.mtc_ptn { { ev tv_n tv rv } d0 } ⊢ { { ev tv_n tv rv } yd }
								T.inst_cl { tv_n tv ys cl } ⊢ { tv_n tv ys cl }
								T.inst_cl { tv_n tv yd cl } ⊢ { tv_n tv yd cl } 
								$ o ⊢ o,o0 
								ast.pnt.ct_ptn { evv o0 } ⊢ { evv so } 
								» 1r _ ⊢ lv 
								slv.ct_ptn { { lv ev tv_n tv } o } ⊢ { { lv ev tv_n tv } o yk }
								_dec lv ⊢ lv 
								gen { tv_n tv lv yk } ⊢ { tv_n tv lv yk }
								_inc lv ⊢ lv  
								T.iug_imp { tv_n tv lv ys yd yk } ⊢ { tv_n tv lv ys yd yk } 
								$ rp8.e◂{} ⊢ ec1 
								stt_jmp { V rfv  _none◂{} f_call◂{} { gfl cl mfv } glv_n ei_n lb_n { ev_n ev evv }  { rv irv } tav tv_n tv { eg0 eds ec1 } { ys is o yd } } ⊢ { V rfv  { gfl cl mfv } glv_n ei_n lb_n { ev_n ev evv }  { rv irv } tav tv_n tv { eg0 eds ec1 ew1 } { p1 yd } }  
								rp8.cct { ew0 ew1 } ⊢ ew0 
								$ p1 ⊢ p1,iy 
								ast.pnt.rt { evv iy } ⊢ { evv sp1 } 
								^ so,sis,sp1 ⊢ _,sis,_,el1 
									"; #" 0' " " 1' " ⊢ " 2' "\n" //
								hdl_err◂◂idx.crt_ptn { { irv d p1 _nil◂{} } el1 } ⊢ { { irv dl } el1 }
								rp8.add_s8 { ec0 el1 } ⊢ ec0 
								rp8.cct { ec0 ec1 } ⊢ ec0
								dlt.f { gfl evv tv_n tv tav lb_n glv_n dl { eg0 eds ec0 } } ⊢ { gfl evv tv_n tv tav lb_n glv_n { eg0 eds ec0 } }
								ret_f { V rfv { gfl cl mfv } glv_n ei_n lb_n { ev_n ev evv }  { rv irv } tav tv_n tv lc { eg0 eds ec0 ew0 } ft } ⊢|						
							∐. ast.op_exp_s8◂{ pl ss ds } .
								\\[
								» 0r _ ⊢ dn 
								$ pl ⊢ pl,pl0 
								$ rp8.e◂{} ⊢ ep0 
								^ _ ⊢ ec1 
									"; ^ .. ⊢ ..\n"	// 
								rp8.add_s8 { ec0 ec1 } ⊢ ec0 
								exp_s8.f { gfl evv tv_n tv tav glv_n lb_n  irv ss ds pl { eg0 eds ec0 } } ⊢ { gfl evv tv_n tv tav glv_n lb_n  irv { eg0 eds ec0 } }
								ret_f { V rfv { gfl cl mfv } glv_n ei_n lb_n { ev_n ev evv }  { rv irv } tav tv_n tv lc { eg0 eds ec0 ew0 } ft } ⊢|
						\\]
						\\\∎| 
						∐ ast.mtc◂q0 .
							∐ ft ⊢ f_rtm◂ret0 . 
								» "ret_f D663" _ ⊢ ee0 
									_emt ee0 ⊢ _ 
									∎|
							∐. .  
								\\mk_nd_mtc { { V ‹› } lm } ⊢ { V q0 } 
								hsh_tbl.ini %[ 5r ] ⊢ mirv 
								hsh_tbl.ini %[ 4r ] ⊢ rirv 
								mirv_of { { mirv { %[ 0r ] rirv } } irv } ⊢ { mirv { rirv_n rirv } }    
								$ iso◂{ rfv gfl cl mfv ei_n ev_n ev rv eg0 eds ew0 ft } ⊢ FE
								mtc { { V q0 } mirv { rirv_n rirv } glv_n lb_n evv tav tv_n tv ec0 FE } ⊢|
						∐ ast.op_exh◂{ o s d lc lx } . 
							$ s ⊢ s,s0
							crt_type_k.src_ptn { { ev tv_n tv rv } s0 } ⊢ { { ev tv_n tv rv } ys } 
							idx.csm_ptn { { evv irv } s } ⊢ { { evv irv } is }
							$ is ⊢ is,is0 
							ast.pnt.rt { evv is0 } ⊢ { evv sis }
							$ d ⊢ d,d0 
							crt_type_k.mtc_ptn { { ev tv_n tv rv } d0 } ⊢ { { ev tv_n tv rv } yd }
							T.inst_cl { tv_n tv ys cl } ⊢ { tv_n tv ys cl }
							T.inst_cl { tv_n tv yd cl } ⊢ { tv_n tv yd cl } 
							$ o ⊢ o,o0 
							ast.pnt.ct_ptn { evv o0 } ⊢ { evv so } 
							» 1r _ ⊢ lv 
							slv.ct_ptn { { lv ev tv_n tv } o } ⊢ { { lv ev tv_n tv } o yk }
							_dec lv ⊢ lv 
							gen { tv_n tv lv yk } ⊢ { tv_n tv lv yk }
							_inc lv ⊢ lv  
							T.iug_imp { tv_n tv lv ys yd yk } ⊢ { tv_n tv lv ys yd yk } 
							$ rp8.e◂{} ⊢ ec1 
							$ f_call◂{} ⊢ f_c 
							inc_x lb_n ⊢ { lb_x lb_n } 
							$ lb_x ⊢ lb_x,lb_x0 
							stt_jmp { V rfv _some◂lb_x f_c { gfl cl mfv } glv_n ei_n lb_n { ev_n ev evv } { rv irv } tav tv_n tv { eg0 eds ec1 } { ys is o yd } } ⊢ { V rfv { gfl cl mfv } glv_n ei_n lb_n { ev_n ev evv } { rv irv } tav tv_n tv { eg0 eds ec1 ew1 } { p1 yd } }  
							rp8.cct { ew0 ew1 } ⊢ ew0 
							$ p1 ⊢ p1,iy 
							ast.pnt.rt { evv iy } ⊢ { evv sp1 } 
							^ so,sis,sp1 ⊢ _,sis,_,el1 
								"; #" 0' " " 1' " ⊢ " 2' "\n" //
							$ _nil◂{} ⊢ dl 
							$ irv ⊢ irv,irv0 
							hdl_err◂◂idx.crt_ptn { { irv d p1 dl } el1 } ⊢ { { irv dl } el1 }
							rp8.add_s8 { ec0 el1 } ⊢ ec0 
							rp8.cct { ec0 ec1 } ⊢ ec0
							dlt.f { gfl evv tv_n tv tav lb_n glv_n dl { eg0 eds ec0 } } ⊢ { gfl evv tv_n tv tav lb_n glv_n { eg0 eds ec0 } }
							ret_f { V rfv { gfl cl mfv } glv_n ei_n lb_n { ev_n ev evv }  { rv irv } tav tv_n tv lc { eg0 eds ec0 ew0 } ft } ⊢ { V rfv { gfl cl mfv } glv_n ei_n lb_n { ev_n ev evv }  { rv irv } tav tv_n tv { eg0 eds ec0 ew0 } ft }		
							lb_etr { lb_x0 ec0 } ⊢ { _ ec0 } 
							ret_f { V rfv { gfl cl mfv } glv_n ei_n lb_n { ev_n ev evv } { rv irv0 } tav tv_n tv lx { eg0 eds ec0 ew0 } ft } ⊢|
						∐ ast.tj◂{ x v r } . 
							hsh_tbl.r64.asc { irv x } ⊢ { irv { _ px } }
							smt_err◂◂"eq:1" px ⊢ px
							ast.r64_of_rt { evv px } ⊢ { evv x } 
							$ x ⊢ 
							∐ ast.im_of◂i . 
								∎| 
							∐. ast.hp_of◂rx . 
								tj { { rx v r %[ 0r ] rp8.e◂{} rp8.e◂{} } V rfv { gfl cl mfv } glv_n ei_n lb_n { ev_n ev evv }  { rv irv } tav tv_n tv { eg0 eds ec0 ew0 } ft }	⊢|	
						∐ ast.ret◂s .
							$ s ⊢ 
							∐ _some◂{ s _ } . 
								idx.csm_ptn { { evv irv } s } ⊢ { { evv irv } is }
								$ is ⊢ is,is0 
								ast.pnt.rt { evv is0 } ⊢ { evv sis }
								^ sis ⊢ _,ec1 
									"; ∎ " 0' "\n"
									 // 
								rp8.add_s8 { ec0 ec1 } ⊢ ec0 
								dlt.env { gfl evv irv tv_n tv tav lb_n glv_n { eg0 eds ec0 } } ⊢ { gfl evv irv tv_n tv tav lb_n glv_n { eg0 eds ec0 } } 
								∐ ft ⊢ f_etr◂{ lb_i pr yr } . 
									$ pr ⊢ pr,pr0 
									mov_ptn2.ptn { ec0 { evv tav tv_n tv eds } glv_n is pr0 } ⊢ { ec0 { evv tav tv_n tv eds } glv_n } 
									rp8.add_s8 { ec0 %[ "\tret\n" ] } ⊢ ec0
									f_etr { lb_i pr yr } ⊢ ft 
									∎ { V rfv { gfl cl mfv } glv_n ei_n lb_n { ev_n ev evv }  { rv irv } tav tv_n tv { eg0 eds ec0 ew0 } ft }
								∐. . 
									_emt %[ "ret_f D661" ] ⊢ _ 
									∎| 
							∐. _none◂{} . 
								∐ ft ⊢ f_rtm◂ret . 
									$ %[ "; ∎\n" ] ⊢ sc0 
									rp8.add_s8 { ec0 sc0 } ⊢ ec0 
									$ ret ⊢ ret,ret0 
									rp8.add_s8 { ec0 ret0 } ⊢ ec0
									$ f_rtm◂ret ⊢ ft 
									∎ { V rfv { gfl cl mfv } glv_n ei_n lb_n { ev_n ev evv }  { rv irv } tav tv_n tv { eg0 eds ec0 ew0 } ft }
								∐. . 
									» "ret_f D660" _ ⊢ ee0 
									_emt ee0 ⊢ _ 
									\\]
									∎|
						∐. ast.exn◂ne .
							\\[
							^ ne ⊢ _,se 
								"; ∎|\n" 
								"exn " 0d' ":\n" // 
							printf { eds ec0 se lb_n } ⊢ { eds ec0 se lb_n }
							dlt.env { gfl evv irv tv_n tv tav lb_n glv_n { eg0 eds ec0 } } ⊢ { gfl evv irv tv_n tv tav lb_n glv_n { eg0 eds ec0 } } 
							^ _ ⊢ ec1 
								"\tadd rsp,8\n" 
								"\tpop rdi\n" 
								"\tjmp rdi\n" // 
							rp8.add_s8 { ec0 ec1 } ⊢ ec0 
							∎ { V rfv { gfl cl mfv } glv_n ei_n lb_n { ev_n ev evv }  { rv irv } tav tv_n tv { eg0 eds ec0 ew0 } ft } 		
				@.tj { { x v r i elt ec1 } V rfv { gfl cl mfv } glv_n ei_n lb_n { ev_n ev evv } { rv irv } tav tv_n tv { eg0 eds ec0 ew0 } ft }
				 	$ v ⊢ 
					∐ _cns◂{ lc v } . 
						inc_x lb_n ⊢ { lbi lb_n } 
						lb_etr { lbi ec1 } ⊢ { lbi ec1 } 
						^ lbi ⊢ lbi,sl
							"LB_" 0d' "," //
						rp8.add_s8 { elt sl } ⊢ elt
						$ irv ⊢ irv,irv0 
						ret_f { V rfv { gfl cl mfv } glv_n ei_n lb_n { ev_n ev evv }  { rv irv0 } tav tv_n tv lc { eg0 eds ec1 ew0 } ft } ⊢ { V rfv { gfl cl mfv } glv_n ei_n lb_n { ev_n ev evv }  { rv _ } tav tv_n tv { eg0 eds ec1 ew0 } ft }		
				 		_inc i ⊢ i 
						tj { { x v r i elt ec1 } V rfv { gfl cl mfv } glv_n ei_n lb_n { ev_n ev evv }  { rv irv } tav tv_n tv { eg0 eds ec0 ew0 } ft }	⊢|	
					∐. _nil◂{} . 
						inc_x lb_n ⊢ { lb0 lb_n } 
						inc_x lb_n ⊢ { lb1 lb_n } 
						^ lb0,lb1,x,i ⊢ _,lb1,_,i,sc0  
							"\tmov rax,GLX(" 2d' ")\n" 
							"\tcmp rax," 3d' "\n" 
							"\tjge LB_" 1d' "\n" 
							"\tjmp QWORD [LB_" 0d' "+8*rax]\n"
							"LB_" 0d' ": dq " // 
						rp8.add_s8 { rp8.e◂{} sc0 } ⊢ el0 
						rp8.cct { el0 elt } ⊢ el0 
						rp8.add_s8 { el0 %[ "0\n" ] } ⊢ el0 
						rp8.cct { el0 ec1 } ⊢ ec1 
						lb_etr { lb1 ec1 } ⊢ { _ ec1 } 
						rp8.cct { ec0 ec1 } ⊢ ec0 
						ret_f { V rfv { gfl cl mfv } glv_n ei_n lb_n { ev_n ev evv }  { rv irv } tav tv_n tv r { eg0 eds ec0 ew0 } ft } ⊢| 
				@.gnr_lc_code { V rfv o_k { o_n gys gyd dp } { gfl cl mfv } glv_n ei_n lb_n { ev_n ev evv } rv tav tv_n tv lc } 
						hsh_tbl.ini %[ 6r ] ⊢ rv_g
						slv.crt_mtc_ptn { { %[ 1r ] ev rv_g tv tv_n } dp } ⊢ { { lv_g ev rv_g tv tv_n } dp yd } 
						slv.r { V lv_g ev rv_g tv tv_n lc } ⊢ { V lv_g ev rv_g tv tv_n lc yr } 
						T.inst.al { { tv_n tv lv_g ⟦⟧ } gys } ⊢ { { tv_n tv lv_g al } gys }
						T.inst.al { { tv_n tv lv_g al } gyd } ⊢ { { tv_n tv lv_g al } gyd }
						T.inst.al { { tv_n tv lv_g al } yd } ⊢ { { tv_n tv lv_g al } yd }
						T.inst.al { { tv_n tv lv_g al } yr } ⊢ { { tv_n tv lv_g _ } yr }
						$ gys ⊢ gys,gys0 
						$ gyd ⊢ gyd,gyd0 
						$ yd ⊢ yd,yd0 
						T.unify.f { tv gys0 yd0 } ⊢ tv
						$ yr ⊢ yr,yr0 
						T.unify.f { tv gyd0 yr0 } ⊢ tv
						_dec lv_g ⊢ lv_g 
						gen { tv_n tv lv_g yd } ⊢ { tv_n tv lv_g yd } 
						gen { tv_n tv lv_g yr } ⊢ { tv_n tv lv_g yr } 
						
						inc_x lb_n ⊢ { lbg lb_n } 
						$ gys ⊢ gys,gys0 
						alc_type_k.f_i { tav tv_n tv glv_n gys0 } ⊢ { tav tv_n tv glv_n p0 } 
						$ gyd ⊢ gyd,gyd0 
						alc_type_k.f_i { tav tv_n tv %[ 0r ] gyd0 } ⊢ { tav tv_n tv d_n pr0 } 
						$ p0 ⊢ p0,p00 
						ast.pnt.rt { evv p00 } ⊢ { evv sp0 } 
						$ pr0 ⊢ pr0,pr00 
						ast.pnt.rt { evv pr00 } ⊢ { evv spr0 } 
						$ yd ⊢ dk 
						$ pr0 ⊢ pr0,pr00 
						$ gys ⊢ gys,gys0 
						$ gyd ⊢ gyd,gyd0 
						
						$ TX.t_imp◂{ gys0 gyd0 } ⊢ yx,yx0 
						T.pnt_type_k { tv yx0 } ⊢ { tv syx } 
						$ o_k ⊢ o_k,o_k0 
						opn.pnt◂◂ast.pnt.ct_ptn { evv o_k0 } ⊢ { evv so_k } 
						$ rp8.e◂{} ⊢ ee0 
						^ lbg,o_n,sp0,spr0,syx,so_k ⊢ lbg,o_n,_,_,_,_,ec1 
							"LB_" 0d' ": ;; #" 1d' "◂◂(" 5' ") " 2' " ⊢ " 3' " : " 4' "\n" //
						eml ec1 ⊢ ec1 
						rp8.add_s8 { ee0 ec1 } ⊢ ee0 
						^ lbg ⊢ lbg,sc0 
							"JMP_" 0d' ":\n" // 
						rp8.add_s8 { ee0 sc0 } ⊢ ee0 
						$ p0 ⊢ p0,p0_f 
						mov_ptn2.alc_ptn { { ee0 glv_n } p0_f } ⊢ { { ee0 glv_n } p0_f } 
						hsh_tbl.ini %[ 6r ] ⊢ irv_g 
						idx.crt_ptn { irv_g dp p0_f _nil◂{} } ⊢ { irv_g dl } 
						$ rfv ⊢ { rfl rfb rfv } 
						inc_x ei_n ⊢ { o ei_n }
						$ o ⊢ o,o0 
						$ rfl ⊢ rfl,rfl0 
						hsh_tbl.r64.set { rfv { o0 rf_k◂rfl0 } } ⊢ { rfv { o0 _ } }
						$ gyd ⊢ gyd,gyd0
						$ lbg ⊢ lbg,lbg0 
						\\$ lbg ⊢ lbg,lbg0 
						$ { lbg o o_k gys p0 gyd0 } ⊢ R0,R1
						_exc_q { mfv o_n ⟦⟧ } ⊢ { mfv o_n ol }
						_exc_q { mfv o_n ⟦ R1 < ol ⟧ } ⊢ { mfv _ _ }
						$ rp8.e◂{} ⊢ eds 
						$ rp8.e◂{} ⊢ eg0 
						$ lbg0 ⊢ lbg0,lbg1
						$ f_etr◂{ lbg0 pr00 gyd } ⊢ ft 
						_inc rfl ⊢ rfl 
						f { V { rfl ‹› rfv } { gfl cl mfv } glv_n ei_n lb_n { ev_n ev evv } { rv_g irv_g } tav tv_n tv lc { eg0 eds ee0 rp8.e◂{} } ft } ⊢ { V { rfl rfb_g rfv } { gfl cl mfv } glv_n ei_n lb_n { ev_n ev evv }  { _ _ } tav tv_n tv { eg0 eds ee0 ew0 } ft } 
						_dec rfl ⊢ rfl 
						^ lbg1 ⊢ _,se0 
							";; gnr LB_" 0d' "\n" // 
						eml se0 ⊢ _ 
						gnr_rfv { rfv o0 rfl rfb rfb_g } ⊢ { bf rfv o0 rfl rfb sr0 }
						rp8.cct { ee0 ew0 } ⊢ ee0 
						rp8.pfx_s8 { sr0 ee0 } ⊢ ee0 
						∎ { V bf { rfl rfb rfv } { eg0 eds ee0 } R0 { gfl cl mfv } glv_n ei_n lb_n { ev_n ev evv } rv tav tv_n tv } 
			@.mtc_rb_lod # { {} o } 
				\\rp o ⊢ { nm rbp brp nxp } 
				$ o ⊢ ast.p◂{ nm rbp brp nxp } 
				$ rbp ⊢ rbp,rbp0 
				$ brp ⊢ brp,brp0 
				∎ { { rbp0 brp0 } ast.p◂{ nm rbp brp nxp } }
			@.mtc_rb_brp { V rbp brp }
				$ brp ⊢ 
				∐ _some◂brp .
					∎ { V brp } 
				∐. _none◂{} . 
					$ rbp ⊢ 
					∐ _some◂rbp .
						_cla◂◂mtc_rb_lod { {} rbp V } ⊢ { { rbp brp } _ V } 
						mtc_rb_brp { V rbp brp } ⊢| 
					∐. _none◂{} . 
						_emt %[ "NON_EXH_ERR:" ] ⊢ _ 
						∎|
			@.mk_irv_i # { { irv mirv { rirv_n rirv } } r } 
				hsh_tbl.r64.asc { mirv r } ⊢ { mirv { r o } } 
				smt_err◂◂"mk_irv_i:0" o ⊢ p 
				rt_of { { rirv_n rirv } p } ⊢ { { rirv_n rirv } p } 
				hsh_tbl.r64.set { irv { r p } } ⊢ { irv { r o } } 
				nnt o ⊢ {} 
				∎ { irv mirv { rirv_n rirv } } 
			@.mtc { { V q0 } mirv { rirv_n rirv } glv_n lb_n evv tav tv_n tv ec0 FE } 
				$ q0 ⊢ 
				∐ nx_e◂{ rl dl lc } .
					inv FE ⊢ { rfv gfl cl mfv ei_n ev_n ev rv eg0 eds ew0 ft }
					hsh_tbl.ini %[ 5r ] ⊢ irv 
					lst.fld_l◂◂mk_irv_i { { irv mirv { rirv_n rirv } } rl } ⊢ { irv mirv _ }
					dlt_wl { irv dl } ⊢ irv 
					ret_f { V rfv { gfl cl mfv } glv_n ei_n lb_n { ev_n ev evv } { rv irv } tav tv_n tv lc { eg0 eds ec0 ew0 } ft } ⊢| 
				∐. nx_m◂q0 . 
					cll { V q0 } ⊢ { V q0 o }
					$ o ⊢ ast.p◂{ nm rbp brp nxp }
					$ nm ⊢ 
					∐ ast.mtc_id◂{ sp mp } . 
						csm_ptn { { evv mirv { rirv_n rirv } } sp } ⊢ { { evv mirv { rirv_n rirv } } isp } 
						$ iso◂{ rbp brp nxp } ⊢ ME 
						mtc_lp { isp mp mirv { rirv_n rirv } ⟦⟧ ec0 lb_n glv_n evv tav tv_n tv V ME FE } ⊢| 
					∐. ast.mtc_test◂{ tt v0 v1 } .  
						inc_x lb_n ⊢ { lb_t lb_n } 
						inc_x lb_n ⊢ { lb_f lb_n }			 
						mtc_test { tt lb_n evv mirv { rirv_n rirv } lb_t lb_f v0 v1 ec0 } ⊢ { lb_n evv mirv MV lb_t lb_f ec0 }
						$ MV ⊢ R_T,R_F
						$ mirv ⊢ mirv_t,mirv_f
						lb_etr { lb_t ec0 } ⊢ { lb_t ec0 } 
						mtc { { V nxp } mirv_t R_T glv_n lb_n evv tav tv_n tv ec0 FE } ⊢ { V rfv { gfl cl mfv } glv_n ei_n lb_n { ev_n ev evv }  { rv _ } tav tv_n tv { eg0 eds ec0 ew0 } ft } 													
						$ iso◂{ rfv gfl cl mfv ei_n ev_n ev rv eg0 eds ew0 ft } ⊢ FE
						lb_etr { lb_f ec0 } ⊢ { lb_f ec0 } 
				 		mtc_rb_brp { V rbp brp } ⊢ { V nxp } 
						mtc { { V nxp } mirv_f R_F glv_n lb_n evv tav tv_n tv ec0 FE } ⊢| 
			@.mtc_test { tt lb_n evv mirv { rirv_n rirv } lb_t lb_f v0 v1 ec0 }
				$ tt ⊢ 
				∐ ast.test_eq◂{} . 
					test.eq { bl.f◂{} lb_n evv mirv { rirv_n rirv } lb_t lb_f v0 v1 ec0 } ⊢| 
				∐ ast.test_neq◂{} . 
					test.eq { bl.t◂{} lb_n evv mirv { rirv_n rirv } lb_t lb_f v0 v1 ec0 } ⊢| 
				∐. ast.test_cmp◂{} . 
					test.cmp { lb_n evv mirv { rirv_n rirv } lb_t lb_f v0 v1 ec0 } ⊢| 
			@.obs_i { { tv_n tv tav lb_n glv_n mirv { rirv_n rirv } e0 } evv mpa1 vi i n rd lbl hl K V ME FE } 
				∐ lbl ⊢ p_cns◂{ lbi lbl }; hl ⊢ _cns◂{ h hl } .
					lb_etr { lbi e0 } ⊢ { _ e0 } 
					$ rd ⊢ rd,rd0 
					alc_hp { { rirv_n rirv } tv_n tv tav glv_n e0 rd0 h } ⊢ { { rirv_n rirv } tv_n tv tav glv_n e0 pi } 
					$ i ⊢ i,i0 
					_inc i ⊢ i 
					$ n ⊢ n,n0 
					$ { rirv_n rirv } ⊢ { rirv_n rirv },{ rirv_n0 rirv0 } 
					hsh_tbl.r64.set { rirv0 { vi stt◂{ i0 n0 pi } } } ⊢ { rirv0 { vi _ } }  
					$ K ⊢ K,K0 
					$ ME ⊢ ME,ME0 
					$ vi ⊢ vi,vi0 
					$ mpa1 ⊢ mpa1,mpa1_0
					$ mirv ⊢ mirv,mirv0 
					mtc_lp { RP.atm◂adt_v◂vi0 mpa1_0 mirv0 { rirv_n0 rirv0 } K0 e0 lb_n glv_n evv tav tv_n tv V ME0 FE } ⊢ { V rfv { gfl cl mfv } glv_n ei_n lb_n { ev_n ev evv }  { rv _ } tav tv_n tv { eg0 eds e0 ew0 } ft } 													
					$ iso◂{ rfv gfl cl mfv ei_n ev_n ev rv eg0 eds ew0 ft } ⊢ FE
					obs_i { { tv_n tv tav lb_n glv_n mirv { rirv_n rirv } e0 } evv mpa1 vi i n rd lbl hl K V ME FE } ⊢| 
				∐ lbl ⊢ p_end◂lbi; hl ⊢ _cns◂{ h _ } .
					lb_etr { lbi e0 } ⊢ { _ e0 } 
					alc_hp { { rirv_n rirv } tv_n tv tav glv_n e0 rd h } ⊢ { { rirv_n rirv } tv_n tv tav glv_n e0 pi } 
					hsh_tbl.r64.set { rirv { vi stt◂{ i n pi } } } ⊢ { rirv { vi _ } }  
					mtc_lp { RP.atm◂adt_v◂vi mpa1 mirv { rirv_n rirv } K e0 lb_n glv_n evv tav tv_n tv V ME FE } ⊢|
				∐. . 
					_emt %[ "obs_i:0" ] ⊢ _ 
					∎|
		@.mtc_lp_lst_K { l0 l1 K }
			∐ l0 ⊢ _cns◂{ p0 l0 }; l1 ⊢ _cns◂{ p1 l1 } .	
				mtc_lp_lst_K { l0 l1 ⟦ { p0 p1 } < K ⟧ } ⊢| 
			∐ l0 ⊢ _nil◂{}; l1 ⊢ _nil◂{} . 
				∎ K 
			∐. . 
				∎| 
		@.mtc_lp_K { mirv MV K e0 lb_n glv_n evv tav tv_n tv V ME FE }
			$ K ⊢ 
			∐ _cns◂{ { p0 p1 } K } .
				mtc_lp { p0 p1 mirv MV K e0 lb_n glv_n evv tav tv_n tv V ME FE } ⊢| 
			∐. _nil◂{} . 
				inv ME ⊢ { _ _ nxp } 
				mtc { { V nxp } mirv MV glv_n lb_n evv tav tv_n tv e0 FE } ⊢|  
		@.mtc_lp { isp mp mirv MV K e0 lb_n glv_n evv tav tv_n tv V ME FE } 
			$ mp ⊢ 
			∐ RP.rcd◂l1 . 
				$ isp ⊢ 
				∐ RP.rcd◂l0 . 
					mtc_lp_lst_K { l0 l1 K } ⊢ K 
					mtc_lp_K { mirv MV K e0 lb_n glv_n evv tav tv_n tv V ME FE } ⊢| 
				∐. RP.atm◂a0 . 		
					_emt %[ "mov_ptn.ptn_to_r d9" ] ⊢ _ 
					∎| 
			∐. RP.atm◂a1 .
				$ a1 ⊢ 
				∐ ast.re_v◂o . 
					smt_err◂◂"re_v e0" o ⊢ wr 
					\\$ isp ⊢ isp,isp0 
					hsh_tbl.r64.set { mirv { wr isp } } ⊢ { mirv _ } 
					mtc_lp_K { mirv MV K e0 lb_n glv_n evv tav tv_n tv V ME FE } ⊢| 
				∐ ast.re_reg◂r1 . 
					\\$ isp ⊢ isp,isp0 
					hsh_tbl.r64.set { mirv { r1 isp } } ⊢ { mirv _ } 
					mtc_lp_K { mirv MV K e0 lb_n glv_n evv tav tv_n tv V ME FE } ⊢| 
				∐. ast.re_agl◂{ ea1 mpa1 } . 
					$ isp ⊢ 
					∐ RP.atm◂a0 . 
						∐ a0 ⊢ hp_im◂c0 . 
							lod_tv { evv ea1 } ⊢ { evv ea1 k1 } 
							ast.ctr_of_k { evv k1 } ⊢ { evv { ia1 na1 vi } }
							ast.agl_of_cst { evv c0 } ⊢ { evv { ia0 na0 va0 ca0 } }
							ast.rt_of_ct { evv ca0 } ⊢ { evv pa0 } 
							mtc_rt_of { MV pa0 } ⊢ { MV pa0 } 
							∐ ia0'=ia1' . 
								mtc_lp { pa0 mpa1 mirv MV K e0 lb_n glv_n evv tav tv_n tv V ME FE } ⊢|
							∐. . 
								inv ME ⊢ { rbp brp _ } 
								mtc_rb_brp { V rbp brp } ⊢ { V brp } 
								mtc { { V brp } mirv MV glv_n lb_n evv tav tv_n tv e0 FE } ⊢|  
						∐ a0 ⊢ adt_v◂i .
							\\[
							$ MV ⊢ { rirv_n rirv } 
							hsh_tbl.r64.asc { rirv i } ⊢ { rirv { i o } } 
							smt_err◂◂"mtc_lp:0" o ⊢ d 
							$ d ⊢ 
							∐ stt◂{ ia0 na0 pa0 } . 
								lod_tv { evv ea1 } ⊢ { evv ea1 k1 } 
								ast.ctr_of_k { evv k1 } ⊢ { evv { ia1 na1 vi } }
								∐ ia0'=ia1' . 
									mtc_lp { pa0 mpa1 mirv { rirv_n rirv } K e0 lb_n glv_n evv tav tv_n tv V ME FE } ⊢|
								∐. . 
									inv ME ⊢ { rbp brp _ } 
									mtc_rb_brp { V rbp brp } ⊢ { V brp } 
									mtc { { V brp } mirv { rirv_n rirv } glv_n lb_n evv tav tv_n tv e0 FE } ⊢|  
							∐. dyn◂{ { lx0 lx1 } ri rd } .
								\\[
								lod_tv { tav lx0 } ⊢ { tav lx0 { aw1 o1 } } 
								smt_err◂◂"mtc_lp:0" o1 ⊢ { _ vl1 kl1 } 
								T.iug_axm { tv_n tv vl1 kl1 lx1 } ⊢ { tv_n tv lx1 } 
								alc_type_k.hp_lst { { tv_n tv } lx1 } ⊢ { { tv_n tv } hl }
								lst.len hl ⊢ { hl n } 
								$ n ⊢ n,n0 
								mk_jmp_tbl { lb_n n0 } ⊢ { lb_n ej lbl } 
								rp8.to_s8 ej ⊢ sj
								inc_x lb_n ⊢ { lb0 lb_n }
								^ lb0,sj,ri ⊢ lb0,_,_,sc0  
									"\tmov rdi,GLX(" 2d' ")\n" 
									"\tjmp QWORD [LB_" 0d' "+8*rdi]\n"
									"LB_" 0d' ": dq " 1' "\n" //
								rp8.add_s8 { e0 sc0 } ⊢ e0  
								hsh_tbl.r64.get { rirv i } ⊢ { rirv { i _ } } 
								obs_i { { tv_n tv tav lb_n glv_n mirv { rirv_n rirv } e0 } evv RP.atm◂ast.re_agl◂{ ea1 mpa1 } i %[ 0r ] n rd lbl hl K V ME FE } ⊢| 
							∐. .
								» "mov_ptn.ptn_to_r d6" _ ⊢ ee0 
								_emt ee0 ⊢ _ 
								∎|
					∐. RP.rcd◂l0 . 
						» "mov_ptn.ptn_to_r d7" _ ⊢ ee0 
						_emt ee0 ⊢ _ 
						∎| 
		\\]
			∎∎

		§§ slv_lc_clq 
			§ 
				@.f { V { mtv mv_n ns_t i rtm_n } env0 mfv tav evv rv tv tv_n ev_n r_n q gfl { eds dd ep0 ec0 lb_n } } 
					$ rp8.e◂{} ⊢ eq0 
					\\_emt %[ "slv_lc_clq D0" ] ⊢ _ 
					f_l0 { { env0 evv tv tv_n ev_n r_n ⟦⟧ { ⟦⟧ ⟦⟧ ⟦⟧ } } q } ⊢ { env0 evv tv tv_n ev_n r_n cl { q ql gl } } 
					\\_emt %[ "slv_lc_clq D1" ] ⊢ _ 
					$ cl ⊢ _ 
					f_l1_q { env0 ev_n evv rv tv tv_n r_n ql } ⊢ { env0 ev_n evv rv tv tv_n r_n ql }
					f_l1 { { V %[ 1r ] env0 ev_n evv tv tv_n } q } ⊢ { { V _ env0 ev_n evv tv tv_n } yl } 
					f_l2_q { { tv_n tv dd eq0 } ql } ⊢ { tv_n tv dd eq0 } 
					f_l2 { env0 tav evv tv_n tv yl { dd eq0 ec0 lb_n } } ⊢ { env0 tav evv tv_n tv yl { dd eq0 ec0 lb_n } } 
					\\_emt %[ "slv_lc_clq D3" ] ⊢ _ 
					rp8.to_s8 eq0 ⊢ es0 
					_emt es0 ⊢ es0 
					$ ⟦ es0 < ep0 ⟧ ⊢ ep0
					∎ { V { mtv mv_n ns_t i  rtm_n } env0 mfv tav evv rv tv tv_n ev_n r_n gfl { eds dd ep0 ec0 lb_n } gl } 
				@.f_l0 = lst.fld_l◂◂f_l0_i 
				@.f_l0_i { { env0 evv tv tv_n ev_n r_n cl { fl ql gl } } { w le } }
					assoc { cl w } ⊢ { cl w o } 
					nnt_emt { o w } ⊢ w 
					$ w ⊢ w,w0 
					$ _cns◂{ { w0 _some◂{} } cl } ⊢ cl 
					$ env0 ⊢ { mmv mev ev ns_m ns_e il }
					newvar_l { tv_n tv %[ 1r ] } ⊢ { tv_n tv lv yx }
					\\_emt %[ "slv_lc_clq D0.0" ] ⊢ _ 
					∐ le ⊢ ast.lc_def◂{ o_t d td if lc } . 
						\\_emt %[ "slv_lc_clq D0.0.0" ] ⊢ _ 
						$ w ⊢ w,w0
						$ ev_n ⊢ ev_n,en0 
						$ yx ⊢ yx,yx0 
						T.newvar_ln { tv_n tv yx0 } ⊢ { tv_n tv iy } 
						$ yx ⊢ yx,yx0 
						add_e { tv_n tv evv ev ev_n ns_e w ast.k_var◂{ %[ CST.not_0 ] iy } yx } ⊢ { tv_n tv evv ev ev_n ns_e }
						\\_emt %[ "slv_lc_clq D0.1" ] ⊢ _ 
						$ { mmv mev ev ns_m ns_e il } ⊢ env0 
						$ lv ⊢ _  
						$ td ⊢ _ 
						\\_emt %[ "slv_lc_clq D0.1.0" ] ⊢ _ 
						∎ { env0 evv tv tv_n ev_n r_n cl { ⟦ { o_t en0 w0 yx0 d if lc } < fl ⟧ ql gl } }
					∐ le ⊢ ast.lc_grm◂ _ .
						_emt %[ "slv_lc_clq lc_grm 0" ] ⊢ _ 
						∎|
					∐ le ⊢ ast.lc_ln◂c .
						$ yx ⊢ yx,yx0 
						T.newvar_ln { tv_n tv yx0 } ⊢ { tv_n tv v0 } 
						$ ev_n ⊢ ev_n,i0 
						set_tv { ev ev_n v0 } ⊢ { ev ev_n } 
						_some i0 ⊢ o 
						$ w ⊢ w,w0 
						$ _cns◂{ { w o } ns_e } ⊢ ns_e 
						$ ev_n ⊢ ev_n,en 
						_inc ev_n ⊢ ev_n 
						$ { mmv mev ev ns_m ns_e il } ⊢ env0 
						∎ { env0 evv tv tv_n ev_n r_n cl { fl ⟦ { w0 en c yx } < ql ⟧ gl } }
					∐. . 
						_emt %[ "slv_lc_clq D0.0.1" ] ⊢ _ 
						∎|
				@.f_l1_q { env0 ev_n evv rv tv tv_n r_n ql }
					$ env0 ⊢ { mmv mev ev ns_m ns_e il }
					$ ql ⊢ 
					∐ _cns◂{ { w en c yx } ql } . 
						slv_n.cst { { mmv mev ev ns_m ns_e il } c } ⊢ { { mmv mev ev ns_m ns_e il } c }   
						$ c ⊢ c,c0 
						set_tv { evv en c } ⊢ { evv en } 
						f_l1_q { { mmv mev ev ns_m ns_e il } ev_n evv rv tv tv_n r_n ql } ⊢ { { mmv mev ev ns_m ns_e il } ev_n evv rv tv tv_n r_n ql }
						slv.cst { { %[ 1r ] ev tv_n tv } c0 } ⊢ { { lv ev tv_n tv } c0 y0 } 
						$ yx ⊢ yx,yx0 
						T.unify.f { tv yx0 y0 } ⊢ tv 
						$ _cns◂{ { w en c0 yx } ql } ⊢ ql 
						∎ { { mmv mev ev ns_m ns_e il } ev_n evv rv tv tv_n r_n ql } 
					∐. _nil◂{} .  
						$ _nil◂{} ⊢ ql
						∎ { { mmv mev ev ns_m ns_e il } ev_n evv rv tv tv_n r_n ql }
				@.f_l2_q = lst.fld_l◂◂f_l2_q_i 
				@.f_l2_q_i # { { tv_n tv dd ep0 } { w en c y } } 
					gen { tv_n tv %[ 0r ] y } ⊢ { tv_n tv _ y } 
					$ y ⊢ y,y0 
					T.pnt_type_k { tv y0 } ⊢ { tv sy }
					^ dd,en,w,sy ⊢ dd,en,w,sy,ep1 
						0'*"\t" "§ " 2' "(" 1d' ") : " 3' "\n" // 
					\\_emt ep1 ⊢ ep1 
					rp8.add_s8 { ep0 ep1 } ⊢ ep0 
					∎ { tv_n tv dd ep0 }
				@.f_l1 = lst.map_l◂◂f_l1_i 
				@.f_l1_i { { V lv env0 ev_n evv tv tv_n } { o_t en w yx d if lc } } 
					\\_emt %[ "enter f_l1" ] ⊢ _
					\\_emt w ⊢ w 
					hsh_tbl.ini %[ 5r ] ⊢ re 
					$ o_t ⊢ 
					∐ _none◂{} . 
						$ _none◂{} ⊢ o_t 
						slv_n.crt_mtc_ptn { { env0 tv tv_n %[ 0r ] re ⟦⟧ } d } ⊢ { { env0 tv tv_n r_n re _ } d } 
						slv_n.r { { env0 tv tv_n r_n re } lc } ⊢ { { env0 tv tv_n r_n _ } lc } 
						slv_V.r { V lc } ⊢ { V lc } 
						hsh_tbl.ini %[ 6r ] ⊢ rv 
						$ env0 ⊢ { mmv mev ev ns_m ns_e il }
						slv.crt_mtc_ptn { { lv ev rv tv tv_n } d } ⊢ { { lv ev rv tv tv_n } d y0 } 
						slv.r { V lv ev rv tv tv_n lc } ⊢ { V lv ev rv tv tv_n lc yr } 
						$ { mmv mev ev ns_m ns_e il } ⊢ env0
						inst { tv_n tv lv yr } ⊢ { tv_n tv lv yr } 
						$ y0 ⊢ y0,y00 
						$ yr ⊢ yr,yr0 
						$ yx ⊢ yx,yx0
						T.unify.f { tv RP.atm◂imp◂{ y00 yr0 } yx } ⊢ tv 
						∎ { { V lv env0 ev_n evv tv tv_n } { o_t en r_n rv if lc w { d y0 yr yx0 } } } 
					∐. _some◂p . 
						$ env0 ⊢ { mmv mev ev ns_m ns_e il }
						tpl_ptn { { %[ 0r ] _nil◂{} lv evv ev ev_n tv tv_n } p } ⊢ { { c_n wl lv evv ev ev_n tv tv_n } p y_c } 
						$ c_n ⊢ c_n,c_n0 
						_some { c_n0 p } ⊢ o_t 
						rev_apnd { wl ns_e } ⊢ ns_e 
						slv_n.crt_mtc_ptn { { { mmv mev ev ns_m ns_e il } tv tv_n %[ 0r ] re ⟦⟧ } d } ⊢ { { { mmv mev ev ns_m ns_e il } tv tv_n r_n re _ } d } 
						slv_n.r { { { mmv mev ev ns_m ns_e il } tv tv_n r_n re } lc } ⊢ { { { mmv mev ev ns_m ns_e il } tv tv_n r_n _ } lc } 
						slv_V.r { V lc } ⊢ { V lc } 
						hsh_tbl.ini %[ 6r ] ⊢ rv  
						pop_n { c_n ns_e } ⊢ { _ ns_e } 
						slv.crt_mtc_ptn { { lv ev rv tv tv_n } d } ⊢ { { lv ev rv tv tv_n } d y0 } 
						slv.r { V lv ev rv tv tv_n lc } ⊢ { V lv ev rv tv tv_n lc yr } 
						$ { mmv mev ev ns_m ns_e il } ⊢ env0
						inst { tv_n tv lv yr } ⊢ { tv_n tv lv yr } 
						$ y0 ⊢ y0,y00 
						$ yr ⊢ yr,yr0 
						$ yx ⊢ yx,yx0 
						T.unify.f { tv RP.atm◂ct_imp◂{ %y_c RP.atm◂imp◂{ y00 yr0 } } yx } ⊢ tv 
						∎ { { V lv env0 ev_n evv tv tv_n } { o_t en r_n rv if lc w { d y0 yr yx0 } } } 
				@.f_l2 { env0 tav evv tv_n tv yl { dd ep0 ec0 lb_n } }  
					$ yl ⊢ 
					∐ _cns◂{ { o_t en r_n rv if lc w { d ys yd yx } } yl } .
						\\_emt %[ "f_l2 0" ] ⊢ _
						gen { tv_n tv %[ 0r ] yx } ⊢ { tv_n tv lv yx } 
						$ ys ⊢ ys,ys0 
						$ _nil◂{} ⊢ ql0 
						$ en ⊢ en,o_n
						$ yx ⊢ yx,yx0 
						T.pnt_type_k { tv yx0 } ⊢ { tv syx }
						$ yx ⊢ yx,yx0 
						T.newvar_ln { tv_n tv yx0 } ⊢ { tv_n tv iy0 } 
						exc_tv { evv en ast.k_op_gnr◂{ o_t o_n ‹› d r_n if lc iy0 } } ⊢ { evv en _ } 
						^ dd,en,w,syx ⊢ dd,en,w,syx,ep1 
							0'*"\t" "§ " 2' "(" 1d' ") : " 3' "\n" // 
						\\_emt ep1 ⊢ ep1 
						\\$ _cns◂{ ep1 ep0 } ⊢ ep0 
						rp8.add_s8 { ep0 ep1 } ⊢ ep0 
						f_l2 { env0 tav evv tv_n tv yl { dd ep0 ec0 lb_n } } ⊢| 
					∐. _nil◂{} . 
						$ _nil◂{} ⊢ yl 
						∎ { env0 tav evv tv_n tv yl { dd ep0 ec0 lb_n } }
			∎∎ 			
			∎∎
		§ lst_v # { tv_n tv } 
			T.newvar_i { tv_n tv } ⊢ { tv_n tv i0 } 
			$ i0 ⊢ i0,i1 
			∎ { tv_n tv RP.atm◂abs◂{ %i1 TX.lst◂ RP.atm◂var◂%i0 } }  

		§ opn_v # { tv_n tv } 
			newvar_i { tv_n tv } ⊢ { tv_n tv i0 } 
			$ i0 ⊢ i0,i1 
			∎ { tv_n tv RP.atm◂abs◂{ %i1 TX.opn◂RP.atm◂var◂%i0 } }  
		
		§ arr_v # { tv_n tv } 
			newvar_i { tv_n tv } ⊢ { tv_n tv i0 } 
			$ i0 ⊢ i0,i1 
			∎ { tv_n tv RP.atm◂abs◂{ i1 TX.arr◂RP.atm◂var◂i0 } }  
		§ Clr_v # { tv_n tv } 
			newvar_i { tv_n tv } ⊢ { tv_n tv i0 } 
			$ i0 ⊢ i0,i1 
			∎ { tv_n tv RP.atm◂abs◂{ i1 TX.Clr◂RP.atm◂var◂i0 } }  
		§ pt_v # { tv_n tv } 
			newvar_i { tv_n tv } ⊢ { tv_n tv i0 } 
			$ i0 ⊢ i0,i1 
			∎ { tv_n tv RP.atm◂abs◂{ i1 TX.pt◂RP.atm◂var◂i0 } }  
		
		§ unt_n_e  # { e i } 
			^ i ⊢ i,s 
				"\tunt_" 0d' ": dq (" 0d' "<<48)\n" // 
			rp8.add_s8 { e s } ⊢ e 
			∎ e 
		§ unt_N = for◂◂unt_n_e 
		§ ss_rcd_n { n m e } 
			∐ n'=2r . 
				^ n,m ⊢ n,m,s 
					`%define SS_RCD_2_MAX SS_RCD_2_MAX_P 
					"\tBSS_SS_RCD 2,SS_RCD_2_MAX\n" 
					//
				rp8.add_s8 { e s } ⊢ e 
				∎ { n m e }
			∐ n'=3r . 
				^ n,m ⊢ n,m,s 
					`%define SS_RCD_3_MAX SS_RCD_3_MAX_P 
					"\tBSS_SS_RCD 3,SS_RCD_3_MAX\n" 
					//
				rp8.add_s8 { e s } ⊢ e 
				∎ { n m e }
			∐ n'=4r . 
				^ n,m ⊢ n,m,s 
					`%define SS_RCD_4_MAX SS_RCD_4_MAX_P  
					"\tBSS_SS_RCD 4,SS_RCD_4_MAX\n" 
					//
				rp8.add_s8 { e s } ⊢ e 
				∎ { n m e }
			∐ 5r=<n'; n'=<8r . 
				^ n,m ⊢ n,m,s 
					"%define SS_RCD_" 0d' "_MAX SS_RCD_" 0d' "_MAX_P\n"
					"\tBSS_SS_RCD " 0d' ",SS_RCD_" 0d' "_MAX\n" 
					//
				rp8.add_s8 { e s } ⊢ e 
				∎ { n m e }
			∐. . 
				^ n,m ⊢ n,m,s 
					"%define SS_RCD_" 0d' "_MAX (1<<14)\n"
					"\tBSS_SS_RCD " 0d' ",SS_RCD_" 0d' "_MAX\n" 
					//
				rp8.add_s8 { e s } ⊢ e 
				∎ { n m e }
		§ @.ss_rcd_n_lp { n N m e } 
			∐ n'=N' . 
				∎ { N m e } 
			∐. . 
				ss_rcd_n { n m e } ⊢ { n m e } 
				_inc n ⊢ n 
				ss_rcd_n_lp { n N m e } ⊢| 
		§ ss_init_n { lb top vct null n m e }
			^ lb,top,vct,null,n,m ⊢ lb,top,vct,null,n,m,s 
				"\tmov QWORD [" 1' "]," 2' "\n" 
				`	mov rdi,0 
				"\tmov rax," 2' "\n" 
				"ss_lp_" 0' ":\n" 
				"\tcmp rdi," 5' "\n" 
				"\tjz ss_end_" 0' "\n" 
				`	add rdi,1 
				"\tlea rsi,[rax+8*" 4d' "]\n" 
				`	mov QWORD [rax],rsi 
				`	mov rax,rsi 
				"\tjmp ss_lp_" 0' "\n" 
				"ss_end_" 0' ":\n" 
				"\tmov rsi," 3' "\n" 
				`	mov [rax],rsi 
				// 
			rp8.add_s8 { e s } ⊢ e 
			∎ { lb top vct null n m e } 
		§ ss_init_rcd { n m e } 
			^ n ⊢ n,lb 
				"rcd_" 0d' // 
			^ n ⊢ n,top 
				"SS_RCD_" 0d' "_TOP" //
			^ n ⊢ n,vct 
				"SS_RCD_" 0d' "_VCT" // 
			^ n ⊢ n,M 
				"SS_RCD_" 0d' "_MAX" //
			» 0xffffffffffff0000r _ ⊢ nl 
			_add { nl n } ⊢ { nl n }
			^ nl ⊢ nl,null 
				0d' //
			^ n ⊢ n,etr 
				"\ninit_ss_rcd_" 0d' ":\n"
				"\tmov QWORD [SS_RCD_N+8*" 0d' "],0\n"
				"\tmov QWORD [SS_RCD_C+8*" 0d' "],0\n" // 
			rp8.add_s8 { e etr } ⊢ e  
			_inc n ⊢ n  
			ss_init_n { lb top vct null n M e } ⊢ { lb top vct null n _ e }
			_dec n ⊢ n 
			∎ { n m e } 
		§ @.ss_init_rcd_lp { n m N e }
			∐ n'=N' . 
				∎ { m N e }  
			∐. . 	
				ss_init_rcd { n m e } ⊢ { n m e }
				_inc n ⊢ n 
				ss_init_rcd_lp { n m N e } ⊢| 
		§ RCD_N = 32r 
		§ iso_env # { mmv mev ev m_ns e_ns m_l } 
			$ { mmv mev ev m_ns e_ns m_l } ⊢ env 
			∎ env 
		§ inv_env # env 
			$ env ⊢ env 
			∎ env 
		§ iso_file # { { ns_r rs_n } { mmv mev mtv mfv mv_n } { ns_m ns_e ns_t } { hpv hpv_n rv rv_n ev ev_n tv tv_n tav evv } { el eds dd ep ec rtm_n lb_n } }
			$ iso◂{ ns_r rs_n } ⊢ RTM_ST 
			$ iso◂{ mmv mev mtv mfv mv_n } ⊢ MV 
			$ iso◂{ ns_m ns_e ns_t } ⊢ NS
			$ iso◂{ hpv hpv_n rv rv_n ev ev_n tv tv_n tav evv } ⊢ LCV 
			$ iso◂{ el eds dd ep ec rtm_n lb_n } ⊢ EC
			∎ { RTM_ST MV NS LCV EC } 
		§ inv_file # { RTM_ST MV NS LCV EC }	
			inv RTM_ST ⊢ { ns_r rs_n } 
			inv MV ⊢ { mmv mev mtv mfv mv_n } 
			inv NS ⊢ { ns_m ns_e ns_t }
			inv LCV ⊢ { hpv hpv_n rv rv_n ev ev_n tv tv_n tav evv }
			inv EC ⊢ { el eds dd ep ec rtm_n lb_n }
			∎ { { ns_r rs_n } { mmv mev mtv mfv mv_n } { ns_m ns_e ns_t } { hpv hpv_n rv rv_n ev ev_n tv tv_n tav evv } { el eds dd ep ec rtm_n lb_n } }

		§  
			@.slv_file_lp { V lc_rt RTM_ST i il MV LCV tx_n NS gel gfl EC }
				inv_file { RTM_ST MV NS LCV EC } ⊢ { {  ns_r rs_n } { mmv mev mtv mfv mv_n } { ns_m ns_e ns_t } { hpv hpv_n rv rv_n ev ev_n tv tv_n tav evv } { el eds dd ep0 ec0 rtm_n lb_n } }
				\\» "enter slv_file_lp" _ ⊢ sxe0 
				\\_emt sxe0 ⊢ _
				s8_of_s8_lst ep0 ⊢ sep0 
				$ ⟦ sep0 ⟧ ⊢ ep0 
				$ gel ⊢ 
				∐ _cns◂{ e gel } .
					$ e ⊢ 
					∐ ast.mdl_etr◂{ w e } .
						$ e ⊢ 
						∐ ast.mdl_def◂gel0 . 
							
							» "mdl_def" _ ⊢ sxe1 
							_emt sxe1 ⊢ sxe1 
							_emt w ⊢ w 
							^ dd,w ⊢ dd,w,ep1 
								0'*"\t" "§§ " 1' "\n" // 
							$ _cns◂{ ep1 ep0 } ⊢ ep0
							_inc dd ⊢ dd 
							$ mv_n ⊢ mv_n,mv_n_0 
							_inc mv_n ⊢ mv_n
					
							$ _cns◂{ { i ns_m ns_e ns_t } il } ⊢ il 
							$ _nil◂{} ⊢ ns_m 
							\\hsh_tbl.ini %[ 3r ] ⊢ ns_m 
							$ _nil◂{} ⊢ ns_e 
							$ _nil◂{} ⊢ ns_t 							
							iso_file { { ns_r rs_n } { mmv mev mtv mfv mv_n } { ns_m ns_e ns_t } { hpv hpv_n rv rv_n ev ev_n tv tv_n tav evv } { el eds dd ep0 ec0 rtm_n lb_n } } ⊢ { RTM_ST MV NS0 LCV EC }
							slv_file_lp { V lc_rt RTM_ST mv_n_0 il MV LCV tx_n NS0 gel0 gfl EC } ⊢ { V lc_rt RTM_ST mv_n_0 il MV LCV tx_n NS0 gfl EC }
							inv_file { RTM_ST MV NS0 LCV EC } ⊢ { {  ns_r rs_n } { mmv mev mtv mfv mv_n } { ns_m ns_e ns_t } { hpv hpv_n rv rv_n ev ev_n tv tv_n tav evv } { el eds dd ep0 ec0 rtm_n lb_n } }
							exc_q { mmv mv_n_0 ns_m } ⊢ { mmv mv_n_0 _ } 
							\\set_tv { mmv mv_n_0 ns_m } ⊢ { mmv mv_n_0 } 
							exc_q { mev mv_n_0 ns_e } ⊢ { mev mv_n_0 _ } 
							exc_q { mtv mv_n_0 ns_t } ⊢ { mtv mv_n_0 _ } 
							^ dd ⊢ dd,ep1 
								0'*"\t" "∎∎\n" // 
							$ _cns◂{ ep1 ep0 } ⊢ ep0
							_dec dd ⊢ dd 
							$ il ⊢ 
							∐ _cns◂{ { i ns_m ns_e ns_t } il } . 
								$ _cns◂{ { w _some◂mv_n_0 } ns_m } ⊢ ns_m
								\\hsh_tbl.s8.set { ns_m { w mv_n_0 } } ⊢ { ns_m { _ _ } }
								iso_file { {  ns_r rs_n } { mmv mev mtv mfv mv_n } { ns_m ns_e ns_t } { hpv hpv_n rv rv_n ev ev_n tv tv_n tav evv } { el eds dd ep0 ec0 rtm_n lb_n } } ⊢ { RTM_ST MV NS LCV EC }
								slv_file_lp { V lc_rt RTM_ST i il MV LCV tx_n NS gel gfl EC } ⊢|
							∐. _nil◂{} . 
								» "slv_file_lp 0" _ ⊢ se 
								_emt se ⊢ se 
								∎| 
						∐. ast.mdl_ln◂n0 .						
							$ n0 ⊢ n0,n0_0 
							ast.pnt_name n0_0 ⊢ sn0  							
							^ dd,w,sn0 ⊢ dd,w,sn0,ep1 
								0'*"\t" "§§ " 1' " = " 2' "\n" // 
							$ _cns◂{ ep1 ep0 } ⊢ ep0
							$ n0 ⊢ n0,n0_0 
							slv_ns_m { n0 mmv ns_m il } ⊢ { mmv ns_m il i_m } 
							$ _cns◂{ { w ‹ i_m › } ns_m } ⊢ ns_m 
							\\hsh_tbl.s8.set { ns_m { w i_m } } ⊢ { ns_m _ } 
							iso_file { {  ns_r rs_n } { mmv mev mtv mfv mv_n } { ns_m ns_e ns_t } { hpv hpv_n rv rv_n ev ev_n tv tv_n tav evv } { el eds dd ep0 ec0 rtm_n lb_n } } ⊢ { RTM_ST MV NS LCV EC }
							slv_file_lp { V lc_rt RTM_ST i il MV LCV tx_n NS gel gfl EC } ⊢|
					∐ ast.lc_etr◂{ w e } .
						\\_emt %[ "lc_etr" ] ⊢ _ 
						\\_emt w ⊢ w 
						$ e ⊢
						∐ ast.lc_def◂{ o_t d td if lc } .
							$ %[ 1r ] ⊢ lv 
							hsh_tbl.ini %[ 5r ] ⊢ ns_r_e 
							∐ o_t ⊢ _none◂{} . 
								slv_n.crt_mtc_ptn { { { mmv mev ev ns_m ns_e il } tv tv_n %[ 0r ] ns_r_e ⟦⟧ } d } ⊢ { { { mmv mev ev ns_m ns_e il } tv tv_n rv_n_e ns_r_e _ } d } 
								slv_n.r { { { mmv mev ev ns_m ns_e il } tv tv_n rv_n_e ns_r_e } lc } ⊢ { { { mmv mev ev ns_m ns_e il } tv tv_n rv_n_e _ } lc } 
								slv_V.r { V lc } ⊢ { V lc } 
								hsh_tbl.ini %[ 6r ] ⊢ rv_e  
								slv.crt_mtc_ptn { { lv ev rv_e tv tv_n } d } ⊢ { { lv ev rv_e tv tv_n } d y } 
								$ y ⊢ y,y0 
								rtr_dst_ptn { { mmv mev ev ns_m ns_e il } mtv tv_n tv ns_t y0 td } ⊢ { { mmv mev ev ns_m ns_e il } mtv tv_n tv ns_t } 
								$ lc ⊢ lc,lc0 
								slv.r { V lv ev rv_e tv tv_n lc } ⊢ { V lv ev _ tv tv_n lc yr } 
								_dec lv ⊢ lv 
								gen { tv_n tv lv y } ⊢ { tv_n tv lv y } 
								$ RP.atm◂imp◂{ y yr } ⊢ yx,yx0 
								T.pnt_type_k { tv yx0 } ⊢ { tv syx } 
								$ ev_n ⊢ ev_n,o_n
								$ yx ⊢ yx,yx0 
								T.newvar_ln { tv_n tv yx0 } ⊢ { tv_n tv iy0 } 
								^ dd,ev_n,w,syx ⊢ dd,ev_n,w,syx,ep1 
									0'*"\t" "§ " 2' "(" 1d' ") : " 3' "\n" // 
								_emt ep1 ⊢ ep1 
								$ _cns◂{ ep1 ep0 } ⊢ ep0 
								_mk_arr { %[ 0r ] ‹› } ⊢ { _ _ vv }
								ip.inl.r { { V evv vv rv_n_e } lc } ⊢ { { V evv _ rv_n_e } lc } 
								add_e { tv_n tv evv ev ev_n ns_e w ast.k_op_gnr◂{ _none◂{} o_n ‹› d rv_n_e if lc iy0 } yx } ⊢ { tv_n tv evv ev ev_n ns_e }
								iso_file { {  ns_r rs_n } { mmv mev mtv mfv mv_n } { ns_m ns_e ns_t } { hpv hpv_n rv rv_n ev ev_n tv tv_n tav evv } { el eds  dd ep0 ec0 rtm_n lb_n } } ⊢ { RTM_ST MV NS LCV EC }
								slv_file_lp { V lc_rt RTM_ST i il MV LCV tx_n NS gel gfl EC } ⊢|
							∐. o_t ⊢ _some◂p . 
								tpl_ptn { { %[ 0r ] _nil◂{} lv evv ev ev_n tv tv_n } p } ⊢ { { c_n wl lv evv ev ev_n tv tv_n } p y_c } 
								rev_apnd { wl ns_e } ⊢ ns_e 
								slv_n.crt_mtc_ptn { { { mmv mev ev ns_m ns_e il } tv tv_n %[ 0r ] ns_r_e ⟦⟧ } d } ⊢ { { { mmv mev ev ns_m ns_e il } tv tv_n rv_n_e ns_r_e _ } d } 
								slv_n.r { { { mmv mev ev ns_m ns_e il } tv tv_n rv_n_e ns_r_e } lc } ⊢ { { { mmv mev ev ns_m ns_e il } tv tv_n rv_n_e _ } lc } 
								slv_V.r { V lc } ⊢ { V lc } 
								hsh_tbl.ini %[ 6r ] ⊢ rv_e  
								slv.crt_mtc_ptn { { lv ev rv_e tv tv_n } d } ⊢ { { lv ev rv_e tv tv_n } d y } 
								$ y ⊢ y,y0 
								rtr_dst_ptn { { mmv mev ev ns_m ns_e il } mtv tv_n tv ns_t y0 td } ⊢ { { mmv mev ev ns_m ns_e il } mtv tv_n tv ns_t } 
								$ c_n ⊢ c_n,c_n0 
								pop_n { c_n ns_e } ⊢ { _ ns_e } 
								slv.r { V lv ev rv_e tv tv_n lc } ⊢ { V lv ev rv_e tv tv_n lc yr } 
								_dec lv ⊢ lv 
								gen { tv_n tv lv y } ⊢ { tv_n tv lv y } 
								gen { tv_n tv lv y_c } ⊢ { tv_n tv lv y_c } 
								$ RP.atm◂ct_imp◂{ y_c TX.t_imp◂{ y yr } } ⊢ yx,yx0 
								T.pnt_type_k { tv yx0 } ⊢ { tv syx } 
								$ ev_n ⊢ ev_n,o_n
								$ yx ⊢ yx,yx0 
								T.newvar_ln { tv_n tv yx0 } ⊢ { tv_n tv iy0 } 
								^ dd,ev_n,w,syx ⊢ dd,ev_n,w,syx,ep1 
									0'*"\t" "§ " 2' "(" 1d' ") : " 3' "\n" // 
								$ _cns◂{ ep1 ep0 } ⊢ ep0 
								add_e { tv_n tv evv ev ev_n ns_e w ast.k_op_gnr◂{ _some◂{ c_n0 p } o_n ‹› d rv_n_e if lc iy0 } yx } ⊢ { tv_n tv evv ev ev_n ns_e }
								iso_file { {  ns_r rs_n } { mmv mev mtv mfv mv_n } { ns_m ns_e ns_t } { hpv hpv_n rv rv_n ev ev_n tv tv_n tav evv } { el eds dd ep0 ec0 rtm_n lb_n } } ⊢ { RTM_ST MV NS LCV EC }
								slv_file_lp { V lc_rt RTM_ST i il MV LCV tx_n NS gel gfl EC } ⊢|	
						∐ ast.lc_grm◂{ g_o ge } . 
							∎| 
						∐ ast.lc_ln◂c . 
							» 1r _ ⊢ lv 
							slv_n.cst { { mmv mev ev ns_m ns_e il } c } ⊢ { { mmv mev ev ns_m ns_e il } c } 
							slv.cst { { lv ev tv_n tv } c } ⊢ { { lv ev tv_n tv } c yx } 
							_dec lv ⊢ lv 
							gen { tv_n tv lv yx } ⊢ { tv_n tv lv yx } 
							add_e { tv_n tv evv ev ev_n ns_e w c yx } ⊢ { tv_n tv evv ev ev_n ns_e } 
							iso_file { {  ns_r rs_n } { mmv mev mtv mfv mv_n } { ns_m ns_e ns_t } { hpv hpv_n rv rv_n ev ev_n tv tv_n tav evv } { el eds  dd ep0 ec0 rtm_n lb_n } } ⊢ { RTM_ST MV NS LCV EC }
							slv_file_lp { V lc_rt RTM_ST i il MV LCV tx_n NS gel gfl EC } ⊢|
						∐ ast.lc_ply◂{ x p } . 
							\\mk_arr { %[ 64r ] _none◂{} } ⊢ { _ _ rv_t } 
							hsh_tbl.ini %[ 4r ] ⊢ rv_t 
							hsh_tbl.ini %[ 4r ] ⊢ ns_r_t
							tpl_reg_ptn { { ns_r_t %[ 1r ] rv_t %[ 0r ] tv tv_n } x } ⊢ { { ns_r_t lv rv_t rv_t_n tv tv_n } x y }
							slv_n.csm_src_ptn { { { mmv mev ev ns_m ns_e il } tv tv_n ns_r_t } p } ⊢ { { { mmv mev ev ns_m ns_e il } tv tv_n ns_r_t } p }
							slv.csm_src_ptn { { lv ev rv_t tv tv_n } p } ⊢ { { lv ev _ tv tv_n } p yp } 
							_dec lv ⊢ lv 
							gen { tv_n tv lv y } ⊢ { tv_n tv lv y } 
							gen { tv_n tv lv yp } ⊢ { tv_n tv lv yp } 
							$ RP.atm◂imp◂{ y yp } ⊢ yi,yi0 
							T.newvar_ln { tv_n tv yi0 } ⊢ { tv_n tv v0 } 
							$ yi ⊢ yi,yi0 
							T.pnt_type_k { tv yi0 } ⊢ { tv syi } 
							^ dd,ev_n,w,syi ⊢ dd,ev_n,w,_,ep1 
								0'*"\t" "§ " 2' "(" 1d' ") : " 3' "\n" // 
							$ _cns◂{ ep1 ep0 } ⊢ ep0 
							add_e { tv_n tv evv ev ev_n ns_e w ast.k_ply◂{ x p v0 } yi } ⊢ { tv_n tv evv ev ev_n ns_e }
							iso_file { {  ns_r rs_n } { mmv mev mtv mfv mv_n } { ns_m ns_e ns_t } { hpv hpv_n rv rv_n ev ev_n tv tv_n tav evv } { el eds dd ep0 ec0 rtm_n lb_n } } ⊢ { RTM_ST MV NS LCV EC }
							slv_file_lp { V lc_rt RTM_ST i il MV LCV tx_n NS gel gfl EC } ⊢|	
						∐. ast.lc_grm◂{ o_g g } . 
							_emt %[ "lc_grm 0" ] ⊢ _ 
							∎| 
					
					∐ ast.lc_qlq_etr◂q . 
						\\_emt %[ "lc_qlq_etr E0" ] ⊢ _ 
						ip.grm.f_clq { %[ 0r ] %[ 0r ] q } ⊢ { _ _ q }
						gnr.slv_lc_clq.f { V { mtv mv_n ns_t i rtm_n } { mmv mev ev ns_m ns_e il } mfv tav evv rv tv tv_n ev_n rv_n q gfl { eds dd ep0 ec0 lb_n } } ⊢ { V { mtv mv_n ns_t i rtm_n } { mmv mev ev ns_m ns_e il } mfv tav evv rv tv tv_n ev_n rv_n gfl { eds dd ep0 ec0 lb_n } gl }
						iso_file { {  ns_r rs_n } { mmv mev mtv mfv mv_n } { ns_m ns_e ns_t } { hpv hpv_n rv rv_n ev ev_n tv tv_n tav evv } { el eds dd ep0 ec0 rtm_n lb_n } } ⊢ { RTM_ST MV NS LCV EC }
						slv_file_lp { V lc_rt RTM_ST i il MV LCV tx_n NS gel gfl EC } ⊢|
					∐ ast.dt_etr◂{ w e } .
						$ e ⊢ 
						∐ ast.dt_def◂{ as dl } .
							$ tx_n ⊢ tx_n,x,x0 
							_inc tx_n ⊢ tx_n
							$ w ⊢ w,w0 
							slv_args_def { mtv tv_n tv ns_t as x dl } ⊢ { mtv tv_n tv ns_t al k yx dl ql } 
							add_t { tv_n tv ns_t w k } ⊢ { tv_n tv ns_t }
							slv_dt_def { { mmv mev ns_m il } { tav evv } %[ 0r ] mtv al yx tv tv_n ns_t ev ev_n ns_e dl { dd ep0 ec0 } } ⊢ { { mmv mev ns_m il } { tav evv } an mtv al yx tv tv_n ns_t ev ev_n ns_e { dd ep0 ec0 } ac kl }
							set_tv { tav x0 { w0 ‹ { ac ql kl } › } } ⊢ { tav x } 
							iso_file { {  ns_r rs_n } { mmv mev mtv mfv mv_n } { ns_m ns_e ns_t } { hpv hpv_n rv rv_n ev ev_n tv tv_n tav evv } { el eds dd ep0 ec0 rtm_n lb_n } } ⊢ { RTM_ST MV NS LCV EC }
							slv_file_lp { V lc_rt RTM_ST i il MV LCV tx_n NS gel gfl EC } ⊢|
						∐. ast.dt_ln◂{ as y } . 
							$ _nil◂{} ⊢ al
							slv_args_ln { { { mmv mev ev ns_m ns_e il } mtv tv_n tv ns_t as al } y } ⊢ { { { mmv mev ev ns_m ns_e il } mtv tv_n tv ns_t al l2 } k } 
							$ k ⊢ k,k0 
							T.pnt_type_k { tv k0 } ⊢ { tv sk } 
							^ dd,w,tv_n,sk ⊢ dd,w,tv_n,sk,ep1 
								0'*"\t" "¶ " 1' "(" 2d' ") ~ " 3' // 
							$ _cns◂{ ep1 ep0 } ⊢ ep0 
							add_t { tv_n tv ns_t w k } ⊢ { tv_n tv ns_t } 
							iso_file { {  ns_r rs_n } { mmv mev mtv mfv mv_n } { ns_m ns_e ns_t } { hpv hpv_n rv rv_n ev ev_n tv tv_n tav evv } { el eds dd ep0 ec0 rtm_n lb_n } } ⊢ { RTM_ST MV NS LCV EC }
							slv_file_lp { V lc_rt RTM_ST i il MV LCV tx_n NS gel gfl EC } ⊢|
					∐ ast.dt_qlq_etr◂q .
						\\» "dt_clq_etr" _ ⊢ sec0 
						\\_emt sec0 ⊢ sec0
						slv_dt_clq.f { q { mmv mev ev ns_m ns_e il } tav evv ev_n tx_n mtv tv_n tv ns_t { dd ep0 ec0 } } ⊢ { { mmv mev ev ns_m ns_e il } tav evv ev_n tx_n mtv tv_n tv ns_t { dd ep0 ec0 } }
						iso_file { { ns_r rs_n } { mmv mev mtv mfv mv_n } { ns_m ns_e ns_t } { hpv hpv_n rv rv_n ev ev_n tv tv_n tav evv } { el eds dd ep0 ec0 rtm_n lb_n } } ⊢ { RTM_ST MV NS LCV EC }
						slv_file_lp { V lc_rt RTM_ST i il MV LCV tx_n NS gel gfl EC } ⊢|
					∐. ast.lc_cst◂lc . 
							\\_emt %[ "lc_cst 0" ] ⊢ _ 
							slv_n.r { { { mmv mev ev ns_m ns_e il } tv tv_n rv_n ns_r } lc } ⊢ { { { mmv mev ev ns_m ns_e il } tv tv_n rv_n ns_r } lc } 
							slv_V.r { V lc } ⊢ { V lc } 
							slv.r { V %[ 0r ] ev rv tv tv_n lc } ⊢ { V lv ev rv tv tv_n lc yr0 } 
							
							iso_file { {  ns_r rs_n } { mmv mev mtv mfv mv_n } { ns_m ns_e ns_t } { hpv hpv_n rv rv_n ev ev_n tv tv_n tav evv } { el eds dd ep0 ec0 rtm_n lb_n } } ⊢ { RTM_ST MV NS LCV EC }
							slv_file_lp { V ⟦ lc < lc_rt ⟧ RTM_ST i il MV LCV tx_n NS gel gfl EC } ⊢|
				∐. _nil◂{} . 
					iso_file { {  ns_r rs_n } { mmv mev mtv mfv mv_n } { ns_m ns_e ns_t } { hpv hpv_n rv rv_n ev ev_n tv tv_n tav evv } { el eds dd ep0 ec0 rtm_n lb_n } } ⊢ { RTM_ST MV NS LCV EC }
					∎ { V lc_rt RTM_ST i il MV LCV tx_n NS gfl EC }
		§ @.slv_op_axm { { tv_n tv evv ev ev_n ns_e } x }
			∐ x'=EX.N .
				∎ { { tv_n tv evv ev ev_n ns_e } x }
			∐ x'=18r . 
				$ %[ 0r ] ⊢ lv 
				newvar_q { tv_n tv lv } ⊢ { tv_n tv lv y0 }
				$ RP.atm◂imp◂{ RP.rcd◂_nil◂{} TX.lst◂y0 } ⊢ yx,yx0 
				k_ctr { tv_n tv %[ 1r ] %[ 2r ] yx0 } ⊢ { tv_n tv k } 
				add_e { tv_n tv evv ev ev_n ns_e %[ "_nil" ] k yx } ⊢ { tv_n tv evv ev ev_n ns_e } 
						
				newvar_q { tv_n tv lv } ⊢ { tv_n tv lv y0 }
				$ y0 ⊢ y0,y1 
				$ TX.lst◂y0 ⊢ y0,y2 
				$ RP.atm◂imp◂{ RP.cns2◂{ y1 y0 } %y2 } ⊢ yx,yx0 
				k_ctr { tv_n tv %[ 0r ] %[ 2r ] yx0 } ⊢ { tv_n tv k } 
				add_e { tv_n tv evv ev ev_n ns_e %[ "_cns" ] k yx } ⊢ { tv_n tv evv ev ev_n ns_e } 
					
				newvar_q { tv_n tv lv } ⊢ { tv_n tv lv y0 } 
				$ y0 ⊢ y0,y1 
				$ TX.t_imp◂{ y0 TX.opn◂y1 } ⊢ yx,yx0 
				k_ctr { tv_n tv %[ 0r ] %[ 2r ] yx0 } ⊢ { tv_n tv k } 
				add_e { tv_n tv evv ev ev_n ns_e %[ "_some" ] k yx } ⊢ { tv_n tv evv ev ev_n ns_e } 
				
				newvar_q { tv_n tv lv } ⊢ { tv_n tv lv y0 }
				$ TX.opn◂y0 ⊢ y0 
				$ RP.atm◂imp◂{ RP.rcd◂_nil◂{} %y0 } ⊢ yx,yx0
				k_ctr { tv_n tv %[ 1r ] %[ 2r ] yx0 } ⊢ { tv_n tv k } 
				add_e { tv_n tv evv ev ev_n ns_e %[ "_none" ] k yx } ⊢ { tv_n tv evv ev ev_n ns_e } 
					
				slv_op_axm { { tv_n tv evv ev ev_n ns_e } %[ 22r ] } ⊢|
			∐. . 
				$ x ⊢ x,x0 
				EX.slv { { tv tv_n } x0 } ⊢ { { tv tv_n } y } 
				$ x ⊢ x,x0 
				EX.slv_name x0 ⊢ w  
				$ x ⊢ x,x0 
				_inc x ⊢ x 
				add_e { tv_n tv evv ev ev_n ns_e w ast.k_op_axm◂{ x0 ⟦⟧ } y } ⊢ { tv_n tv evv ev ev_n ns_e } 
				slv_op_axm { { tv_n tv evv ev ev_n ns_e } x } ⊢| 
		§ slv_file gel
				_cli {} ⊢ V 
				$ %[ TX.N0 ] ⊢ tx_n 
				$ _nil◂{} ⊢ ns_m 
				\\hsh_tbl.ini %[ 3r ] ⊢ ns_m  
				$ _nil◂{} ⊢ ns_t 
				$ _nil◂{} ⊢ ns_e 
				$ %[ 3200r ] ⊢ max 
				mk_nil_arr max ⊢ { max mmv }
				mk_nil_arr max ⊢ { max mev }
				mk_nil_arr max ⊢ { max mtv }				
				mk_nil_arr %[ 162807r ] ⊢ { _ mfv } 
				hsh_tbl.ini %[ 6r ] ⊢ rv  
				ini_tv_n %[ 160008r ] ⊢ { _ ev } 
				ini_tv_n %[ 160009r ] ⊢ { _ evv } 
				ini_tv_n %[ 320002r ] ⊢ { _ tv } 
				ini_tv_n %[ 80000r ] ⊢ { _ tav }
				ini_tv_n %[ 80001r ] ⊢ { _ hpv }
				» 0r _ ⊢ hpv_n  
				» 1r _ ⊢ mv_n
				» 0r _ ⊢ rv_n
				» 0r _ ⊢ ev_n
				» 0r _ ⊢ tv_n
				» 0r _ ⊢ i 
				» 0r _ ⊢ lv 

				
				add_t { tv_n tv ns_t %[ "_r64" ] TX.r64◂{} } ⊢ { tv_n tv ns_t }
				set_tv { tav %[ TX.id.r64 ] { %[ "_r64" ] _none◂{} } } ⊢ { tav _ }

				add_t { tv_n tv ns_t %[ "_s8" ] TX.s8◂{} } ⊢ { tv_n tv ns_t }
				set_tv { tav %[ TX.id.s8 ] { %[ "_s8" ] _none◂{} } } ⊢ { tav _ }

				lst_v { tv_n tv } ⊢ { tv_n tv y0 }  
				add_t { tv_n tv ns_t %[ "_lst" ] y0 } ⊢ { tv_n tv ns_t }
				$ tv_n ⊢ tv_n,ia0 
				newvar_q { tv_n tv %[ 0r ] } ⊢ { tv_n tv _ v } 
				
				$ v ⊢ v,v0 
				set_tv { tav %[ TX.id.lst ] { %[ "_lst" ] ‹ { %[ 2r ] ⟦ ia0 ⟧ ⟦ RP.cns2◂{ v0 TX.lst◂v } TX.unt◂{} ⟧ } › } } ⊢ { tav _ }

				opn_v { tv_n tv } ⊢ { tv_n tv y0 }  
				add_t { tv_n tv ns_t %[ "_opn" ] y0 } ⊢ { tv_n tv ns_t }
				$ tv_n ⊢ tv_n,ia0 
				newvar_q { tv_n tv %[ 0r ] } ⊢ { tv_n tv _ v } 				
				set_tv { tav %[ TX.id.opn ] { %[ "_opn" ] _some◂{ %[ 2r ] ⟦ ia0 ⟧ ⟦ v TX.unt◂{} ⟧ } } } ⊢ { tav _ }
				
				arr_v { tv_n tv } ⊢ { tv_n tv y0 }  
				$ %[ "_arr" ] ⊢ t0,t00 
				add_t { tv_n tv ns_t t0 y0 } ⊢ { tv_n tv ns_t }
				set_tv { tav %[ TX.id.arr ] { t00 ‹› } } ⊢ { tav _ }

				Clr_v { tv_n tv } ⊢ { tv_n tv y0 }  
				$ %[ "_Clr" ] ⊢ t0,t00 
				add_t { tv_n tv ns_t t0 y0 } ⊢ { tv_n tv ns_t }
				set_tv { tav %[ TX.id.Clr ] { t00 ‹› } } ⊢ { tav _ }

				pt_v { tv_n tv } ⊢ { tv_n tv y0 }  
				$ %[ "_pt" ] ⊢ t0,t00 
				add_t { tv_n tv ns_t t0 y0 } ⊢ { tv_n tv ns_t }
				set_tv { tav %[ TX.id.pt ] { t00 ‹› } } ⊢ { tav _ }

				$ _nil◂{} ⊢ il 
				slv_op_axm { { tv_n tv evv ev ev_n ns_e } %[ 0r ] } ⊢ { { tv_n tv evv ev ev_n ns_e } x }

				$ _nil◂{} ⊢ ep
				$ rp8.e◂{} ⊢ ec 
				» 0r _ ⊢ dd 
				» 0r _ ⊢ rtm_n 

				^ _ ⊢ eds 
					`section .data
					`%include "DATA.s"

					`					
					//
				$ rp8.of_s8◂eds ⊢ eds 
				$ rp8.e◂{} ⊢ ue 
				unt_N { ue %[ 13r ] %[ 1r ] } ⊢ { ue _ }  
				rp8.to_s8 ue ⊢ ue 
				^ ue ⊢ _,sc1 
					`section .text
					0'
					`
					`global _start
					`	 
					`_start:
					`; set signal handler 
					`	mov rdi,SIG_SEGV 
					`	mov rsi,sig_hdl 
					`	C_CALL set_handler 
					`
					`; init emt buffer 
					`	mov rdi,PAGE_SIZE
					`	C_CALL alc_gd_buf
					`	mov QWORD [GD_BUF_PT],rax
					`	mov QWORD [GD_BUF_IT],rax
					`	mov rax,0 
					`	mov rdi,fmt_d 
					`	mov rsi,QWORD [PAGE_SIZE]
					`	C_CALL printf
					\[
					`	mov r14,QWORD [GD_BUF_PT]
					`	mov r13,0 
					`	mov QWORD [SIG_ETR],test_hdl 
					`	mov QWORD [SIG_FLG],1
					`test_lp: 
					`	mov BYTE [r14+r13],44	
					`	mov rax,0 
					`	mov rdi,fmt_d_nl
					`	mov rsi,r13
					`	C_CALL printf
					`	add r13,1 
					`	jmp test_lp
					`test_hdl:
					`	mov r13,0 
					`	mov rdi,fmt_test0 
					`	call emt_stg 
					`	xor rax,rax 
					`	C_CALL_SF getchar 
					`	jmp test_lp 
					`  
					`SS_LN_init:
					`	mov SS_LN_N,0
					`	mov QWORD [SS_LN_TOP],SS_LN_VCT
					`	mov r15,SS_LN_VCT 
					`	mov rdi,0 
					`	mov rax,SS_LN_VCT 
					`SS_LN_lp: 
					`	cmp rdi,SS_LN_MAX 
					`	jz SS_LN_end 
					`	add rdi,1 
					`	lea rsi,[rax+8*2] 
					`	mov QWORD [rax],rsi 
					`	mov rax,rsi 
					`	jmp SS_LN_lp 
					`SS_LN_end:
					`	mov rsi,0xffff_ffff_ffff_0100 
					`	mov [rax],rsi
					\]
					`
					`	mov rdi,0
					`	mov QWORD [EMT_BUF],0
					`	mov QWORD [EMT_BUF_OFS],0
					`
					`; _args 
					`	mov rdi,QWORD [rsp]
					` lea rdi,[rdi+1]
					`	mov rsi,8 
					`	xor rax,rax 
					`	C_CALL calloc
					`	pop r13
					`	mov QWORD [rax],r13
					`	xor r14,r14
					`	mov rbx,rax
					`args_lp:
					`	cmp r14,r13
					`	jz args_lp_end
					`	pop rdi
					`	call s8_of_c_stg 
					`	mov QWORD [rbx+8+8*r14],rax
					`	add r14,1 
					`	jmp args_lp 
					`args_lp_end:
					`	mov GLX(127),rbx
					` ; exn_root 
					`	push exn_dft 
					`	push exn_dft	
					//
				rp8.add_s8 { ec sc1 } ⊢ ec
				$ %[ 1r ] ⊢ ssn0 
				» "SS_MAX" _ ⊢ rmx 
				» RCD_N _ ⊢ ssN 
				ss_init_rcd_lp { ssn0 rmx ssN ec } ⊢ { rmx ssN ec } 
	
				» "\tjmp RTM_0\n" _ ⊢ sc1 
				rp8.add_s8 { ec sc1 } ⊢ ec 
				» 0r _ ⊢ lb_n 
				
				hsh_tbl.ini %[ 6r ] ⊢ gf0 
				hsh_tbl.ini %[ 6r ] ⊢ gf1 
				hsh_tbl.ini %[ 6r ] ⊢ gf2 
				$ iso◂{ gf0 gf1 gf2 } ⊢ gfl
				hsh_tbl.ini %[ 5r ] ⊢ ns_r 

				$ ⟦ ast.re_reg◂%[ "_args" ] ⟧ ⊢ rs_n
				$ ⟦ TX.arr◂TX.s8◂{} ⟧ ⊢ rs_t 
				
				slv_n.crt_mtc_lst { { { mmv mev ev ns_m ns_e il } tv tv_n rv_n ns_r ⟦⟧ } rs_n } ⊢ { { { mmv mev ev ns_m ns_e il } tv tv_n rv_n ns_r _ } rs_n }
				slv.crt_mtc_lst { { %[ 1r ] ev rv tv tv_n } rs_n } ⊢ { { _ ev rv tv tv_n } rs_n rs_t0 }
				T.unify.f_lst { tv rs_t0 rs_t } ⊢ tv 
						
				
				$ iso◂{ ns_r rs_n } ⊢ RTM_ST 
				$ iso◂{ mmv mev mtv mfv mv_n } ⊢ MV 
				$ iso◂{ ns_m ns_e ns_t } ⊢ NS
				$ iso◂{ hpv hpv_n rv rv_n ev ev_n tv tv_n tav evv } ⊢ LCV 
				$ iso◂{ log.ini◂{} eds dd ep ec rtm_n lb_n } ⊢ EC
				slv_file_lp { V ⟦⟧ RTM_ST i il MV LCV tx_n NS gel gfl EC } ⊢| 
		§ @.gnr_rtm { V rfv { rtm_n glv_n ei_n gfl mfv lb_n { ev_n ev evv }  { rv irv } tav tv_n tv { eds ec0 } } l } 
			$ l ⊢ 
			∐ _cns◂{ lc l } . 
				_emt %[ "gnr_rtm D0" ] ⊢ _ 
				$ rtm_n ⊢ rtm_n,n0 
				_inc rtm_n ⊢ rtm_n 
				$ rp8.e◂{} ⊢ eg1 
				$ rp8.e◂{} ⊢ er0 
				^ rtm_n ⊢ rtm_n,ret0 
					"\tjmp RTM_" 0d' "\n" // 
				^ n0 ⊢ n0,ec1 
					"RTM_" 0d' ":\n" //
				_emt %[ "gnr_rtm D1" ] ⊢ _ 
				rp8.add_s8 { er0 ec1 } ⊢ er0 
				$ f_rtm◂ret0 ⊢ ft 
				gnr.lc_code.f { V { %[ 0r ] ‹› rfv } { gfl _nil◂{} mfv } glv_n ei_n lb_n { ev_n ev evv }  { rv irv } tav tv_n tv lc { eg1 eds er0 rp8.e◂{} } ft } ⊢ { V { _ _ rfv } { gfl cl mfv } glv_n ei_n lb_n { ev_n ev evv }  { rv irv } tav tv_n tv { eg1 eds er0 ew0 } ft } 
				_emt %[ "gnr_rtm D2" ] ⊢ _ 
				rp8.cct { er0 ew0 } ⊢ er0  
				rp8.cct { ec0 eg1 } ⊢ ec0 
				rp8.cct { ec0 er0 } ⊢ ec0 
				gnr_rtm { V rfv { rtm_n glv_n ei_n gfl mfv lb_n { ev_n ev evv }  { rv irv } tav tv_n tv { eds ec0 } } l } ⊢| 
			∐. _nil◂{} . 
				∎ { V rfv rtm_n glv_n ei_n gfl mfv lb_n { ev_n ev evv }  { rv irv } tav tv_n tv { eds ec0 } }
		§ emt_rtm a0 
			slv_file a0 ⊢ { V lc_rt RTM_ST i il MV LCV tx_n _ gfl EC }
			_emt %[ "emt_rtm D0" ] ⊢ _
			
			inv RTM_ST ⊢ { _ rs_n } 
			inv MV ⊢ { _ _ _ mfv _ } 
			_emt %[ "emt_rtm D1" ] ⊢ _
			inv LCV ⊢ { hpv hpv_n rv rv_n ev ev_n tv tv_n tav evv }
			inv EC ⊢ { _ eds dd ep0 ec0 rtm_n lb_n }
			_emt %[ "emt_rtm D2" ] ⊢ _
			lst.rev lc_rt ⊢ lc_rt 
			_emt %[ "emt_rtm D2.1" ] ⊢ _
			$ %[ 128r ] ⊢ glv_n 
			_emt %[ "emt_rtm D3" ] ⊢ _
			s8_of_s8_lst ep0 ⊢ sep0 
			_emt_s8_to { %[ "SGN_SH.txt" ] sep0 } ⊢ { _ _ }
			\\_emt sep0 ⊢ _ 
			hsh_tbl.ini %[ 10r ] ⊢ rfv
			hsh_tbl.ini %[ 6r ] ⊢ irv
			$ ast.hp◂{ %[ 127r ] ast.hp.arr◂TX.s8◂{} } ⊢ ax0 
			$ _cns◂{ RP.atm◂%ax0 _nil◂{} } ⊢ rs_i 
			gnr.idx.crt_lst { irv rs_n rs_i ⟦⟧ } ⊢ { irv dl } 
			gnr_rtm { V rfv { rtm_n glv_n %[ 0r ] gfl mfv lb_n { ev_n ev evv }  { rv irv } tav tv_n tv { eds ec0 } } lc_rt } ⊢ { V rfv rtm_n glv_n ei_n gfl mfv lb_n { ev_n ev evv }  { rv irv } tav tv_n tv { eds ec0 } }
			_emt %[ "emt_rtm D4" ] ⊢ _ 
			\\[

			» RCD_N _ ⊢ ssN 
			^ ssN,glv_n ⊢ ssN,glv_n,eh 
				`%include "HD.s"  
				`;	v.0
				"%define RCD_N " 0d' "\n"
				"%define GLV_N " 1d' "\n" 
				`%define SS_NULL 0xffff_ffff_ffff_0000
				`%define EMT_BUF_MAX (KB<<1)				
				` 
				`section .bss
				`%include "BSS.s"
				`
				//
			$ rp8.of_s8◂eh ⊢ eh 
			
			» 1r _ ⊢ rnx 
			» "SS_MAX" _ ⊢ rmx 
			ss_rcd_n_lp { rnx ssN rmx eh } ⊢ { ssN rmx eh }
			
			rp8.cct { eh eds } ⊢ eds 
			rp8.cct { eds ec0 } ⊢ ec0
			^ rtm_n ⊢ rtm_n,ec1 
				"RTM_" 0d' ":\n" 	
				`	C_CALL exit
				`
				`%include "TEXT.s"
				//
			rp8.add_s8 { ec0 ec1 } ⊢ ec0 
			∎ { i il { hpv hpv_n } { rv rv_n ev ev_n tv tv_n } irv tav evv tx_n { dd ec0 rtm_n lb_n } }		
		\\]
		\\∎| 
		∎∎
∎∎
§ @.cat_to { o l } 
	$ l ⊢ 
	∐ _cns◂{ i l } . 
		^ i,o ⊢ i,o,s 
			"cat " 0' "  >> " 1' "\n" // 
		_cd s ⊢ _ 
		cat_to { o l } ⊢| 
	∐. _nil◂{} . 
		∎ o 

§ @.L0 { a l i } 
	∐ l'=i' . 
		∎ { a l } 
	∐. . 
		_lod_q { a i } ⊢ { a i fn } 
		^ fn ⊢ _,xc0 
			"cat " 0' " >> SH.mdls\n" // 
		_cd xc0 ⊢ _ 
		_inc i ⊢ i 
		L0 { a l i } ⊢| 
§ E fn0
	_in_fn fn0 ⊢ { _ sf1 } 
	##_emt sf1 ⊢ sf1 
	_emt %[ "E D0" ] ⊢ _ 
	_prs◂◂OpADL.syntax.file { sf1 %[ 0r ] } ⊢ { _ r0 a0 } 
	\\OpADL.syntax.file.prs { sf1 %[ 0r ] } ⊢ { _ r0 a0 } 
	_emt r0 ⊢ _ 
	##_emt a0 ⊢ a0  
	$ a0 ⊢ 
	∐ _some◂a0 . 
		$ a0 ⊢ 
		∐ OpADL.syntax.prs_vld◂a0 . 
			_emt %[ "opxcc:prs_vld" ] ⊢ _ 
			OpADL.ns.emt_rtm a0 ⊢ { i il { hpv hpv_n } { rv rv_n ev ev_n tv tv_n } irv tav evv tx_n { dd ec0 rtm_n lb_n } }		
			_emt %[ "start_sh D2" ] ⊢ _ 
			rp8.to_s8 ec0 ⊢ sec0
			_emt_s8_to { %[ "SH.mdls.s" ] sec0 } ⊢ _
			
			» _^ _ ⊢ sx0 
				`yasm -g dwarf2 -f elf64 SH.mdls.s -o out.o
    		`gcc -Wall stub.c out.o -nostartfiles -no-pie -pg -g -O0 -o out.exe 
				// 
			_cd sx0 ⊢ sx0  
			\\_info {} ⊢ {} 
			∎ {} 
		∐. OpADL.syntax.prs_err◂e0 .
			OpADL.syntax.pnt_prs_err e0 ⊢ es0 
			_emt es0 ⊢ _  
			∎|
	∐. _none◂{} . 
		∎| 

§% 
	_emt _args ⊢ args
	\\_lod_q { args %[ 1r ] } ⊢ { _ _ fn0 } 
	\\_arr_len args ⊢ { args l } 
	\\_cd %[ "rm -f SH.mdls\n" ] ⊢ _ 
	\\L0 { args l %[ 1r ] } ⊢ _
	\\E %[ "SH.mdls" ] ⊢ _
	_lod_q { args %[ 1r ] }  ⊢ { _ _ f0 }
	_emt %[ "E 0" ] ⊢ _ 
	E f0 ⊢ _ 
	\\_info {} ⊢ {}
	
	∎ 
