¶ t
  ∐ t : {}
§ A {} 
	∎ {} 
-- rank-1
§§ _TX 
  § r64 = 0r 
	§ arr = 2r  
	--§ Clr = 3r 
	--§ pt = 4r 
	§ prd = 5r 
	§ grm = 6r 
	§ pf = 7r 
	--§ Clr_lc = 8r 
  --§ arr_lc = 9r 
	§ r8 = 10r 
	§ arr_x = 11r 
	§ ctr = 12r 
	§ mtc = 13r 
	§ mop = 14r 
	§ tj = 15r 
	§ st = 16r 
	§ ila = 17r
	§ dmy = 18r
	§ hp = 19r 
  § r2 = 20r 
  § rcd = 21r 
  § unt = 22r 
  § adt = 23r 
  § mt = 24r 
	§ rev = 30r 
	§ irv = 31r 
  ∎∎ 

-- prm 
¶ _r64 = _[ 0r ]
¶ _r8 = _[ 10r ] 
¶ _arr0 = _[ 2r ] 
--¶ _arr_t◂t'◂k' = _arr0◂t'◂k'
¶ _arr_x_t = _[ 11r ]
¶ _ref_t = _[ 35r ] 
¶ _nr = _[ 34r ] 
¶ _arr_x = _arr0◂_arr_x_t 
¶ _arr = _arr0◂{} 
¶ _arr_ref = _arr0◂_ref_t 
¶ _arr_nr = _arr0◂_nr 
¶ _s8 = _arr◂_r8 
¶ _s8_nr = _arr_nr◂_r8
¶ _st = _[ 16r ] 
¶ _dmy = _[ 18r ]
¶ _hp = _[ 19r ]
¶ _rcd = _[ 21r ]
¶ _prd = _[ 5r ]
¶ _ctr = _[ 12r ]
¶ _rev = _[ 30r ] 
¶ _irv = _[ 31r ]
¶ _ctr_rev = _ctr◂_rev
¶ _ctr_irv = _ctr◂_irv
¶ _cns h',t' = _rcd◂(_prd◂h'◂t')
-- adt 
¶ _lst = _[ 0x0001000000000000r ]
¶ _opn = _[ 0x0001000000000001r ]

¶ _id k' = k'→k' 
¶ _rpc k' = k'→{ k' k' }
¶ _dlt k' = k' → {}

-- const 
§ C_PUSH_REGS = "\tpush rdx\n\tpush rcx\n\tpush r8\n\tpush r9\n\tpush r10\n\tpush r11\n"

§ C_POP_REGS =^=
	`	pop r11 
	`	pop r10 
	`	pop r9 
	`	pop r8 
	`	pop rcx 
	`	pop rdx
	// 
§ C_CALL◂◂S =^=
	`	push rbx
	`	mov rbx,rsp 
	`	and rsp,~0xf 
	"\tcall " S "\n" 
	`	mov rsp,rbx 
	`	pop rbx
	//
§ C_CALL_SF◂◂S =^=
	C_PUSH_REGS 
	`	push rbx
	`	mov rbx,rsp 
	`	and rsp,~0xf 
	"\tcall " S "\n" 
	`	mov rsp,rbx 
	`	pop rbx
	C_POP_REGS
	//

  -- combinator 
§ _ftr = \\k3 . \\k2 . \\k1 . k3◂◂(k2◂◂k1)

§ _cst◂◂C # {} 
  ∎ %[ C ]
-- id 
§§ _id 
  §: eq_t a' = { a' a' }
  §: r64 = _r64
  §: s8 = _s8  
  §: arr0 t',k' = _arr0◂t'◂k' 
  §: arr k' = _arr◂k'
  §: arr_x k' = _arr_x◂k'
  §: st_s8 = _st◂_s8
  §: hp k' = _hp◂k' 
  §§ hp 
    §: s8 = _hp◂_s8 
   ∎∎ 
  §§ arr 
    §: s8 = _arr◂_s8 
    ∎∎
  ∎∎
	
§: _eq_hp k' = { k' _hp◂k' }
-- rank-0
<<<<<<< HEAD
§ _rpc = _[ 28r ]
§ _dlt_adt = _[ 29r ]
§ _app = _[ 8r ] 
§ _prs = _[ 0x00010024r ] 
§ _id = _[ 0r ] 
=======
--§ _mk_arr = _[ 0r ] 
--§ _emt = _[ 1r ] 
--§ _ila2 = _[ 2r ]
--§ _rpc = _[ 3r ] 
§ _app = _[ 4r ] 
§ _prs = _[ 5r ] 
§ _id = _[ 6r ] 
--§ _dlt = _[ 7r ] 
§ _cst = _[ 8r ] 
§ _psc = _[ 9r ] 
§ _synt = _[ 10r ] 
§ _line = _[ 11r ] 
§ _grm = _[ 12r ] 
§ _grm_ftr = _[ 13r ] 
§ _ftr = _[ 14r ] 
§ _inl = _[ 15r ] 
§ _tj = _[ 16r ] 
§ _clp = _[ 17r ] 
§ _cln = _[ 18r ] 
§ _cls = _[ 19r ] 
§ _cld = _[ 20r ] 
§ _pf = _[ 21r ] 
§ _pf_x = _[ 22r ] 
§ _clc_i = _[ 23r ] 
§ _clc_o = _[ 24r ] 
§ _clc_d = _[ 25r ] 
§ _seq = _[ 26r ] 
§ _alc_i = _[ 27r ] 
§ _alc_o = _[ 28r ] 
--§ _mk_arr_x = _[ 29r ]
§ _push = _[ 30r ] 
§ _pop = _[ 31r ]  
§ _id_par = _[ 32r ]  
§ _ctr = _[ 33r ]
§ _oom = _[ 34r ]
§ _moo = _[ 35r ]
§ _mcp = _[ 36r ]
§ _mcn = _[ 37r ]
§ _mop = _[ 38r ] 
§ _mt_e = _[ 39r ] 
§ _mt_ne = _[ 40r ]
§ _mt_le = _[ 41r ]
§ _exn = _[ 42r ]
§ _tj = _[ 43r ]
§ _tjn = _[ 44r ]
§ _tjc = _[ 45r ]
§ _sqc = _[ 46r ]
§ _st = _[ 47r ]
§ _ccs = _[ 48r ]
--§ _mk_stk = _[ 49r ] 
>>>>>>> e99538e0eafc51efb79e811cb3fb8eaca8f20be8

§ _grm = _[ 0x00010025r ] 
§ _inl = _[ 0x00010026r ] 
§ _pf = _[ 2r ] 
§ _pf_x = _[ 3r ] 
§ _seq = _[ 0x00010023r ] 
§ _id_par = _[ 9r ]  
§ _ctr = _[ 5r ] 
§ _oom = _[ 0x00010000r ]
§ _moo = _[ 0x00010001r ]
§ _mcp = _[ 0x00010002r ]
§ _mcn = _[ 0x00010003r ]
§ _mop = _[ 0x00010004r ] 
§ _exn = _[ 4r ]
§ _tj = _[ 0x10008r ]
§ _tjn = _[ 0x10009r ]
§ _tjc = _[ 0x1000ar ]
§ _st = _[ 19r ]
§ _ccs = _[ 0x0001000br ]
§ _ctr_rev = _[ 25r ] 
-- ctr 
§ _nil = _[ 0x0001000000000000r ]
§ _cns = _[ 0x0001000000000001r ]
§ _some = _[ 0x0001000000000002r ]
§ _none = _[ 0x0001000000000003r ]
-- ap
§§ _ap 
  § emt = _[ 0x0002000000000000r ]
  § emt_mo = _[ 0x0002000000000001r ]
  § dlt = _[ 0x0002000000000002r ]
  § rpc = _[ 0x0002000000000004r ]
  § emt_adt = _[ 0x0002000000000006r ]
  ∎∎
§ _dlt = _ap.dlt
§ _emt0 = _ap.emt
§§ _ila 
  § f = _[ 6r ] 
  § O = _[ 0x0001000cr ] 
  § S = _[ 0x0001000dr ]
  § C = _[ 0x0001000er ]
  ∎∎
§ _ct = _[ 0x0001000fr ]
§§ _mt
  §§ e 
   § f = _[ 0x0002000000000009r ]
    § r64 = _[ 0x00010016r ]
    § s8 = _[ 0x00010018r ]
    ¶§ f = r64 
    ¶§ f = s8 
    ∎∎
  §§ ne 
    § f = _[ 0x000200000000000ar ]
    § r64 = _[ 0x00010019r ]
    § s8 = _[ 0x0001001br ]
    ¶§ f = r64 
    ¶§ f = s8 
    ∎∎
  §§ le 
    § f = _[ 0x000200000000000br ]
    § r64 = _[ 0x0001001cr ]
    § s8 = _[ 0x0001001dr ]
    ¶§ f = r64 
    ¶§ f = s8
    ∎∎
  ∎∎
§§ _ct 
<<<<<<< HEAD
  ¶ id k' = k' →→ k' 
  § id = \\X . X 
  § pf_d = _[ 0x00010010r ] 
  § pf_x = _[ 0x00010011r ] 
  § if = _[ 0x00010012r ]
  § eq = _[ 0x00010013r ]
	§ if◂◂{ t a b } = if◂◂{ t b a }
  § if_eq◂◂{ { C X } a b } = if◂◂{ eq◂◂{ C X } a b }
  § op = _[ 0x00010014r ] 
	
  § tj = _[ 0x0001002br ] 
  §§ _arr
		§ len = _[ 0x0001002br ] 
		∎∎
	§§ op1 
    § bsr◂◂X = (op◂◂3r)◂◂{ X 0r }
    § flo2◂◂X = (op◂◂4r)◂◂{ X 0r }
    ∎∎
  §§ op2 
    § add = op◂◂0r 
    § sub = op◂◂1r 
    § bts = op◂◂2r
    § imul = op◂◂5r 
    § shl = op◂◂6r 
    § shr = op◂◂7r
    ∎∎ 
  § cnc_siz = _[ 0x00010020r ]
  § hp = _[ 0x00010021r ]
=======
  § pf_d = _[ 55r ] 
  § pf_x = _[ 56r ] 
  § if = _[ 71r ]
  § eq = _[ 72r ]
  § if_eq◂◂{ { C X } a b } = if◂◂{ eq◂◂{ C X } a b }
>>>>>>> e99538e0eafc51efb79e811cb3fb8eaca8f20be8
  ∎∎
§§ _p 
  ¶ t k'   
    ∐ t : k'
  ∎∎
	
§§ _hp 
  § of0 = _[ 10r ]
  § to0 = _[ 11r ] 
  § ini = _[ 12r ] 
  § dlt = _[ 18r ]
  § ct_ini = '[ _[] : t' . _hp◂t' ]
  § ini_ct = '[ (\\C . ini) : c' . c'→→({}→_hp◂c') ]
  ¶¶ of k' : k' → { _r64 _hp◂k' }
  ¶§ of = of0 
  ¶¶ to k' : { _r64 _hp◂k' } → k' 
  ¶§ to = to0 
  § rpc # a 
    of a ⊢ { r h } 
    $ r ⊢ r,r0 
    to { r h } ⊢ a 
    ∎ { a r0 }
  §: mk k' = { k' _hp◂k' } 
  § mk # q 
    ini {} ⊢ h 
    mk { q h } ⊢|
	∎∎ 
<<<<<<< HEAD
§ _prd = _[ 13r ]
§ _ipr = _[ 14r ]
§ _dlt_r64 = _[ 15r ] 
§ _cnc_lod_ctr = _[ 16r ] 
§ _cnc_sto_ctr = _[ 17r ] 
§ _cnc_lod = _cnc_lod_ctr◂◂(\a . { a {} }) 
§ _cnc_sto = _cnc_sto_ctr◂◂(\a . { a {} }) 
§ _cnc_rpc = _[ 30r ]
§ _cnc_rpc # r 
	$ r ⊢ r,rt 
	_cnc_rpc rt ⊢ q 
	∎ { r q }
-- non-atomic
§§ _swp 
	§ L = \x . x  
	§ R = \{ L R } . { R L }
	§ f◂◂O = _ctr◂◂(_ct.if_eq◂◂{ { O 0r } L R })
	∎∎	 
§ _cnc_siz0◂◂{ F H } # { h a }
  _hp.ini_ct◂◂H {} ⊢ hH 
  $.[ t' . { _hp◂(_hp◂t') _hp◂t' } ] { hH h } ⊢ { hH h }
  F◂◂(_ct.cnc_siz◂◂H) a ⊢|
§ _cnc_lod_hp # { r h }  
  _cnc_lod r ⊢ { r k }  
  _eq_hp { k h } ⊢ { k h }
  ∎ { r h k }
§ _cnc_rpc_hp # { r h }
	_cnc_rpc r ⊢ { r k }
	_eq_hp { k h } ⊢ { k h }
  ∎ { r h k }
§ _cnc_siz◂◂F = _cnc_siz0◂◂{ F _ct.hp }

=======
§ _id_T = _[ 60r ] 
§ _prd = _[ 61r ]
§ _ipr = _[ 62r ]
§ _dlt_r64 = _[ 63r ] 
§ _cnc_lod = _[ 64r ] 
§ _cnc_sto = _[ 65r ] 
§ _cnc_siz = _[ 66r ]
--§ _rmv = _[ 73r ]
-- non-atomic 
§ A0 L 
   $ L ⊢ { r0 r1 } 
   _ila.f◂◂{ _ila.S◂◂_ila.O _ila.O "" } { r0 } ⊢|
   --_ila.f◂◂{ _ila.S◂◂(_ila.S◂◂_ila.O) _ila.O "" } { r0 r1 } ⊢|
§ f { r0 r1 }
  --!^ r0,r1 ⊢ {} 
   -- // 
  ∎ {}

§ c0◂{ t {} } = t 
§ c1◂{ x y } = { y x }
§ _par_id◂◂F = _seq◂◂{ _ctr◂◂c1 _seq◂◂{ _id_par◂◂F _ctr◂◂c1 } }
§ _par◂◂{ F G } = _seq◂◂{ _id_par◂◂G _par_id◂◂F }
§ _emt_s8_to_im◂◂F # s 
  _id.s8 s ⊢ s 
  _st◂◂F {} ⊢ f 
  _hp.of f ⊢ { r0 _ }
  _hp.rpc s ⊢ { s r1 } 
  !^ r0,r1 ⊢ {}
    ` mov rdx,QWORD [rdi]
    ` lea rsi,[rdi+8]
    ` mov rdi,rax
    ` C_CALL_SF emt_s8_to 
    ` cmp rax,-1 
    ` jz err 
    //
  ∎ s
>>>>>>> e99538e0eafc51efb79e811cb3fb8eaca8f20be8
§ op_im◂◂{ O X } # %r 
  !^ %r ⊢ %r 
    "\tmov rdi,0x" (_ct.pf_x◂◂X) "\n" 
    "\t" O " rax,rdi\n" //
   ∎ %r
§ _imul_im◂◂X = op_im◂◂{ "imul" X }
§ _add_im◂◂X = op_im◂◂{ "add" X } 
§ _sub_im◂◂X = op_im◂◂{ "sub" X }
§ _and_im◂◂X = op_im◂◂{ "and" X } 
§ _shr_im◂◂X # r 
  !^ r ⊢ r 
    "\tshr rax,0x" (_ct.pf_x◂◂X) "\n" // 
   ∎ r
§ _shl_im◂◂X # r 
  !^ r ⊢ r 
    "\tshl rax,0x" (_ct.pf_x◂◂X) "\n" // 
   ∎ r
§ _inc # r 
  !^ r ⊢ r 
    ` add rax,1 
    //
  ∎ r 
§ _dec # r 
  !^ r ⊢ r 
    ` sub rax,1 
    //
  ∎ r  
§ _not # r 
  !^ r ⊢ r 
    ` not rax 
    //
  ∎ r 
§ _b_eq # { x y }
	∐ x'=y' 
		∎ { x y %[ 1r ] }
	∐.
		∎ { x y %[ 0r ] }
§ _cnc_add # { r h }
  $ h ⊢ h,h0 
  _cnc_siz◂◂(\\N . _add_im◂◂(_ct.op2.shl◂◂{ N 3r })) { h0 r } ⊢ r
  ∎ { r h }
§ _cnc_sub # { r h }
  $ h ⊢ h,h0 
  _cnc_siz◂◂(\\N . _sub_im◂◂(_ct.op2.shl◂◂{ N 3r })) { h0 r } ⊢ r
  ∎ { r h }
§ c0◂{ t {} } = t 
§ c1◂{ x y } = { y x }
§ _par_id◂◂F = _seq◂◂{ _ctr◂◂c1 _seq◂◂{ _id_par◂◂F _ctr◂◂c1 } }
§ _par◂◂{ F G } = _seq◂◂{ _id_par◂◂G _par_id◂◂F }


§ op2◂◂OP # { r0 r1 } 
  !^ r0,r1 ⊢ r0,r1 
    "\t" OP " rax,rdi\n" // 
  ∎ { r0 r1 }
§ _imul = op2◂◂"imul" 
§ _add = op2◂◂"add" 
§ _sub = op2◂◂"sub" 
§ _and = op2◂◂"and" 
§ _or = op2◂◂"or" 
§ _xor = op2◂◂"xor" 
<<<<<<< HEAD
§ _bts = op2◂◂"bts"
§ _btr = op2◂◂"btr"
§ _bt # { r i } 
  !^ r,i ⊢ *r,*i,c 
    ` xor rsi,rsi 
    ` bt rax,rdi 
    ` setc sil 
    //
  ∎ { r i c }
§ _btx # { r i c } 
  ∐ i'=<63r 
	!^ r,i,c ⊢ r,*i,c 
    ` cmp rsi,0 
    ` jz .L0 
    ` bts rax,rdi
    ` jmp .L1
    `.L0: 
    ` btr rax,rdi
    `.L1:
    ` setc sil 
    ` and rsi,1
    //
  ∎ { r i c }
	∐.
		∎|
§§ _imul 
  § im_0 ##  _
    ∎ %[ 0r ]
  § im_1 = _id 
  § im_2 ##  x 
=======
§§ _imul 
  § im_0 # _
    ∎ %[ 0r ]
  § im_1 = _id 
  § im_2 # x 
>>>>>>> e99538e0eafc51efb79e811cb3fb8eaca8f20be8
    !^ x ⊢ x 
      ` add rax,rax 
      // 
    ∎ x 
<<<<<<< HEAD
  § im_3 ##  x 
=======
  § im_3 # x 
>>>>>>> e99538e0eafc51efb79e811cb3fb8eaca8f20be8
    !^ x ⊢ x 
      ` lea rax,[rax+2*rax]
      //
    ∎ x 
<<<<<<< HEAD
  § im_4 ##  x 
=======
  § im_4 # x 
>>>>>>> e99538e0eafc51efb79e811cb3fb8eaca8f20be8
    !^ x ⊢ x 
      ` lea rax,[4*rax]
      //
    ∎ x 
<<<<<<< HEAD
  § im_5 ##  x 
=======
  § im_5 # x 
>>>>>>> e99538e0eafc51efb79e811cb3fb8eaca8f20be8
    !^ x ⊢ x 
      ` lea rax,[rax+4*rax]
      //
    ∎ x 
<<<<<<< HEAD
  § im_6 ##  x 
=======
  § im_6 # x 
>>>>>>> e99538e0eafc51efb79e811cb3fb8eaca8f20be8
    !^ x ⊢ x 
      ` add rax,rax 
      ` lea rax,[rax+2*rax]
      //
    ∎ x 
<<<<<<< HEAD
  § im_7 ##  x 
=======
  § im_7 # x 
>>>>>>> e99538e0eafc51efb79e811cb3fb8eaca8f20be8
    !^ x ⊢ x 
      ` lea rdi,[8*rax]
      ` sub rdi,rax 
      ` mov rax,rdi
      //
    ∎ x 
<<<<<<< HEAD
  § im_8 ## x 
=======
  § im_8 # x 
>>>>>>> e99538e0eafc51efb79e811cb3fb8eaca8f20be8
    !^ x ⊢ x 
      ` lea rax,[8*rax]
      //
    ∎ x     
<<<<<<< HEAD
  § im_9 ##  x 
=======
  § im_9 # x 
>>>>>>> e99538e0eafc51efb79e811cb3fb8eaca8f20be8
    !^ x ⊢ x 
      ` lea rax,[rax+8*rax]
      //
    ∎ x 
<<<<<<< HEAD
	§ im_10 ##  x 
		!^ x ⊢ x 
      ` lea rax,[rax+4*rax]
			`	add rax,rax
      //
    ∎ x 
  § im_a = {+ im_0 im_1 im_2 im_3 im_4 im_5 im_6 im_7 im_8 im_9 im_10 }
	§ im◂◂X = _ct.tj◂◂{ X im_a _imul_im◂◂X } 
	∎∎
§ _mul_im = _imul.im
§ _imul_im = _imul.im
=======
  § if◂◂{ I X f g } = _ct.if_eq◂◂{ { I X } f g }
  § im◂◂X = if◂◂{ 0r X im_0 if◂◂{ 1r X im_1 _imul_im◂◂X } }
  ∎∎
§ _mul_im = _imul.im
>>>>>>> e99538e0eafc51efb79e811cb3fb8eaca8f20be8
§ _setge { x y } 
  !^ x,y ⊢ x,y,z 
    ` cmp rax,rdi 
    ` mov rsi,0
    ` mov rdx,1
    ` cmovge rsi,rdx 
    //
  ∎ { x y z }

§ alc_rcd◂◂N ## {} 
  !^ _ ⊢ r 
    "\tmov rdi," (_ct.pf_d◂◂(_ct.op1.flo2◂◂N)) "\n"
		`	call alc_rcd_n
    //
  ∎ r 
§ free_rcd◂◂N r 
  !^ r ⊢ *r 
    `	mov rdi,rax 
    "\tmov rax," (_ct.pf_d◂◂(_ct.op1.flo2◂◂N)) "\n"
		`	call free_rcd_n
		//
  ∎ {} 
§ ofs_arr◂◂C # l 
  _imul_im◂◂C l ⊢ l 
  !^ l ⊢ b 
    ` lea rax,[8+8*rax]
    //
  ∎ b
§ ofs_arr = _cnc_siz◂◂ofs_arr 
§§ _r64 
  § eq # { x0 x1 } 
    !^ x0,x1 ⊢ *x0,*x1,b 
      ` xor rsi,rsi 
      ` mov rdx,1 
      ` cmp rax,rdi 
      ` cmovz rsi,rdx 
      //
    ∎ { { x0 x1 } b } 
	§ new # {} 
		!^ _ ⊢ n 
      ` mov rax,QWORD [SGN]
      ` add QWORD [SGN],1
      // 
    ∎ n
  ∎∎
§§ _sgn 
  ¶ t 
    ∐ t : _r64 
  § mk # {} 
    !^ _ ⊢ n 
      ` mov rax,QWORD [SGN]
      ` add QWORD [SGN],1
      // 
    ∎ t◂n
  § new = mk 
  § eq # { t◂n0 t◂n1 }
    _r64.eq { n0 n1 } ⊢ { { n0 n1 } b } 
    ∎ { { t◂n0 t◂n1 } b } 
  § t =| 
  ∎∎
¶ _sgn = _sgn.t
§ chk_len # { l i } 
  !^ l,i ⊢ *l,*i 
    ` cmp rdi,rax 
    ` jae err_alc_o 
    //
  ∎ { l i }
§§ _gl 
  ¶ t = _[ 25r ]
  ¶ I = _[ 26r ] 
  ¶ Lc = _[ 29r ]
  ¶ o = _[ 28r ] 
  ¶ s = _[ 27r ]
  § dlt_I = _[ 23r ]
  § dlt_lc = _[ 24r ]
  § o = _[ 21r ]
  § i = _[ 22r ]
  § f◂◂F # { k V }
    o V ⊢ { Vl v }
    F { k v } ⊢ { k v }
    i { Vl v } ⊢ V 
    ∎ { k V }
  § new = _[ 20r ]
  § dlt # V 
    o V ⊢ { Vl k } 
    dlt_lc Vl ⊢ {} 
    ∎ {}
  ∎∎
§§ _lc 
  § o = _[ 26r ] 
  § i = _[ 27r ] 
  § n = _[ 0x00010028r ]	
  § e = _[ 0x00010029r ]
	§ c = _[ 0x0001002ar ] 
  ∎∎
§ alc◂◂C l
  $ l ⊢ l,s 
  _imul_im◂◂C s ⊢ s 
  !^ l,s ⊢ *l,r
		`	mov rsi,0x0001_0000_0000_0000 
		`	add rax,rsi
    ` push rax
    ` lea rdi,[8+8*rdi]
    ` mov rsi,1
    ` xor rax,rax 
    (C_CALL◂◂"calloc")
    ` pop QWORD [rax]
    ` mov rdi,rax
    //
  ∎ { l r }
§ alc = _cnc_siz◂◂alc
§ alc_l◂◂C l
  $ l ⊢ l,s 
  _imul_im◂◂C s ⊢ s 
  !^ l,s ⊢ *l,r,s
		`	mov rsi,0x0001_0000_0000_0000 
		`	add rax,rsi
    ` push rax
    ` lea rdi,[8+8*rdi]
    `	push rdi 
		` mov rsi,1
    ` xor rax,rax 
    (C_CALL◂◂"calloc")
    `	pop rsi 
    ` pop QWORD [rax]
		` mov rdi,rax
    //
  ∎ { l r s }
§ alc_l = _cnc_siz◂◂alc_l

§ chk_bc # { a i } 
  _id.arr0 a ⊢ a 
  _hp.of a ⊢ { r h } 
  !^ r,i ⊢ *r,*i 
    	`	mov rsi,QWORD [rax]
			`	mov esi,esi 
			` cmp rdi,rsi 
  		` jae err_alc_o 
      //
    _hp.to { r h } ⊢ a
   ∎ { a i }

§§ _arr 
  ¶ lc b',k',t' 
    ∐ lc : { _hp◂b' _r64 _arr0◂t'◂k' }
  § len # a 
    _id.arr0 a ⊢ a 
    _hp.of a ⊢ { r h }
    !^ r ⊢ *r,l 
   		`	mov edi,DWORD [rax] 
		//
    _hp.to { r h } ⊢ a
   ∎ { a l }
	§ st # a 
		 _hp.of a ⊢ { r h }
    !^ r ⊢ *r,s 
   		`	mov rdi,QWORD [rax] 
		//
    $ r ⊢ r,rt 
		_hp.to { r h } ⊢ a
		∎ { a { rt s } }
	§ st_lc # lc◂{ h i a } 
    st a ⊢ { a s } 
		∎ { lc◂{ h i a } s }
	§§ s8 
		§ cmp { s0 s1 }
	  _id.s8 s0 ⊢ s0 
	  _id.s8 s1 ⊢ s1 
	  _hp.rpc s0 ⊢ { s0 r0 }
	  _hp.rpc s1 ⊢ { s1 r1 }
	  !^ r0,r1 ⊢ z,*m
	    `	mov rsi,rdi 
			`	mov rdi,rax
	    ` call cmp_s8 
	    //
	  $ m ⊢ _ 
	  ∎ { s0 s1 z }
	§ l # { s i } 
		$.[ t' . _arr0◂t'◂_r8 ] s ⊢ s
	  chk_bc { s i } ⊢ { s i } 
		_hp.of s ⊢ { r h } 
	  !^ r,i ⊢ *r,*i,c 
	    ` movzx rsi,BYTE [rax+8+rdi]
	    //
	  _hp.to { r h } ⊢ s 
	  ∎ { s i c }
	§ l64 { s i }
		$.[ t' . _arr0◂t'◂_r8 ] s ⊢ s
	  _hp.of s ⊢ { r h } 
	  !^ r,i ⊢ r,*i,c 
			`	mov esi,DWORD [rax]
			`	and rsi,~7
	    `	cmp rdi,rsi 
			`	ja .L0
		  `	mov rsi,QWORD [rax+8+rdi]
			`	jmp .L1 
			`.L0:
			`	mov rax,0 
			`.L1: 
			//
	  ∐ r'=0r 
			∎| 
		∐.
			_hp.to { r h } ⊢ s 
		  ∎ { s i c }		
	§ s_C◂◂C { s i }
		$.[ . _arr_nr◂_r8 ] s ⊢ s
	  _hp.of s ⊢ { r h } 
	  !^ r,i ⊢ r,*i 
	    `	mov esi,DWORD [rax]
	    ` cmp rdi,rsi 
		  ` jae .L0: 
			"\tmov BYTE [rax+8+rdi],0x" (_ct.pf_x◂◂C) "\n"
			`	jmp .L1 
			`.L0:
			`	mov rax,0 
			`.L1:
			//
	  ∐ r'=0r 
			∎|
		∐.
			_hp.to { r h } ⊢ s 
		  ∎ { s i }
	§ s { s i c }
		$.[ . _arr_nr◂_r8 ] s ⊢ s
  	_hp.of s ⊢ { r h } 
  	!^ r,i,c ⊢ *r,*i,*c 
  	  `	mov edx,DWORD [rax]
  	  ` cmp rdi,rdx 
		  ` jae err_bc 
			` mov BYTE [rax+8+rdi],sil
  	  //
  	_hp.to { r h } ⊢ s
  	∎ { s i c }
	§ rsz { s l }
		$.[ . _arr_nr◂_r8 ] s ⊢ s
  	_hp.of s ⊢ { r h }
  	$ l ⊢ l,l0 
  	!^ r,l0 ⊢ r,*m  
  	  `	mov rsi,QWORD [rax]
			`	cmp rax,rsp 
			`	jae err_mk_stk 
			`	mov rdx,0xffff_ffff_0000_0000
			`	and rsi,rdx
			`	add rsi,rdi
			`	push rdi
			` push rsi 
  	  ` mov rsi,~7 
  	  ` and rdi,rsi
  	  ` add rdi,16
  	  ` mov rsi,rdi
  	  ` mov rdi,rax
  	  (C_CALL_SF◂◂"realloc") 
  	  `	cmp rax,QWORD [NULL] 
			`	jz err_NULL 
			`	pop QWORD [rax]
			` pop rdi  
  	  ` mov rsi,rdi 
  	  ` and rdi,7
  	  ` mov rdi,QWORD [s8_m+8*rdi]
  	  ` shr rsi,3 
  	  ` and QWORD [rax+8+8*rsi],rdi
  	  //
  	$ m ⊢ _ 
  	_hp.to { r h } ⊢ s
  	∎ { s l }
	§ len # s 
		_id.s8 s ⊢ s 
		len s ⊢| 
	§ hsh # s 
  _id.s8 s ⊢ s 
  _hp.rpc s ⊢ { s r }
  !^ r ⊢ _,h 
    ` mov rdi,rax 
    ` call mm32
    ` mov rdi,rax 
    //
  ∎ { s h }
§ mlc0 l 
  $ l ⊢ l,l0 
  !^ l0 ⊢ m 
    ` mov rdi,rax 
		`	push rdi  
		`	mov rsi,~7
		`	and rdi,rsi
		`	lea rdi,[rdi+16] 
		`	mov rsi,1 
		`	xor rax,rax 
		(C_CALL◂◂"calloc")
		`	pop rdi
		`	mov rsi,0x0001_0000_0000_0000
		`	add rdi,rsi
		`	mov QWORD [rax],rdi 
    // 
  ∎ { l m }
	§ mlc l 
		mlc0 l ⊢ { l m }
	  _hp.ini {} ⊢ h 
	  _id.hp.s8 h ⊢ h 
	  _hp.to { m h } ⊢ s
		∎ { l s } 
	§ mlc_nr l 
		mlc0 l ⊢ { l m }
	  _hp.ini {} ⊢ h 
	  $.[ . _hp◂(_arr_nr◂_r8) ] h ⊢ h 
	  _hp.to { m h } ⊢ s
		∎ { l s } 
	§§ dlt 
		¶¶ f t' : _arr0◂t'◂_r8 → {}
		§ t s
  		_id.s8 s ⊢ s 
  	  _hp.of s ⊢ { r h } 
  	  $ h ⊢ _
  	  !^ r ⊢ *r 
  	    `	mov rdi,QWORD [rax]
				`	mov rsi,0x0001_0000_0000_0000 
				`	sub rdi,rsi 
				`	jc err_dyn_rpc 
				`	mov QWORD [rax],rdi 
				`	shr rdi,32 
				`	cmp rdi,0 
				`	jnz .L0 
				`	cmp rax,rsp
				`	jae .L0
				` mov rdi,rax
				(C_CALL◂◂"free")
				`.L0:
  	    // 
  	  $ r ⊢ _ 
  	  ∎ {}
		¶§ f = t 
		§ nr s 
  	  $.[ . _s8_nr ] s ⊢ s 
  	  _hp.of s ⊢ { r h } 
  	  $ h ⊢ _
  	  !^ r ⊢ *r 
  	    `	cmp rax,rsp
				`	jae .L0
  	    ` mov rdi,rax
				(C_CALL◂◂"free") 
				`.L0:
  	    // 
  	  $ r ⊢ _ 
  	  ∎ {} 
		¶§ f = nr

		∎∎
		§ dlt = dlt.f
		§ rpc s 
  	  $.[ . _s8 ] s ⊢ s 
  	  _hp.of s ⊢ { r h } 
			!^ r ⊢ *r,rx
				`	mov rdi,rax 
				`	call rpc_s8 
				`	mov rdi,rax 
				// 
			$ h ⊢ h,hx 
			_hp.to { r h } ⊢ s 
			_hp.to { rx hx } ⊢ sx 
			∎ { s sx }
		§ nr_of s 
			_hp.ini {} ⊢ hx 
  	  $.[ . { _s8 _hp◂_s8_nr } ] { s hx } ⊢ { s hx }
  	  _hp.of s ⊢ { r h } 
			!^ r ⊢ *r,c 
    		`	mov rdi,QWORD [rax]
				`	shr rdi,32 
				`	sub rdi,0x1_0000
				//
			∐ c'=0r
				_hp.to { r hx } ⊢|
			∐.
				$ c ⊢ _ 
				!^ r ⊢ rx
					`	mov rdi,rax 
					`	call dec_p 
					`	call rpc_s8 
					// 
				_hp.to { rx hx } ⊢|
	∎∎
	
  
  § emt_lc = '[ _[] : b',k',t' . (lc◂b'◂k'◂t')→(lc◂b'◂k'◂t') ]
  § alc_x◂◂C l
    ∐ l'<>0r .
      !^ l ⊢ *l,b
		  	`	bsr rsi,rax 
		  	`	add rsi,1 
		  	`	xor rdi,rdi
		  	`	bts rdi,rsi 
		  	//
		  _imul_im◂◂C b ⊢ b 
	  	!^ b,l ⊢ r,*l 
	  		` push rdi 
        `	lea rsi,[8+8*rax]
	  		`	mov rdi,1 
	  		(C_CALL◂◂"calloc")
        `	pop rdi 
				`	mov QWORD [rax],rdi 		
	  		//
	  	∎ { l r }
    ∐. .
      !^ _ ⊢ r 
        ` mov rax,ARR_X_UNT 
        //
      ∎ { l r }
  § alc_x = _cnc_siz◂◂alc_x
  § @.mk_i { { k r h } i } 
    ∐ i'<>0r .
      $ k ⊢ k,k0 
      _cnc_sto { r k0 } ⊢ r 
      _cnc_add { r h } ⊢ { r h }
      _dec i ⊢ i 
      mk_i { { k r h } i } ⊢|
    ∐. .
      ∎ k 
  § @.mk_i_F◂◂F { { v r h } i } 
    ∐ i'<>0r .
      F v ⊢ { v k } 
      $.[ k' . { k' _hp◂k' } ] { k h } ⊢ { k h } 
      _cnc_sto { r k } ⊢ r 
      _cnc_add { r h } ⊢ { r h }
      _dec i ⊢ i
      mk_i_F◂◂F { { v r h } i } ⊢| 
    ∐. .
      ∎ v
  § mk◂◂{ ALC I } { n k }
    _hp.ini {} ⊢ h 
    $.[ k' . { k' _hp◂k' } ] { k h } ⊢ { k h }
    $ h ⊢ h,h0 
    ALC { h0 n } ⊢ { n r }
    $ r ⊢ r,r0 
    _add_im◂◂8r r0 ⊢ r0 
    $ n ⊢ n,n0
    mk_i { { k r0 h } n0 } ⊢ k
    _hp.ini {} ⊢ ha 
    '[ _id : t',k' . _id◂{ k' _hp◂(_arr0◂t'◂k') } ] { k ha } ⊢ { k ha } 
    _hp.to { r ha } ⊢ a 
    I a ⊢ a 
    ∎ { n k a }
  § q0 = '[ (\\F . _id) : v',k' . (v'→{ v' k' })→→(_hp◂k'→_hp◂k') ]
  § mk_F◂◂{ F ALC I } # { n v }
    _hp.ini {} ⊢ h 
    q0◂◂F h ⊢ h 
    _hp.ini {} ⊢ ha 
    '[ _id : t',k' . _id◂{ _hp◂k' _hp◂(_arr0◂t'◂k') } ] { h ha } ⊢ { h ha } 
    $ h ⊢ h,h0 
    ALC { h0 n } ⊢ { n r }
    $ r ⊢ r,r0 
    _add_im◂◂8r r0 ⊢ r0 
    $ n ⊢ n,n0
    mk_i_F◂◂F { { v r0 h } n0 } ⊢ v
   _hp.to { r ha } ⊢ a 
    I a ⊢ a 
    ∎ { n v a }

  § f0◂◂F # {} 
    F {} ⊢ k 
    ∎ { {} k }
  § mk_cst◂◂{ P ALC I } # n
    mk_F◂◂{ f0◂◂P ALC I } { n {} } ⊢ { n {} a } 
    ∎ { n a }
  § @.dlt_i { { h r } i } 
    ∐ i'<>0r .
      _cnc_lod_hp { r h } ⊢ { r h q } 
      _cnc_add { r h } ⊢ { r h }
      $ q ⊢ _ 
      _dec i ⊢ i
      dlt_i { { h r } i } ⊢|
    ∐. .
      ∎ {} 
  
  § @.dlt_lc_i { { h r j } i } 
    ∐ i'<>0r .
      ∐ i'<>j' . 
        _cnc_lod_hp { r h } ⊢ { r h q } 
        _cnc_add { r h } ⊢ { r h }
        $ q ⊢ _ 
        _dec i ⊢ i
        dlt_lc_i { { h r j } i } ⊢|
        
      ∐. .
        _cnc_add { r h } ⊢ { r h }
        _dec i ⊢ i
        dlt_lc_i { { h r j } i } ⊢|
    ∐. .
      ∎ {} 
	
  § free_arr r 
		!^ r ⊢ *r 
      `	cmp rax,rsp
			`	jae .L0
      ` mov rdi,rax
			(C_CALL◂◂"free")
			`.L0:
			// 
		∎ {}
	§ dlt_nr a 
    $.[ k' . _arr_nr◂k' ] a ⊢ a 
    len a ⊢ { a l } 
		_hp.of a ⊢ { r ha } 
    _hp.ini {} ⊢ h 
    $.[ k' . { _hp◂(_arr_nr◂k') _hp◂k' } ] { ha h } ⊢ { _ h } 
    !^ r ⊢ *r 
			`	mov rdi,QWORD [rax]
			`	shr rdi,32
			`	sub rdi,0x1_0000
			`	jne err_dyn_rpc 
			`	mov QWORD [rax],0
			// 
		$ r ⊢ r,r0 
    _add_im◂◂8r r0 ⊢ r0 
    dlt_i { { h r0 } l } ⊢ {}
    free_arr r ⊢| 
		-\

  § dlt_lc lc◂{ hb j a } 
  	$.[ . _hp◂{} ] hb ⊢ hb
	  $.[ k' . _arr_nr◂k' ] a ⊢ a 
    len a ⊢ { a l } 
  	_hp.of a ⊢ { r ha } 
    _hp.ini {} ⊢ h 
    $.[ k' . { _hp◂(_arr_nr◂k') _hp◂k' } ] { ha h } ⊢ { _ h } 
    $ r ⊢ r,r0 
    _add_im◂◂8r r0 ⊢ r0 
    dlt_lc_i { { h r0 j } l } ⊢ {}
    free_arr r ⊢| 
		-/
  
	§§ std
    § dlt a 
    _id.arr a ⊢ a 
    _hp.of a ⊢ { r ha }
    _hp.ini {} ⊢ h 
    $.[ k' . { _hp◂(_arr◂k') _hp◂k' } ] { ha h } ⊢ { _ h } 
    !^ r ⊢ *r,c,l 
			`	mov rdi,QWORD [rax]
			`	mov rsi,0x0001_0000_0000_0000 
			`	sub rdi,rsi
			`	jc err_dyn_rpc 
			`	mov QWORD [rax],rdi 
			`	mov esi,edi
			`	shr rdi,32
      // 
		--\
		∐ c'=0r 
	    $ c ⊢ _ 
	    $ r ⊢ r,r0 
	    _add_im◂◂8r r0 ⊢ r0 
	    dlt_i { { h r0 } l } ⊢ {}
			free_arr r ⊢| 
		∐.
			∎ {}
	§ dlt_lc lc◂{ hb j a } 
    $.[ . _hp◂{} ] hb ⊢ hb
    _id.arr a ⊢ a 
    len a ⊢ { a l } 
    _hp.of a ⊢ { r ha }
    _hp.ini {} ⊢ h 
    $.[ k' . { _hp◂(_arr◂k') _hp◂k' } ] { ha h } ⊢ { _ h } 
    !^ r ⊢ *r,c 
			`	mov rdi,QWORD [rax]
			`	mov rsi,0x0001_0000_0000_0000 
			`	sub rdi,rsi
			`	jc err_dyn_rpc 
			`	mov QWORD [rax],rdi 
			`	shr rdi,32 
      // 
		--\
		∐ c'=0r 
	    $ r ⊢ r,r0 
	    _add_im◂◂8r r0 ⊢ r0 
   		dlt_lc_i { { h r0 j } l } ⊢ {}
   		free_arr r ⊢| 
			
		--/
		∐.
			∎ {}
    § @.rpc_i { { r0 h r1 } i } 
      ∐ i'<>0r
        _cnc_rpc_hp { r0 h } ⊢ { r0 h q1 }
        _cnc_sto { r1 q1 } ⊢ r1
        _cnc_add { r0 h } ⊢ { r0 h }
        _cnc_add { r1 h } ⊢ { r1 h }
        _dec i ⊢ i
        rpc_i { { r0 h r1 } i } ⊢|
      ∐. .
        ∎ {}
  	§ rpc a 
		  _id.arr a ⊢ a 
      len a ⊢ { a l } 
      _hp.ini {} ⊢ h
      '[ _id : a' . _id◂{ _hp◂a' a' } ] { h a } ⊢ { h a }
		  _hp.ini {} ⊢ hk 
		  '[ _id : k' . _id◂{ _hp◂(_arr◂k') _hp◂k' } ] { h hk } ⊢ { h hk } 
      $ hk ⊢ hk,hk0 
      alc { hk0 l } ⊢  { l r1 }  
      $ r1 ⊢ r1,r2 
      _hp.to { r1 h } ⊢ a1 
	    _add_im◂◂8r r2 ⊢ r2
			_hp.rpc a ⊢ { a r0 }
			_add_im◂◂8r r0 ⊢ r0
      rpc_i { { r0 hk r2 } l } ⊢ {}
      ∎ { a a1 }
		§ @.rpc_i_D { { r0 h r1 } i } 
      ∐ i'<>0r
        _cnc_rpc_hp { r0 h } ⊢ { r0 h q1 }
				--_emt0 %[ 0x3334r ] ⊢ _ 
      	--_emt0 q1 ⊢ _ 
        _cnc_sto { r1 q1 } ⊢ r1
        _cnc_add { r0 h } ⊢ { r0 h }
        _dec i ⊢ i
        rpc_i_D { { r0 h r1 } i } ⊢|
      ∐. .
        ∎ {}
		§ nr_of a 
      _hp.ini {} ⊢ h
		  _hp.ini {} ⊢ hk 
			_hp.ini {} ⊢ hx 
      '[ _id : a' . _id◂{ (_arr◂a') _hp◂a' _hp◂(_arr_nr◂a') } ] { a hk hx } ⊢ { a hk hx }
      _hp.of a ⊢ { r0 _ } 
			!^ r0 ⊢ *r0,c,d 
    		`	mov rdi,QWORD [rax]
				`	mov rsi,rdi 
				`	shr rdi,32 
				`	sub rdi,0x1_0000
				`	jc err_dyn_rpc 
				//
			--\
			∐ c'=0r 
				-\
				_emt0 %[ 0x3333r ] ⊢ _ 
				_emt0 d ⊢ _ 
				_hp.to { r0 hx } ⊢ a 
				--_emt0 a ⊢|
				∎ a
				-/
				$ c ⊢ _ 
				-\
				$ r0 ⊢ r0,r0t 
				!^ r0t ⊢ r0t,l
					`	mov rsi,QWORD [rax] 
					`	mov edi,esi 
					`	add rax,8
					// 
	      $ hk ⊢ hk,hk0 
      	--alc { hk0 l } ⊢  { l r1 }  
    	  -/
				_hp.to { r0 hx } ⊢ a1 
      	--rpc_i_D { { r0t hk r1 } l } ⊢ {}
				∎ a1
			∐. 
			--/
				$ c ⊢ _ 
				$ r0 ⊢ r0,r0t 
				!^ r0t ⊢ r0t,l
					`	mov rsi,QWORD [rax] 
					`	mov edi,esi 
					`	mov rdx,0x0001_0000_0000_0000
					`	sub rsi,rdx
					`	mov QWORD [rax],rsi 
					`	add rax,8
					// 
	      $ hk ⊢ hk,hk0 
      	alc { hk0 l } ⊢  { l r1 }  
    	  $ r1 ⊢ r1,r2 
    	  _hp.to { r1 hx } ⊢ a1 
    	  --_hp.to { r0 hx } ⊢ a1 
	  	  _add_im◂◂8r r2 ⊢ r2
      	rpc_i { { r0t hk r2 } l } ⊢ {}
				∎ a1
    ∎∎
  
  §§ x 
    § dlt a 
      _id.arr_x a ⊢ a 
      len a ⊢ { a l } 
      _hp.of a ⊢ { r ha } 
      ∐ l'<>0r .
        _hp.ini {} ⊢ h 
        $.[ k' . { _hp◂(_arr_x◂k') _hp◂k' } ] { ha h } ⊢ { _ h } 
        $ r ⊢ r,r0 
        _add_im◂◂8r r0 ⊢ r0 
        dlt_i { { h r0 } l } ⊢ {}
       !^ r ⊢ *r 
      	` mov rdi,rax
				(C_CALL◂◂"free") 
        // 
       $ r ⊢ _ 
       ∎ {}
      ∐. .
        ∎ {} 
    § dlt_lc lc◂{ hb j a } 
      $.[ . _hp◂{} ] hb ⊢ hb
      _id.arr_x a ⊢ a 
      len a ⊢ { a l } 
      _hp.of a ⊢ { r ha } 
      ∐ l'<>0r .
        _hp.ini {} ⊢ h 
        $.[ k' . { _hp◂(_arr_x◂k') _hp◂k' } ] { ha h } ⊢ { _ h } 
        $ r ⊢ r,r0 
        _add_im◂◂8r r0 ⊢ r0 
        dlt_lc_i { { h r0 j } l } ⊢ {}
       !^ r ⊢ *r 
         ` mov rdi,rax
				(C_CALL◂◂"free") 
        // 
       $ r ⊢ _ 
       ∎ {}
      ∐. .
        ∎ {}  
    
    ∎∎ 
	¶¶ dlt t',k' : _arr0◂t'◂k' → {} 
	¶§ dlt = s8.dlt 
	¶§ dlt = std.dlt 
	¶§ dlt = x.dlt 
	¶§ dlt = dlt_nr 
	§ arr_nr a 
		$.[ k' . _arr_nr◂k' ] a ⊢ a 
		_hp.of a ⊢ _ 
		∎ {}
  --¶§ dlt = arr_nr 
	¶§ dlt = '[ _[] : k',t' . (_arr0◂t'◂k')→{} ]
  ¶¶ rpc t',k' : _arr0◂t'◂k' → { _arr0◂t'◂k' _arr0◂t'◂k' }
	¶§ rpc = s8.rpc
	¶§ rpc = std.rpc 
	¶§ rpc = '[ _[] : k' . _rpc◂(_arr_x◂k') ]
	¶§ rpc = '[ _[] : k' . _rpc◂(_arr_nr◂k') ]
	¶§ rpc = '[ _[] : k',t' . _rpc◂(_arr0◂t'◂k') ]
	¶¶ nr_of k' : _arr◂k' → _arr_nr◂k'
	¶§ nr_of = s8.nr_of
	¶§ nr_of = std.nr_of
	§ of_nr a 
		_hp.of a ⊢ { r h0 }
		_hp.ini {} ⊢ h
		$.[ k' . { _hp◂(_arr◂k') _hp◂( _arr_nr◂k')} ] { h h0 } ⊢ { h _ }
    _hp.to { r h } ⊢ a
   ∎ a
	§§ chk_nr 
		¶¶ f t',k' : _arr0◂t'◂k' → { _r64 _hp◂(_arr0◂t'◂k' ) }
		§ std # a 
			_hp.ini {} ⊢ ha 
			$.[ k' . { _arr◂k' _hp◂(_arr◂k') } ] { a ha } ⊢ { a ha }
			nr_of a ⊢ a 
			_hp.of a ⊢ { r _ }
			∎ { r ha }
		¶§ f = std 
		§ x # a 
			$.[ k' . _arr_x◂k' ] a ⊢ a 
			_hp.of a ⊢|
		¶§ f = x 
		§ nr # a 
			$.[ k' . _arr_nr◂k' ] a ⊢ a 
			_hp.of a ⊢|
		¶§ f = nr
		∎∎
	§ chk # { a i }
		chk_nr.f a ⊢ { r h }
		!^ r,i ⊢ *r,*i 
			`	mov esi,DWORD [rax]
			` cmp edi,esi 
  		` jge err_alc_o 
			// 
		∎ { { r h } i }
	§ chk_bc # { a i }
		_hp.of a ⊢ { r h } 
		!^ r,i ⊢ *r,*i 
			`	mov esi,DWORD [rax]
			` cmp rdi,rsi 
  		` jge err_alc_o 
			// 
		_hp.to { r h } ⊢ a
		∎ { a i }
  § o # { a i } 
    chk { a i } ⊢ { { ra ha } i }
		_hp.to { ra ha } ⊢ a 
		_hp.ini {} ⊢ h 
    $.[ k',t' . { _hp◂k' _arr0◂t'◂k' } ] { h a } ⊢ { h a } 
    $ i ⊢ i,b 
    $ h ⊢ h,h0 
    ofs_arr { h0 b } ⊢ b 
    _hp.rpc a ⊢ { a ra } 
    _add { ra b } ⊢ { ra _ } 
    _cnc_lod_hp { ra h } ⊢ { ra _ k }
    _hp.ini {} ⊢ hb 
    $.[ . _hp◂{} ] hb ⊢ hb
    ∎ { lc◂{ hb i a } k }	

  § i # { lc◂{ hb i a } k } 
    $.[ . _hp◂{} ] hb ⊢ hb
    _hp.ini {} ⊢ h 
    $.[ k',t' . { _hp◂k' _arr0◂t'◂k' k' } ] { h a k } ⊢ { h a k } 
    $ i ⊢ i,b 
    ofs_arr { h b } ⊢ b 
    _hp.rpc a ⊢ { a ra } 
    _add { ra b } ⊢ { ra _ } 
    _cnc_sto { ra k } ⊢ _
    ∎ { a i }

  § i_0 { lc◂{ hb i a } k } 
		--_emt0 %[ "asc0:2:1" ] ⊢ _ 
    $.[ . _hp◂{} ] hb ⊢ hb
    _hp.ini {} ⊢ h  
    $.[ k',t' . { _hp◂k' _arr0◂t'◂k' k' } ] { h a k } ⊢ { h a k } 
    $ i ⊢ i,b 
    ofs_arr { h b } ⊢ b 
		--_emt0 %[ "asc0:2:2" ] ⊢ _ 
    _hp.rpc a ⊢ { a ra } 
    _add { ra b } ⊢ { ra _ } 
    _cnc_sto { ra k } ⊢ _
		--_emt0 %[ "asc0:2:3" ] ⊢ _ 
    ∎ { a i }

  §§ Lc 
    § o◂◂T # { a i }
      chk { a i } ⊢ { { ra ha } i } 
			_hp.to { ra ha } ⊢ a 
      _hp.ini {} ⊢ h 
      $.[ k',t' . { _hp◂k' _arr0◂t'◂k' } ] { h a } ⊢ { h a } 
      $ i ⊢ i,b 
      $ h ⊢ h,h0 
      ofs_arr { h0 b } ⊢ b 
      _hp.rpc a ⊢ { a ra } 
      _add { ra b } ⊢ { ra _ } 
      _lc.o◂◂T { h ra } ⊢ { _ _ ht k }
      ∎ { lc◂{ ht i a } k }	
    § i◂◂T # { lc◂{ ht i a } k } 
       _hp.ini {} ⊢ h 
      $.[ k',t' . { _hp◂k' _arr0◂t'◂k' } ] { h a } ⊢ { h a } 
      $ i ⊢ i,b 
      $ h ⊢ h,h0
      ofs_arr { h b } ⊢ b 
      _hp.rpc a ⊢ { a ra } 
      _add { ra b } ⊢ { ra _ } 
      _lc.i◂◂T { h0 ra ht k } ⊢ { _ _ }
      ∎ { a i }
    § l◂◂T { a i } 
     	chk { a i } ⊢ { { ra ha } i } 
			_hp.to { ra ha } ⊢ a 
      _hp.ini {} ⊢ h 
      $.[ k',t' . { _hp◂k' _arr0◂t'◂k' } ] { h a } ⊢ { h a } 
      $ i ⊢ i,b 
      $ h ⊢ h,h0 
      ofs_arr { h0 b } ⊢ b 
      _hp.rpc a ⊢ { a ra }
      _add { ra b } ⊢ { ra _ }
      _lc.o◂◂T { h ra } ⊢ { h ra ht k }
      $ k ⊢ k,k0
      _lc.i◂◂T { h ra ht k } ⊢ _ 
      ∎ { a i k0 }
    § x◂◂T { a i k0 } 
      chk { a i } ⊢ { { ra ha } i } 
			_hp.to { ra ha } ⊢ a 
			_hp.ini {} ⊢ h 
      $.[ k',t' . { _hp◂k' _arr0◂t'◂k' } ] { h a } ⊢ { h a } 
      $ i ⊢ i,b 
      $ h ⊢ h,h0 
      ofs_arr { h0 b } ⊢ b 
      _hp.rpc a ⊢ { a ra } 
      _add { ra b } ⊢ { ra _ } 
      _lc.o◂◂T { h ra } ⊢ { h ra ht k1 }
      _lc.i◂◂T { h ra ht k0 } ⊢ _ 
      ∎ { a i k1 }
    § dlt = '[ _[] : a',b',k',t' . (lc◂{ a' b' }◂k'◂t')→{} ]
    ∎∎
	§ l { a i }
		chk_bc { a i } ⊢ { a i }
		_hp.ini {} ⊢ h 
    $.[ k',t' . { _hp◂k' _arr0◂t'◂k' } ] { h a } ⊢ { h a } 
    $ i ⊢ i,b 
    $ h ⊢ h,h0 
    ofs_arr { h0 b } ⊢ b 
    _hp.rpc a ⊢ { a ra } 
    _add { ra b } ⊢ { ra _ } 
    _cnc_rpc_hp { ra h } ⊢ { ra _ k }
    ∎ { a i k }
  § u # { a i k }
    o { a i } ⊢ { a _ }
    i { a k } ⊢ { a i } 
    ∎ { a i }
  § @.itr_r_i◂◂F { k v i }
    ∐ i'<>0r .
      _dec i ⊢ i 
      l { v i } ⊢ { v i s }
      F { k s } ⊢ k 
      itr_r_i◂◂F { k v i } ⊢| 
    ∐. .
      ∎ { k v }
  § itr_r◂◂F # { k v }
    len v ⊢ { v l }
    itr_r_i◂◂F { k v l } ⊢|
	§ @.itr_r_i_i◂◂F { k v i }
    ∐ i'<>0r .
      _dec i ⊢ i 
      l { v i } ⊢ { v i s }
      $ i ⊢ i,i0 
			F { k i0 s } ⊢ k 
      itr_r_i_i◂◂F { k v i } ⊢| 
    ∐. .
      ∎ { k v }
  § itr_r_i◂◂F # { k v }
    len v ⊢ { v l }
    itr_r_i_i◂◂F { k v l } ⊢|
	§ @.map_r_i◂◂F { k v i }
    ∐ i'<>0r .
      _dec i ⊢ i 
      o { v i } ⊢ { V s }
      F { k s } ⊢ { k s }
			i { V s } ⊢ { v i }
      map_r_i◂◂F { k v i } ⊢| 
    ∐. .
			of_nr v ⊢ v
      ∎ { k v }
  § map_r◂◂F # { k v }
    len v ⊢ { v l }
    nr_of v ⊢ v 
		map_r_i◂◂F { k v l } ⊢|
	§ @.map_r_e_i◂◂F { { v r0 h0 r1 h1 l } i }
    ∐ i'<>l'
			_cnc_lod r0 ⊢ { r0 q0 } 
			_cnc_add { r0 h0 } ⊢ { r0 h0 }
			F { v q0 } ⊢ { v q1 } 
      _eq_hp { q1 h1 } ⊢ { q1 h1 }
			_cnc_sto { r1 q1 } ⊢ r1
      _cnc_add { r1 h1 } ⊢ { r1 h1 }
      _inc i ⊢ i 
      map_r_e_i◂◂F { { v r0 h0 r1 h1 l } i } ⊢|
    ∐. .
      ∎ v
	§ @.map_r_e_ir◂◂F { { v r0 h0 r1 h1 l } i } 
    ∐ i'<>l' .
			_cnc_rpc r0 ⊢ { r0 q1 }
			_cnc_add { r0 h0 } ⊢ { r0 h0 }
			F { v q1 } ⊢ { v q1 } 
      _eq_hp { q1 h1 } ⊢ { q1 h1 }
			_cnc_sto { r1 q1 } ⊢ r1
      _cnc_add { r1 h1 } ⊢ { r1 h1 }
      _inc i ⊢ i 
      map_r_e_ir◂◂F { { v r0 h0 r1 h1 l } i } ⊢|
    ∐. .
      ∎ v
    § map_r_e◂◂F { v a } 
			_hp.ini_ct◂◂F {} ⊢ hF 
			_id.arr a ⊢ a 
      len a ⊢ { a l } 
      _hp.ini {} ⊢ h0
      _hp.ini {} ⊢ h1
      _hp.ini {} ⊢ ha1
    	_hp.of a ⊢ { r0 ha0 }
			$.[ k0',k1',v' . { _hp◂({ v' k0' }→{ v' k1' }) _hp◂k0' _hp◂k1' _hp◂(_arr◂k1') _hp◂(_arr◂k0') } ] { hF h0 h1 ha1 ha0 } ⊢ { hF h0 h1 ha1 ha0 }
			$ h1 ⊢ h1,h10 
      alc { h10 l } ⊢ { l r1 }  
      $ r1 ⊢ r1,r1t 
      _hp.to { r1t ha1 } ⊢ a1 
	    !^ r0 ⊢ *r0,c 
  	 	 	`	mov rdi,QWORD [rax]
				`	shr rdi,32
				`	sub rdi,0x1_0000
				//
			∐ 0r<>c' 
				$ c ⊢ _ 
				$ r0 ⊢ r0,r0t 
				_add_im◂◂8r r0 ⊢ r0
				_add_im◂◂8r r1 ⊢ r1
				map_r_e_ir◂◂F { { v r0 h0 r1 h1 l } %[ 0r ] } ⊢ v
				!^ r0t ⊢ *r0t 
					`	mov rdi,rax 
					`	call dec_p 
					//
				∎ { v a1 }
			∐.
				$ c ⊢ _
  	    $ r0 ⊢ r0,r0t 
				_add_im◂◂8r r0 ⊢ r0
				_add_im◂◂8r r1 ⊢ r1
				map_r_e_i◂◂F { { v r0 h0 r1 h1 l } %[ 0r ] } ⊢ v
  	    free_arr r0t ⊢ {} 
				∎ { v a1 }
				
	§§ of_lst 	
		§ F # { {} x } 
			∎ { {} x } 
		§§ rev 
			§§ map_l 
				§ @.i◂◂F { { h v i } l }
	  			$ l ⊢ 
					∐ _cns◂{ x l } . 
						F { v x } ⊢ { v x }
						_eq_hp { x h } ⊢ { x h } 
						_inc i ⊢ i
	  		    i◂◂F { { h v i } l } ⊢ { { h v } r o }
						_cnc_sto { o x } ⊢ o 
				    _cnc_add { o h } ⊢ { o h }
						∎ { { h v } r o }
	  		  ∐. _nil◂{}
	  		    $ h ⊢ h,h0 
						alc { h0 i } ⊢  { _ r }  
	  		    $ r ⊢ r,o
						_add_im◂◂8r o ⊢ o
						∎ { { h v } r o }
	  		§ f◂◂F { v l }
					_hp.ini {} ⊢ h
					i◂◂F { { h v %[ 0r ] } l } ⊢ { { h v } r _ }
					_hp.ini {} ⊢ ha 
					$.[ k' . { _hp◂k' _hp◂(_arr◂k') } ] { h ha } ⊢ { _ ha }
					_hp.to { r ha } ⊢ a 
					∎ { v a }
				∎∎
			§ f # l 
				map_l.f◂◂F { {} l } ⊢ { {} a }
				∎ a
			∎∎ 
		§§ map_l
			§ @.i◂◂F { { h v i } l }
  			$ l ⊢ 
				∐ _cns◂{ x l } . 
					F { v x } ⊢ { v x }
					_eq_hp { x h } ⊢ { x h } 
					_inc i ⊢ i
    		  i◂◂F { { h v i } l } ⊢ { { h v } r }
  		    _cnc_sub { r h } ⊢ { r h }
					_cnc_sto { r x } ⊢ r
					∎ { { h v } r }
  		  ∐. _nil◂{} .
  		    $ h ⊢ h,h0 
					alc_l { h0 i } ⊢  { _ r S }  
  		    _add { r S } ⊢ { r _ }
					∎ { { h v } r }
  	  § f◂◂F { v l }
				_hp.ini {} ⊢ h
				i◂◂F { { h v %[ 0r ] } l } ⊢ { { h v } r }
				_sub_im◂◂8r r ⊢ r 
				_hp.ini {} ⊢ ha 
				$.[ k' . { _hp◂k' _hp◂(_arr◂k') } ] { h ha } ⊢ { _ ha }
				_hp.to { r ha } ⊢ a 
				∎ { v a }
			∎∎
		§ f # l 
			map_l.f◂◂F { {} l } ⊢ { {} a }
			∎ a
		∎∎
	§ of_lst = of_lst.f
  § sum_i # { m i }
    _add { m i } ⊢ { m _ }
    ∎ m 
  § sum = itr_r◂◂sum_i
  § rpc_lc = '[ _[] : b',k',t' . (lc◂b'◂k'◂t')→{ (lc◂b'◂k'◂t') (lc◂b'◂k'◂t') } ]
  § lc =|
  ∎∎ 
§§ _s8 = _arr.s8
§ _arr_len = _arr.len
§ _alc_i = _arr.i 
§ _alc_o = _arr.o
¶ _p64 = _arr_ref
§§ _ref 
  ¶ t k' 
    ∐ t : _p64◂k'
  ¶ lc t',k' 
    ∐ lc : { _hp◂t' _hp◂k' _r64 } 
	§ t_o # t◂a 
		_hp.of a ⊢ { r ha }
		_hp.ini {} ⊢ h 
		$.[ k' . { _hp◂(_p64◂k') _hp◂k' } ] { ha h } ⊢ {  _ h }
		∎ { h r }
	§ t_i # { h r } 
		_hp.ini {} ⊢ ha 
		$.[ k' . { _hp◂(_p64◂k') _hp◂k' } ] { ha h } ⊢ { ha _ }
		_hp.to { r ha } ⊢ a
		∎ t◂a
  § alc_T◂◂N ## {} 
    alc_rcd◂◂(_ct.op2.add◂◂{ N 1r }) {} ⊢|
  § free_T◂◂N ## r
    free_rcd◂◂(_ct.op2.add◂◂{ N 1r }) r ⊢|
  § alc ## h 
   _cnc_siz◂◂alc_T { h {} } ⊢|
  § free = _cnc_siz◂◂free_T
  
  § dec0 { h r }
    !^ r ⊢ *r,c,b 
      ` mov rdi,QWORD [rax] 
			`	mov rsi,0x0001_0000_0000_0000
      ` sub rdi,rsi 
      `	jc err_dyn_rpc 
      ` mov QWORD [rax],rdi 
      ` xor rsi,rsi
      ` btr rdi,31 
      ` setc sil
      //
    ∎ { { h r } c b }
  § dec # t
    t_o t ⊢ { h r }
    dec0 { h r } ⊢ { { h r } c b }
    t_i { h r } ⊢ t 
    ∎ { t c b }
  § inc # t
    t_o t ⊢ { h r }
    !^ r ⊢ *r 
			`	call inc_p 
			//
    t_i { h r } ⊢ t 
    ∎ t
  § mov # t
    t_o t ⊢ { h r }
    $ r ⊢ r,r0 
    _add_im◂◂8r r0 ⊢ r0 
    _cnc_lod_hp { r0 h } ⊢ { _ h k } 
		t_i { h r } ⊢ t
    ∎ { t k }
  § lod_hd ## t
    t_o t ⊢ { h r }
    !^ r ⊢ *r,s 
      ` mov rdi,QWORD [rax]
      //
    t_i { h r } ⊢ t 
    ∎ { t s }
  § o t
    t_o t ⊢ { h r }
    !^ r ⊢ *r,c 
      `	xor rdi,rdi 
      ` bts QWORD [rax],31 
			`	setc dil 
      //
    ∐ c'=0r 
			$ r ⊢ r,r0 
	    _add_im◂◂8r r0 ⊢ r0 
	    _cnc_lod_hp { r0 h } ⊢ { _ h k }
	    '[ _hp.ini : . {} → _hp◂{} ] {} ⊢ ht 
	    ∎ { lc◂{ ht h r } k } 
		∐.
			_ap.emt h ⊢ h 
			∎|
  § i { lc◂{ ht h r } k }
    $.[ . _hp◂{} ] ht ⊢ ht 
    _eq_hp { k h } ⊢ { k h } 
    $ r ⊢ r,r0 
    _add_im◂◂8r r0 ⊢ r0 
    _cnc_sto { r0 k } ⊢ _ 
    !^ r ⊢ *r 
      ` btr QWORD [rax],31
      //
    t_i { h r } ⊢ t 
    ∎ t
  § chk # t
    t_o t ⊢ { h r }
    !^ r ⊢ *r,c 
      ` xor rdi,rdi 
      ` bt QWORD [rax],31
      ` setc dil 
      //
    t_i { h r } ⊢ t 
    ∎ { t c } 
  § f◂◂F { v p }
    $ p ⊢ t
    t_o t ⊢ { h r }
    !^ r ⊢ *r 
      ` bts QWORD [rax],31 
      ` jc err_ref_f
      //
    $ r ⊢ r,r0 
    _add_im◂◂8r r0 ⊢ r0 
    _cnc_lod_hp { r0 h } ⊢ { r0 h k }
    F { v k } ⊢ { w k }
    _eq_hp { k h } ⊢ { k h } 
    _cnc_sto { r0 k } ⊢ _ 
    !^ r ⊢ *r 
      ` btr QWORD [rax],31
      //
    t_i { h r } ⊢ t 
    ∎ { w t }

  § f_if◂◂{ F G } { v p }
    $ p ⊢ t
    t_o t ⊢ { h r }
    !^ r ⊢ *r,c 
      ` xor rdi,rdi 
      ` bts QWORD [rax],31 
      ` setc dil 
      //
    ∐ c'=0r . 
      $ c ⊢ _ 
			$ r ⊢ r,r0 
    	_add_im◂◂8r r0 ⊢ r0 
      _cnc_lod_hp { r0 h } ⊢ { r0 h k }
      F { v k } ⊢ { w k }
      _eq_hp { k h } ⊢ { k h } 
      _cnc_sto { r0 k } ⊢ _ 
      !^ r ⊢ *r 
        ` btr QWORD [rax],31
        //
	    t_i { h r } ⊢ t 
      ∎ { w t }
		∐. .
			$ c ⊢ _ 
	    t_i { h r } ⊢ t 
			G { v t } ⊢|
  § f_ctr◂◂{ C F } # { v p }
    $ p ⊢ t
    t_o t ⊢ { h r }
    !^ r ⊢ *r 
      `	bts QWORD [rax],31
			` jc err_ref_f
      //
    $ r ⊢ r,r0 
    _add_im◂◂8r r0 ⊢ r0 
    _hp.ini_ct◂◂C {} ⊢ hC 
    _cnc_lod_ctr◂◂C r0 ⊢ { r0 k }  
    _hp.ini {} ⊢ hk 
    $.[ x',y',z' . { _hp◂(_ctr_rev◂x'◂{ y' z' }) _hp◂x' y' _hp◂y' } ] { hC h k hk } ⊢ { _ h k hk } 
    F { v k } ⊢ { w k }
    _eq_hp { k hk } ⊢ { k _ } 
    _cnc_sto_ctr◂◂C { r0 k } ⊢ _ 
    !^ r ⊢ *r 
      ` btr QWORD [rax],31
      //
    t_i { h r } ⊢ t 
    ∎ { w t }
  § of p 
    $ p ⊢ t
    t_o t ⊢ { h r }
    !^ r ⊢ *r,c 
      ` mov rsi,QWORD [rax]
			`	mov rdx,0x0001_0000_0000_0000
			`	sub rsi,rdx
      `	jc err_dyn_rpc 
      ` mov rdi,rsi 
      ` bts rsi,31 
      ` jc err_ref_f
      ` mov QWORD [rax],rsi
      //
    ∐ c'=0r . 
      $ c ⊢ _ 
      $ r ⊢ r,r0 
      _add_im◂◂8r r0 ⊢ r0 
      _cnc_lod_hp { r0 h } ⊢ { _ h k }
      free { h r } ⊢ {}
      ∎ k
    ∐. .
      $ r ⊢ r,r0 
      _add_im◂◂8r r0 ⊢ r0 
      _cnc_lod_hp { r0 h } ⊢ { r0 h k }
      $ k ⊢ k,k0 
      _eq_hp { k h } ⊢ { k h } 
      _cnc_sto { r0 k } ⊢ _ 
      !^ r ⊢ *r 
        ` btr QWORD [rax],31
        //
      ∎ k0
  § to◂◂{ F0 F1 } { lc◂{ ht h r } k }
    $.[ . _hp◂{} ] ht ⊢ ht 
    !^ r ⊢ *r,c 
      ` mov rdi,QWORD [rax]
      ` btr rdi,31
			`	mov rsi,0x0001_0000_0000_0000
			`	sub rdi,rsi
      //
    ∐ c'=0r 
      $ c ⊢ _ 
      free { h r } ⊢ {}
      F0 k ⊢| 
    ∐. .
      $ c ⊢ _ 
      F1 k ⊢ { k k0 }
      _eq_hp { k0 h } ⊢ { k0 h } 
      $ r ⊢ r,r0 
      _add_im◂◂8r r0 ⊢ r0 
      _cnc_sto { r0 k0 } ⊢ _
      !^ r ⊢ *r 
				`	mov rdi,rax 
				`	call dec_p 
				` btr QWORD [rdi],31
        //
      ∎ k
  § to_i_F # k 
    ∎ { {} k }
  § to_i = to◂◂{ _dlt to_i_F } 

  § to_o = to◂◂{ _id _rpc } 
	§ lod_F # { {} k } 
    $ k ⊢ k,k0 
    ∎ { k0 k } 
  § lod # p 
    f◂◂lod_F { {} p } ⊢ { k p }
    ∎ { p k }
  § l = lod 
	§ lod_ctr◂◂C # p 
    f_ctr◂◂{ C lod_F } { {} p } ⊢ { k p }
    ∎ { p k }
  § l_ctr = lod_ctr 
  § u_F # { s _ } 
    ∎ { {} s } 
  § u # { p s }
    f◂◂u_F { s p } ⊢ { {} p } 
    ∎ p 
  § x_F # { a b } 
    ∎ { b a }
  § x = f◂◂x_F
  § mk # k 
    _hp.mk k ⊢ { k h }
    $ h ⊢ h,h0 
    alc h0 ⊢ r 
    $ r ⊢ r,r0 
    _add_im◂◂8r r0 ⊢ r0 
    _cnc_sto { r0 k } ⊢ _ 
    t_i { h r } ⊢ t 
    ∎ t
  § new = mk
  § n # {} 
    _hp.ini {} ⊢ h 
    $ h ⊢ h,h0 
    alc h0 ⊢ r 
    !^ r ⊢ *r 
      ` mov rdi,0x0001_0000_8000_0000 
      ` mov QWORD [rax],rdi
      //
    '[ _hp.ini : . {} → _hp◂{} ] {} ⊢ ht 
    ∎ lc◂{ ht h r } 
  § lc_rpc # lc◂{ ht h r } 
    !^ r ⊢ *r 
      ` mov rdi,QWORD [rax] 
      `	mov rsi,0x0001_0000_0000_0000
			` add rdi,rsi
      `	jc err_dyn_rpc 
			` mov QWORD [rax],rdi 
      //
    $ h ⊢ h,h0 
    $ r ⊢ r,r0 
    t_i { h0 r0 } ⊢ t 
		∎ { lc◂{ ht h r } t }
  § eq # { t0 t1 }
    t_o t0 ⊢ { h0 r0 } 
    t_o t1 ⊢ { h1 r1 } 
    $.[ k' . { _hp◂k' _hp◂k' } ] { h0 h1 } ⊢ { h0 h1 }
    _b_eq { r0 r1 } ⊢ { r0 r1 b }
		t_i { h0 r0 } ⊢ t0
		t_i { h1 r1 } ⊢ t1 
		∎ { { t0 t1 } b } 
  § eq_lc # { lc◂{ ht0 h0 r0 } t }
    t_o t ⊢ { h1 r1 } 
		$.[ k' . { _hp◂k' _hp◂k' } ] { h0 h1 } ⊢ { h0 h1 }
    _b_eq { r0 r1 } ⊢ { r0 r1 b }
		t_i { h1 r1 } ⊢ t1
    ∎ { { lc◂{ ht0 h0 r0 } t1 } b } 
  § dlt p 
    dec p ⊢ { p c b }
    ∐ c'=0r . 
      $ c ⊢ _ 
      ∐ b'=0r .
        mov p ⊢ { p _ }
    		t_o p ⊢ { h r }
        free { h r } ⊢|
      ∐. .
		    t_o p ⊢ { h r }
        free { h r } ⊢|
    ∐. .
	    t_o p ⊢ { h r }
      $ h ⊢ _ 
      $ r ⊢ _ 
      ∎ {}
  § dlt_lc lc◂{ ht h r }
    $.[ . _hp◂{} ] ht ⊢ ht  
    dec0 { h r } ⊢ { { h r } c b }
    ∐ c'=0r . 
      $ c ⊢ _ 
      free { h r } ⊢|
    ∐. .
      $ h ⊢ _ 
      $ r ⊢ _ 
      ∎ {}
  § rpc # p 
    inc p ⊢ p 
    t_o p ⊢ { h r }
    $ h ⊢ h,h0 
    $ r ⊢ r,r0 
    t_i { h r } ⊢ t 
    t_i { h0 r0 } ⊢ t0 
    ∎ { t t0 }
  § rpc_lc = '[ _[] : t',k' . lc◂t'◂k'→{ lc◂t'◂k' lc◂t'◂k' } ]
  §§ Lc   
    § o◂◂T # t
      t_o t ⊢ { hk r }
      !^ r ⊢ *r 
        ` mov rdi,QWORD [rax]
        ` bts rdi,31
        ` jc err_ref_o
        ` mov QWORD [rax],rdi
        //
      $ r ⊢ r,r0 
      _add_im◂◂8r r0 ⊢ r0 
      _lc.o◂◂T { hk r0 } ⊢ { hk _ ht a }
      ∎ { lc◂{ ht hk r } a }
    § i◂◂T # { lc◂{ ht hk r } k }
      $.[ a',b' . { _hp◂{ a' b' } a' } ] { ht k } ⊢ { ht k }
      $ r ⊢ r,r0 
      _add_im◂◂8r r0 ⊢ r0 
      _lc.i◂◂T { hk r0 ht k } ⊢ { hk _ }
      !^ r ⊢ *r 
      ` btr QWORD [rax],31
      //
     	t_i { hk r } ⊢|
    § l◂◂T t
      t_o t ⊢ { hk r } 
			!^ r ⊢ *r 
        ` mov rdi,QWORD [rax]
        ` bts rdi,31
        ` jc err_ref_f
        ` mov QWORD [rax],rdi
        //
      $ r ⊢ r,r0 
      _add_im◂◂8r r0 ⊢ r0 
      _lc.o◂◂T { hk r0 } ⊢ { hk r0 ht a }
      $.[ a',b' . { _hp◂{ a' b' } a' } ] { ht a } ⊢ { ht a }
      $ a ⊢ a,a0 
      _lc.i◂◂T { hk r0 ht a } ⊢ { hk _ }
      !^ r ⊢ *r 
        ` btr QWORD [rax],31
      //
      t_i { hk r } ⊢ t 
			∎ { t a0 }
    § dlt = '[ _[] : t',r' . lc◂t'◂r'→{} ]
    ∎∎ 

  § lc =| 
  § t =| 
  ∎∎
¶ _ref = _ref.t 

§ _shr # { r c } 
  !^ r,c ⊢ r,c
    ` mov rcx,rdi 
    ` shr rax,cl 
    //
  ∎ { r c }
§ _shl # { r c } 
  !^ r,c ⊢ r,c
    ` mov rcx,rdi 
    ` shl rax,cl 
    //
  ∎ { r c }
§ _info # {} 
  !^ _ ⊢ {} 
    ` call info 
    //
  ∎ {}
§ _bsr # x 
	$ x ⊢ x,x0 
	!^ x0 ⊢ r 
    ` bsr rax,rax
    //
	∎ { x r } 
§ _bsf # x 
	$ x ⊢ x,x0 
	!^ x0 ⊢ r 
    ` bsf rax,rax
    //
	∎ { x r }

§ _st_s8_len # s 
  _id.st_s8 s ⊢ s 
  _hp.of s ⊢ { r h } 
  !^ r ⊢ *r,l 
		` mov edi,DWORD [rax]
    //
  _hp.to { r h } ⊢ s 
  ∎ { s l }


§ emt_cst◂◂S {} 
  _st◂◂S {} ⊢ b 
  _id.st_s8 b ⊢ b 
  _hp.of b ⊢ { r h }
  !^ r ⊢ *r 
    ` mov rdi,rax 
		` mov esi,DWORD [rax]
    ` lea rdi,[rax+8] 
    (C_CALL◂◂"fw") 
    //
  _hp.to { r h } ⊢ _ 
  ∎ {} 
§ _emt_s8_to_im◂◂F s 
  _id.s8 s ⊢ s 
  _st◂◂F {} ⊢ f 
  _hp.of f ⊢ { r0 _ }
  _hp.rpc s ⊢ { s r1 } 
  !^ r0,r1 ⊢ *m0,*m1
    ` mov rdx,QWORD [rdi]
    ` lea rsi,[rdi+8]
    ` lea rdi,[rax+8]
    (C_CALL_SF◂◂"emt_s8_to") 
    ` cmp rax,-1
		`	jz err_cls
		//
  $ { m0 m1 } ⊢ _ 
  ∎ s

§ _getchar {} 
  emt_cst◂◂"_getchar:" {} ⊢ {} 
  !^ _ ⊢ c 
    `	xor rax,rax 
		(C_CALL_SF◂◂"getchar") 
		//
  ∎ c
§ _in_fn f 
  _hp.rpc f ⊢ { f r } 
  !^ r ⊢ m 
    ` lea rdi,[rax+8]
    ` call in_fn 
    // 
  _hp.ini {} ⊢ h 
  _id.hp.s8 h ⊢ h 
  _hp.to { m h } ⊢ s 
  ∎ { f s }
§ _cd c 
  _hp.rpc c ⊢ { c r } 
  !^ r ⊢ *m 
    ` lea rdi,[rax+8]
    (C_CALL◂◂"system") 
    // 
  $ m ⊢ _ 
  ∎ c

§ _min # { x y } 
  !^ x,y ⊢ r,*d 
    ` cmp rax,rdi 
    ` cmovg rax,rdi 
    //
  $ d ⊢ _ 
  ∎ r
§ _max # { x y } 
  !^ x,y ⊢ r,*d 
    ` cmp rax,rdi 
    ` cmovl rax,rdi 
    //
  $ d ⊢ _ 
  ∎ r
§ _lod_q = _arr.l 

§ _ila1◂◂S # x 
  !^ x ⊢ x 
    S // 
  ∎ x 

§ _fail_F # { s i } 
  ∎ { s i ‹› }
§ _fail = _grm◂◂_fail_F
§ _scf_d_F { s i }
  _id.s8 s ⊢ s 
  _hp.rpc s ⊢ { s r } 
	_arr.len s ⊢ { s l }
  !^ i,l,r ⊢ i,j,x 
		`	lea rsi,[rsi+8]
  	`	mov r8,10 
  	`	call scf_F
  	`	mov rdi,r10
    //
  ∐ j'=0r .
    ∎ { s i ‹ x › }
  ∐. .
    ∎ { s i ‹› }
§ _scf_d = _grm◂◂_scf_d_F 

§ _scf_x_F { s i }
  _id.s8 s ⊢ s 
	_arr.len s ⊢ { s l }
  _hp.rpc s ⊢ { s r } 
  !^ i,l,r ⊢ i,j,x 
		`	lea rsi,[rsi+8]
  	`	mov r8,16 
  	`	call scf_F
 		`	mov rdi,r10
    //
  ∐ j'=0r .
    ∎ { s i ‹ x › }
  ∐. .
    ∎ { s i ‹› }
§ _scf_x = _grm◂◂_scf_x_F 

§ _byt_F { s i }
  _id.s8 s ⊢ s 
  _hp.rpc s ⊢ { s r } 
  !^ i,r ⊢ i,j,x 
    ` lea rsi,[rdi+8]
    `	mov edx,DWORD [rdi]
    ` mov rcx,1 
    ` cmp rax,rdx 
    ` jge .F0 
    ` mov rcx,0 
    ` movzx rsi,BYTE [rdi+8+rax]
    ` add rax,1
    `.F0:
    ` mov rdi,rcx
    //
  ∐ j'=0r .
    ∎ { s i ‹ x › }
  ∐. .
    ∎ { s i ‹› }
§ _byt = _grm◂◂_byt_F
§ _line = _[ 0x000200000000000dr ]
§ _line_F { s i } 
  _id.s8 s ⊢ s 
  _s8.len s ⊢ { s l } 
  _hp.rpc s ⊢ { s r }   
  !^ i,r,l ⊢ i,*r,*l 
    ` jmp .L1 
    `.L0:
	  ` add rax,1 
    `.L1:						
	  ` cmp rax,rsi
	  ` jge .L2
	  ` movzx rbx,BYTE [rdi+8+rax]
	  ` cmp rbx,9 
	  ` jz .L0
	  ` cmp rbx,32 
	  ` jz .L0
    `.L2:
    //
	$ { r l } ⊢ _
  ∎ { s i ‹ {} › }
¶§ _line = _grm◂◂_line_F
--§ _synt = _[ 0x0002000000000010r ]
§ _synt = _[ 0x000200000000000er ]
§ _synt_F { s i } 
  _id.s8 s ⊢ s 
  _s8.len s ⊢ { s l } 
  _hp.rpc s ⊢ { s r }   
  !^ i,r,l ⊢ i 
    ` jmp .L1 
    `.L0:
	  ` add rax,1 
    `.L1:						
	  ` cmp rax,rsi
	  ` jge .L2
	  ` movzx rbx,BYTE [rdi+8+rax]
	  ` cmp rbx,9 
	  ` jz .L0
    ` cmp rbx,10
    ` jz .L0
	  ` cmp rbx,32 
	  ` jz .L0
    `.L2:
    //
  ∎ { s i ‹ {} › }
¶§ _synt = _grm◂◂_synt_F
§ psc_F_0 { s b i }
  _s8.len s ⊢ { s l } 
  _hp.rpc s ⊢ { s rs }
  !^ i,rs,b,l ⊢ i,x 
    ` lea rdi,[rdi+8+rax]
		` mov ecx,DWORD [rsi] 
    `	add rsi,8  
    ` mov rbx,rax
    ` add rax,rcx 
    ` cmp rax,rdx
    ` jg .L0 
    ` cld 
    ` repe cmpsb 
    ` jnz .L0 
    ` mov rdi,1 
    ` jmp .L1
    `.L0:
    ` mov rax,rbx 
    ` mov rdi,0
    `.L1:
    //
  ∐ x'=0r
    ∎ { s i ‹› }
  ∐. .
    ∎ { s i ‹ {} › }
§ psc_F◂◂S # { s i }
  _st◂◂S {} ⊢ b 
  _hp.of b ⊢ { rb _ }
  psc_F_0 { s rb i } ⊢| 
§ _psc = _[ 0x000200000000000fr ]
¶§ _psc = \\S . _grm◂◂(psc_F◂◂S)
§§ _emt_im 
  ¶¶ f0 a' : a'→→({}→{}) 
  § f◂◂C # {} 
    emt_cst◂◂"emt_im:" {} ⊢ {} 
    f0◂◂C {} ⊢ {}
    emt_cst◂◂"\n" {} ⊢ {}
    ∎ {}
  § unt◂◂{} # {} 
    emt_cst◂◂"{}: {}" {} ⊢ {} 
    ∎ {}
  ¶§ f0 = unt
  § r64◂◂X # {} 
    emt_cst◂◂(_ccs◂◂{ "0x" _ccs◂◂{ (_ct.pf_x◂◂X) "r: _r64" } }) {} ⊢ {} 
    ∎ {}
  ¶§ f0 = r64
  § s8◂◂S # {} 
    emt_cst◂◂(_ccs◂◂{ "\"" _ccs◂◂{ S "\" : _s8" } }) {} ⊢ {} 
    ∎ {}  
  ¶§ f0 = s8
  ∎∎
§§ _emt 
  § f0 = _ap.emt 
  § f # a 
    emt_cst◂◂"emt:" {} ⊢ {} 
    f0 a ⊢ a
    emt_cst◂◂"\n" {} ⊢ {}
    ∎ a 
  § mo_e◂◂{ S C } # k 
    emt_cst◂◂(_ccs◂◂{ S "◂" }) {} ⊢ {} 
    f0 k ⊢ k 
    _ctr◂◂C k ⊢ k 
    ∎ k 
  § mo◂◂{ S C } = _moo◂◂(mo_e◂◂{ S C })
  ¶§ _ap.emt_mo = mo 
  ¶¶ f_rcd r' : _rcd◂r'→_rcd◂r' 
  § rcd ## r 
    emt_cst◂◂"{" {} ⊢ {}
    f_rcd r ⊢|
  § unt ## {} 
    emt_cst◂◂"{}" {} ⊢ {}
    ∎ {}
  § rcd_unt ## {} 
    emt_cst◂◂" }" {} ⊢ {}
    ∎ {}
  § prd ## p 
    _ipr p ⊢ { h t } 
    emt_cst◂◂" " {} ⊢ {} 
    f0 h ⊢ h 
    f_rcd t ⊢ t 
    _prd { h t } ⊢| 
  ¶§ f_rcd = rcd_unt 
  ¶§ f_rcd = prd 
  ¶§ f0 = rcd  
  § r640 x 
    !^ x ⊢ *x 
      ` sub rsp,32 
      ` mov rdi,rsp 
      ` mov BYTE [rdi],'0'
      ` mov BYTE [rdi+1],'x' 
      ` add rdi,2 
      ` call pf_x 
      ` mov BYTE [rdi+rax],'r' 
      ` sub rdi,2  
      ` add rax,3 
      ` mov rsi,rax  
      (C_CALL◂◂"fw")
      ` add rsp,32 
      //
    ∎ x
  § r64 # x 
    r640 x ⊢ x 
    emt_cst◂◂" : _r64" {} ⊢ {}
    ∎ x 
  ¶§ f0 = r64
  § s8 s 
    emt_cst◂◂"\"" {} ⊢ {} 
    $.[ t' . _arr0◂t'◂_r8 ] s ⊢ s
    _hp.of s ⊢ { r h }
    !^ r ⊢ *r 
      `	mov esi,DWORD [rax]
      ` lea rdi,[rax+8]
      (C_CALL◂◂"fw") 
      //
    _hp.to { r h } ⊢ s 
    emt_cst◂◂"\" : _s8" {} ⊢ {} 
    ∎ s   
  ¶§ f0 = s8
  § @.arr_i { { a l } i } 
    ∐ l'<>i' .
      _alc_o { a i } ⊢ { a k }
      f0 k ⊢ k  
      emt_cst◂◂" " {} ⊢ {} 
      _alc_i { a k } ⊢ { a i } 
      _inc i ⊢ i 
      arr_i { { a l } i } ⊢| 
    ∐. .
      emt_cst◂◂"}" {} ⊢ {} 
      ∎ a 
  § arr ## a 
    _arr.len a ⊢ { a l }
    emt_cst◂◂"{+ " {} ⊢ {} 
    arr_i { { a l } %[ 0r ] } ⊢| 
  ¶§ f0 = arr 
  § ref_i ## { {} k }
    f0 k ⊢ k 
    ∎ { {} k }
  § ref ## p
    $.[ k' . _ref.t◂k' ] p ⊢ p
    emt_cst◂◂"*[ " {} ⊢ {} 
    --_ref.lod_hd p ⊢ { p h } 
    _ref.t_o p ⊢ { hp rp } 
		!^ rp ⊢ *rp,b 
      ` xor rdi,rdi 
      ` bt QWORD [rax],31 
      ` setc dil
      //
    r640 rp ⊢ rp
    --∐ b'<>0r 
			_ref.t_i { hp rp } ⊢ p
      _ref.chk p ⊢ { p c }
			-\
			∐ c'=0r 
				_ref.o p ⊢ { p k } 
				_emt0 k ⊢ k 
				_ref.i { p k } ⊢ p 
				emt_cst◂◂" .. ]" {} ⊢ {} 
  	    ∎ p
			∐.
			-/
				emt_cst◂◂" | @ ]" {} ⊢ {} 
  	    ∎ p
    -\
		∐. .
      emt_cst◂◂" | " {} ⊢ {} 
      --_ref.f◂◂ref_i { {} p } ⊢ { {} p } 
			!^ rp ⊢ *rp 
      	` btr QWORD [rax],31
      	//
			_ref.t_i { hp rp } ⊢ p
      emt_cst◂◂" ]" {} ⊢ {} 
      ∎ p
  -/
	¶§ f0 = ref
  ¶§ f0 = _arr.emt_lc
  § lst l 
    $ l ⊢ 
    ∐ _cns◂d . 
      emt_cst◂◂"_cns◂" {} ⊢ {} 
      f0 d ⊢ d 
      ∎ _cns◂d 
    ∐. _nil◂d .
      emt_cst◂◂"_nil◂" {} ⊢ {}
      f0 d ⊢ d 
      ∎ _nil◂d 
  ¶§ f0 = lst
  § opn o  
		$ o ⊢ 
		∐ _some◂a .
<<<<<<< HEAD
			emt_cst◂◂"‹ " {} ⊢ {} 
			f0 a ⊢ a 
			emt_cst◂◂" ›" {} ⊢ {} 
			∎ ‹ a › 
		∐. _none◂{} . 
			emt_cst◂◂"‹›" {} ⊢ {} 
			∎ ‹› 
	¶§ f0 = opn 
	§ dft ## x 
    emt_cst◂◂"?" {} ⊢ {} 
=======
			cst◂◂"‹ " {} ⊢ {} 
			f0 a ⊢ a 
			cst◂◂" ›" {} ⊢ {} 
			∎ ‹ a › 
		∐. _none◂{} . 
			cst◂◂"‹›" {} ⊢ {} 
			∎ ‹› 
	¶§ f0 = opn 
	§ dft # x 
    cst◂◂"?" {} ⊢ {} 
>>>>>>> e99538e0eafc51efb79e811cb3fb8eaca8f20be8
    ∎ x 
  § hp ## h 
    _id.hp h ⊢ h 
    emt_cst◂◂"?hp" {} ⊢ {} 
    ∎ h  
  ¶§ f0 = hp 
  ¶§ f0 = _ap.emt_adt
  ¶§ f0 = dft
  ∎∎  
§ _emt = _emt.f
§ _emt_im = _emt_im.f
§ _emt0 = _emt.f0
§ c2 = (\{ {} {} } . {}) 
§§ _dlt 
  § f = _ap.dlt 
  ¶§ f = _gl.dlt
  ¶§ f = _gl.dlt_lc
  ¶§ f = _gl.dlt_I
  § r64 = _[ 15r ]  
  ¶§ f = r64
  § hp = _[ 18r ] 
  ¶§ f = hp
  ¶¶ f_rcd r' : _rcd◂r' → {} 
  § unt = _id 
  ¶§ f_rcd = unt 
  § p0 = _seq◂◂{ _ctr◂◂c0 f_rcd }
  § prd = _seq◂◂{ _ipr _seq◂◂{ _ctr◂◂c1 _seq◂◂{ _id_par◂◂f _seq◂◂{ _ctr◂◂c0 f_rcd } } } }
  ¶§ f_rcd = prd 
  ¶§ f = f_rcd
<<<<<<< HEAD
    
  ¶§ f = _arr.dlt
  ¶§ f = _arr.std.dlt_lc
  ¶§ f = _arr.x.dlt_lc
  ¶§ f = '[ _[] : k',t' . (_arr.lc◂{}◂k'◂t')→{} ]

  ¶§ f = _arr.Lc.dlt
  § st = _seq◂◂{ _id.st_s8 _seq◂◂{ _hp.of _seq◂◂{ _par◂◂{ r64 hp } _ctr◂◂c2 } } }
  ¶§ f = st

  ¶§ f = _ref.dlt
  ¶§ f = _ref.dlt_lc 
  ¶§ f = _ref.Lc.dlt
  
	§ adt d 
		_dlt_adt d ⊢|
=======
  § s8 s 
    _id.s8 s ⊢ s 
    _hp.of s ⊢ { r h } 
    hp h ⊢ {}
    !^ r ⊢ {} 
      ` mov rdi,rax
      ` call free_opq
      // 
    ∎ {}
  ¶§ f = s8
  § st = _seq◂◂{ _id.st_s8 _seq◂◂{ _hp.of _seq◂◂{ _par◂◂{ r64 hp } _ctr◂◂c2 } } }
  ¶§ f = st
  §: arr0 t',k' = { _hp◂(_arr0◂t'◂k') k' }
  § @.arr_i { { h r } i } 
    ∐ i'<>0r .
      _ap.cnc_lod r ⊢ { r q } 
      arr0 { h q } ⊢ { h q } 
      f q ⊢ {} 
      _dec i ⊢ i
      arr_i { { h r } i } ⊢|
    ∐. .
      ∎ {} 
  § arr a 
    _id.arr a ⊢ a 
    _arr_len a ⊢ { a l } 
    _hp.of a ⊢ { r h } 
    $ r ⊢ r,r0 
    _add_im◂◂8r r0 ⊢ r0 
    arr_i { { h r0 } l } ⊢ {}
    !^ r ⊢ {} 
      ` mov rdi,rax
      ` call free_opq
      // 
    ∎ {}
  ¶§ f = arr
  § arr_x a 
    _id.arr_x a ⊢ a 
    _arr_len a ⊢ { a l } 
    _hp.of a ⊢ { r h } 
    $ r ⊢ r,r0 
    _add_im◂◂8r r0 ⊢ r0 
    arr_i { { h r0 } l } ⊢ {}
    !^ r ⊢ {} 
      ` mov rdi,rax
      ` call free_opq
      // 
    ∎ {} 
  ¶§ f = arr_x
  § arr_lc = _[ 67r ]
  ¶§ f = arr_lc
  § Clr = _seq◂◂{ _id.Clr _seq◂◂{ _hp.of _seq◂◂{ _id_par◂◂hp _seq◂◂{ _ctr◂◂c0 r64 } } } }
  ¶§ f = Clr 
  § Clr_lc = _seq◂◂{ _clc_d Clr }
  ¶§ f = Clr_lc
  §: pt0 k' = { _hp◂k' k' }
  §: pt1 k' = { _hp◂(_pt◂k') _hp◂k' }
  § pt_C◂◂C # { h r } 
    !^ r ⊢ {}
      "\tFREE_RCD (" (_ct.pf_d◂◂C) "+3),rax\n" // 
    ∎ {}  
  § pt_T { h r }
    !^ r ⊢ *r,c 
      ` xor rdi,rdi 
      ` bt QWORD [rax+8],63 
      ` rcl rdi,1 
      //
    ∐ c'=0r .
      $ c ⊢ _ 
      $ r ⊢ r,r0 
      _add_im◂◂24r r0 ⊢ r0 
      _ap.cnc_lod r0 ⊢ { _ k } 
      pt0 { h k } ⊢ { h _ }
      ∎ { h r } 
    ∐. .
      ∎ { h r }
  § pt p 
    _id.pt p ⊢ p 
    _hp.of p ⊢ { r h } 
    !^ r ⊢ *r,c 
      ` mov rdi,QWORD [rax+16] 
      ` sub rdi,1 
      ` mov QWORD [rax+16],rdi 
      //
    ∐ c'=0r . 
      $ c ⊢ _ 
      _hp.ini {} ⊢ hk 
      pt1 { h hk } ⊢ { _ h } 
      pt_T { h r } ⊢ { h r } 
      _cnc_siz◂◂pt_C { h r } ⊢|
    ∐. .
      ∎ {}
  ¶§ f = pt
  § lst l 
    $ l ⊢ 
    ∐ _cns◂{ a l } .
      f a ⊢| 
    ∐. _nil◂{} . 
      ∎ {}
  ¶§ f = lst
  § opn o 
    $ o ⊢ 
    ∐ _some◂a . 
      f a ⊢| 
    ∐. _none◂{} . 
      ∎ {}
  ¶§ f = opn
  § adt = _ap.dlt_adt
>>>>>>> e99538e0eafc51efb79e811cb3fb8eaca8f20be8
  ¶§ f = adt 
  ∎∎ 
<<<<<<< HEAD
-\
=======
>>>>>>> e99538e0eafc51efb79e811cb3fb8eaca8f20be8
§§ _eq 
  § @.arr_i { { a0 a1 } l } 
    ∐ l'<>0r .
      _dec l ⊢ l 
      $ l ⊢ l,l0 
      _alc_o { a0 l } ⊢ { a0 k0 } 
      _alc_o { a1 l0 } ⊢ { a1 k1 } 
      _alc_i { a0 k0 } ⊢ { a0 l } 
      _alc_i { a1 k1 } ⊢ { a1 _ } 
      _dec l ⊢ l 
      arr_i { { a0 a1 } l } ⊢|
    ∐. .
      ∎ { a0 a1 %[ 1r ] }
  § arr { a0 a1 } 
<<<<<<< HEAD
    _arr.len a0 ⊢ { a0 l0 } 
    _arr.len a1 ⊢ { a1 l1 } 
=======
    _arr_len a0 ⊢ { a0 l0 } 
    _arr_len a1 ⊢ { a1 l1 } 
>>>>>>> e99538e0eafc51efb79e811cb3fb8eaca8f20be8
    ∐ l0'=l1' . 
      arr_i { { a0 a1 } l0 } ⊢| 
    ∐. .
      ∎ { a0 a1 %[ 0r ] }      
<<<<<<< HEAD
  ∎∎
-/

§: i0 k' = { k' _hp◂k' }
§ _mk_arr_F◂◂F = _arr.mk_F◂◂{ F alc _id.arr }
§ _mk_arr_x_F◂◂F = _arr.mk_F◂◂{ F _arr.alc_x _id.arr_x }
§ _mk_arr_cst◂◂P = _arr.mk_cst◂◂{ P alc _id.arr } 
§ _mk_arr_x_cst◂◂P = _arr.mk_cst◂◂{ P _arr.alc_x _id.arr_x }

§ _mk_arr = _arr.mk◂◂{ alc _id.arr }
§ _mk_arr_x = _arr.mk◂◂{ _arr.alc_x _id.arr_x }
§: i1 k' = { k' _hp◂(_arr◂k') }

§§ _lst 
	§ @.len0 { l i } 
		$ l ⊢ 
		∐ _cns◂{ a l } 
			_inc i ⊢ i
			len0 { l i } ⊢|
		∐. _nil◂{} 
			∎ i
	§ len # l 
		$ l ⊢ l,l0 
		len0 { l0 %[ 0r ] } ⊢ n 
		∎ { l n }
	∎∎
§§ _mk_stk
	§ alc◂◂F # { n b v } 
		!^ n,b ⊢ *n,*b,r 
    	` sub rsp,rdi 
			`	mov rsi,0x0001_0000_0000_0000 
			`	add rax,rsi
			` mov QWORD [rsp],rax
			` mov rsi,rsp 
    	//    
		$ r ⊢ r,rt 
		F { n v r } ⊢ d
  	!^ b,rt ⊢ *b,*rt 
    	` mov rsi,QWORD [rdi]
			`	shr rsi,32
			`	cmp rsi,0
			`	jne err_mk_stk
			` add rsp,rax 
    	//
  	$ b ⊢ _ 
  	∎ d  
	-\
	§ alc◂◂F # { n b v } 
		!^ n,b ⊢ *n,*b,r 
    	`	push rax
			`	xor rax,rax 
			(C_CALL◂◂"malloc ")
			`	mov rsi,0x0001_0000_0000_0000 
			`	pop rdi 
			`	add rdi,rsi
			` mov QWORD [rax],rdi
			` mov rsi,rax 
    	//    
		F { n v r } ⊢ d
  	
  	$ b ⊢ _ 
  	∎ d  
	-/
	§ f0◂◂F # { n { k p h } r }
		$ r ⊢ r,r0 
		_add_im◂◂8r r0 ⊢ r0 
	  $ n ⊢ n,n0
		_arr.mk_i { { k r0 h } n0 } ⊢ k 
		_hp.ini {} ⊢ ha 
		i1 { k ha } ⊢ { k ha } 
		_hp.to { r ha } ⊢ a
		F { { n k a } p } ⊢|
	§ f◂◂F # { { n k } p }
 		_hp.ini {} ⊢ h 
		i0 { k h } ⊢ { k h } 
		$ n ⊢ n,b 
		$ h ⊢ h,h0
		ofs_arr { h0 b } ⊢ b
		alc◂◂(f0◂◂F) { n b { k p h } } ⊢|
	§ f0_F◂◂{ F H } { n { v p h ha } r } 
		$ r ⊢ r,r0 
		_add_im◂◂8r r0 ⊢ r0 
	  $ n ⊢ n,n0
		_arr.mk_i_F◂◂H { { v r0 h } n0 } ⊢ v
		_hp.to { r ha } ⊢ a
		F { { n v a } p } ⊢|
	§ f_F◂◂{ F H } { { n v } p }
		_hp.ini_ct◂◂H {} ⊢ hF 
		_hp.ini {} ⊢ h 
		_hp.ini {} ⊢ ha
		$.[ k',v' . { _hp◂(v'→{ v' k' }) _hp◂k' _hp◂(_arr◂k') } ] { hF h ha } ⊢ { _ h ha }	
		$ n ⊢ n,b 
		$ h ⊢ h,h0
  	ofs_arr { h0 b } ⊢ b
		alc◂◂(f0_F◂◂{ F H }) { n b { v p h ha } } ⊢|
	§ f_nr_F◂◂{ F H } { { n v } p }
		_hp.ini_ct◂◂H {} ⊢ hF 
		_hp.ini {} ⊢ h 
		_hp.ini {} ⊢ ha
		$.[ k',v' . { _hp◂(v'→{ v' k' }) _hp◂k' _hp◂(_arr_nr◂k') } ] { hF h ha } ⊢ { _ h ha }	
		$ n ⊢ n,b 
		$ h ⊢ h,h0
  	ofs_arr { h0 b } ⊢ b
		alc◂◂(f0_F◂◂{ F H }) { n b { v p h ha } } ⊢|
	§§ lst 
  	§ @.i { { h s } l }
			$ l ⊢ 
			∐ _cns◂{ x l } . 
				_eq_hp { x h } ⊢ { x h } 
				_cnc_sto { s x } ⊢ s
  	    _cnc_add { s h } ⊢ { s h }
  	    i { { h s } l } ⊢| 
			∐. _nil◂{}
				∎ {}
		§ f0◂◂F # { n { l p h ha } r }
			$ r ⊢ r,r0 
			_add_im◂◂8r r0 ⊢ s 
			_hp.to { r ha } ⊢ a
			i { { h s } l } ⊢ {} 
			F { a p } ⊢|
		§ f◂◂F # { l p }
			_hp.ini {} ⊢ h 
  		_hp.ini {} ⊢ ha 
			$.[ k' . { _hp◂k' _hp◂(_arr◂k') } ] { h ha } ⊢ { h ha }
  		_lst.len l ⊢ { l n } 
			$ n ⊢ n,n0 
			$ h ⊢ h,h0
			ofs_arr { h0 n0 } ⊢ b
			alc◂◂(f0◂◂F) { n b { l p h ha } } ⊢|
		§ f_nr◂◂F # { l p }
			_hp.ini {} ⊢ h 
  		_hp.ini {} ⊢ ha 
			$.[ k' . { _hp◂k' _hp◂(_arr_nr◂k') } ] { h ha } ⊢ { h ha }
  		_lst.len l ⊢ { l n } 
			$ n ⊢ n,n0 
			$ h ⊢ h,h0
			ofs_arr { h0 n0 } ⊢ b
			alc◂◂(f0◂◂F) { n b { l p h ha } } ⊢|
			--∎|
		∎∎
	∎∎
§§ _mk_stk_lst = _mk_stk.lst 
§ _mk_stk = _mk_stk.f 
§ _mk_stk_F = _mk_stk.f_F 
§ _mk_stk_nr_F = _mk_stk.f_nr_F 
 
--_agl : { _ctr◂{ a' b' } a'→c' b'→c' }→→b'→c'
--_tj 
§ push_ra { h r l c }
  ∐ c'=0r . 
    $ c ⊢ _ 
    _inc l ⊢ b 
    _shl_im◂◂1r b ⊢ b
    ofs_arr { h b } ⊢ b
    !^ b,r ⊢ r,*z 
      ` mov rsi,rax 
		  (C_CALL◂◂"realloc")		
      `	mov rsi,QWORD [rax] 
	  	//
    $ z ⊢ _ 
    ∎ r
  ∐. .
    $ c ⊢ _
    ∎ r
§ _push { a v }
  _hp.ini {} ⊢ h
  $.[ k' . { k' _arr_x◂k' _hp◂k' } ] { a v h } ⊢ { a v h }
  _arr.len v ⊢ { v l } 
  _hp.of v ⊢ { r hv }
  ∐ l'<>0r .
    !^ r,l ⊢ *r,*l,c 
  		` lea rsi,[rdi+1]
      ` and rsi,rdi
      ` add QWORD [rax],1
	    //
	  $ l ⊢ l,l0 
    $ h ⊢ h,h0 
    push_ra { h0 r l0 c } ⊢ r 
    ofs_arr { h l } ⊢ b 
	  _add { b r } ⊢ { b r } 
    _cnc_sto { b a } ⊢ _
    _hp.to { r hv } ⊢ v 
    ∎ v
  ∐. .
    $ r ⊢ _ 
    _cnc_siz◂◂(\\C . _cst◂◂(_ct.op2.add◂◂{ 8r _ct.op2.imul◂◂{ 8r _ct.op2.add◂◂{ C C } } })) { h {} } ⊢ c 
    !^ c ⊢ r 
	  	` mov rsi,rax 
      `	mov rdi,1 
			(C_CALL◂◂"calloc")
      ` mov QWORD [rax],1
	  	//
    $ r ⊢ r,b 
    _add_im◂◂8r b ⊢ b 
    _cnc_sto { b a } ⊢ _
    _hp.to { r hv } ⊢ v 
    ∎ v
§ _base # {} 
  !^ _ ⊢ r 
    ` mov rax,ARR_X_UNT 
    // 
  _hp.ini {} ⊢ h
  $.[ k' . _hp◂(_arr_x◂k') ] h ⊢ h 
  _hp.to { r h } ⊢ v 
  ∎ v 
-\
§§ _grm 
	§ seq◂◂{ A < L } { { B I } r } 
		A { B I } ⊢ { B i o }
		$ o ⊢ 
		∐ _some◂a 
			seq◂◂L { { B I } r } 
		∐. _none◂{}
	∎∎
-/
§ _cmp_s8 = _arr.s8.cmp
§ _s8_len = _arr.s8.len
§ _mlc_s8 = _arr.s8.mlc
=======
  ∎∎
§ siz_arr◂◂C # { h l } 
  _imul_im◂◂C l ⊢ l 
  !^ l ⊢ b 
    ` lea rax,[8+8*rax]
    //
  ∎ { h b }
§ siz_arr = _cnc_siz◂◂siz_arr
§ alc◂◂C { h l }
  $ l ⊢ l,s 
  _imul_im◂◂C s ⊢ s 
  !^ l,s ⊢ *l,r
    ` push rax
    ` lea rdi,[8+8*rdi]
    ` mov rsi,1
    ` xor rax,rax 
    ` CALLOC_SF
    ` pop QWORD [rax]
    ` mov rdi,rax
    //
  ∎ { h { l r } }
§ alc = _cnc_siz◂◂alc
§§ _rpc 
  § f = _ap.rpc
  ¶¶ f_rcd r' : _rcd◂r' → { _rcd◂r' _rcd◂r' } 
  § unt0◂{} = { {} {} }
  ¶§ f_rcd = _ctr◂◂unt0 
  § prd0◂{ { h0 h1 } { t0 t1 } } = { { h0 t0 } { h1 t1 } }
  § prd = _seq◂◂{ _ipr _seq◂◂{ _par◂◂{ f f_rcd } _seq◂◂{ _ctr◂◂prd0 _par◂◂{ _prd _prd } } } }
  ¶§ f_rcd = prd 
  ¶§ f = f_rcd 
  §§ r64 
    § f0 = _ila.f◂◂{ _ila.S◂◂_ila.O _ila.C◂◂(_ila.S◂◂_ila.O) "\tmov rdi,rax\n" }
	  § c0◂r = { r } 
    § f1 = _seq◂◂{ _ctr◂◂c0 f0 } 
    ¶§ f = f1 
    ∎∎
  § hp # h 
    _hp.ini {} ⊢ h0 
    _id.eq_t { h h0 } ⊢|
  ¶§ f = hp 
  § s8 # s 
		_id.s8 s ⊢ s 
    _hp.of s ⊢ { r h } 
    !^ r ⊢ *r,r0
      ` mov rdi,rax 
      ` call rpc_s8 
      ` mov rdi,rax 
      //
    hp h ⊢ { h h0 } 
    _hp.to { r h } ⊢ s 
    _hp.to { r0 h0 } ⊢ s0 
		∎ { s s0 } 
  ¶§ f = s8 
	§ pt # s 
    _id.pt s ⊢ s 
    _hp.of s ⊢ { r h } 
    !^ r ⊢ *r,r0 
      ` add QWORD [rax+16],1 
      ` mov rdi,rax 
      //
    hp h ⊢ { h h0 } 
    _hp.to { r h } ⊢ s 
    _hp.to { r0 h0 } ⊢ s0 
    ∎ { s s0 }  
  ¶§ f = pt 
  § st # s 
    _id.st_s8 s ⊢ s 
    _hp.of s ⊢ { r h } 
    !^ r ⊢ *r,r0 
      ` mov rdi,rax 
      //
    hp h ⊢ { h h0 } 
    _hp.to { r h } ⊢ s 
    _hp.to { r0 h0 } ⊢ s0 
    ∎ { s s0 }  
  ¶§ f = st 
  §§ arr 
		
    §: arr0 t',k' = { _hp◂(_arr◂k') k' }
    §: arr1 t',k' = { _hp◂(_arr◂k') _hp◂k' }
    §: arr2 a' = { _hp◂a' a' }
    § @.arr_i { { a0 r1 l } i } 
      ∐ i'<>l' .
        _alc_o { a0 i } ⊢ { a0 q0 } 
        f q0 ⊢ { q0 q1 } 
        _alc_i { a0 q0 } ⊢ { a0 i } 
        _cnc_sto { r1 q1 } ⊢ r1
        _inc i ⊢ i
        arr_i { { a0 r1 l } i } ⊢|
      ∐. .
        ∎ { a0 r1 }
    § arr a 
		  _id.arr a ⊢ a 
      _arr_len a ⊢ { a l } 
      _hp.ini {} ⊢ h
      arr2 { h a } ⊢ { h a }
		  _hp.ini {} ⊢ hk 
      arr1 { h hk } ⊢ { h hk } 
		  alc { hk l } ⊢ { _ { l r1 } }  
      $ r1 ⊢ r1,r2 
      _hp.to { r1 h } ⊢ a1 
	    _add_im◂◂8r r2 ⊢ r2
      arr_i { { a r2 l } %[ 0r ] } ⊢ { a _ }
      ∎ { a a1 }
    ¶§ f = arr
		∎∎
  
  § opn o 
    $ o ⊢ 
    ∐ _some◂a . 
      f a ⊢ { a a0 } 
      ∎ { ‹ a › ‹ a0 › }
    ∐. _none◂{} .
      ∎ { ‹› ‹› }
  ¶§ f = opn
  § @.lst l 
  	$ l ⊢ 
    ∐ _cns◂{ a l } .
      f a ⊢ { a a0 }
      lst l ⊢ { l l0 }
      ∎ { ⟦ a < l ⟧ ⟦ a0 < l0 ⟧ }
    ∐. _nil◂{} .
      ∎ { ⟦⟧ ⟦⟧ }
  ¶§ f = lst
  ¶§ f = _ap.rpc_adt 
  --¶§ f = _rpc  
  ∎∎
§ _rpc = _rpc.f 
§: i0 k' = { k' _hp◂k' }
§§ _arr 
  § alc_x◂◂C { h l }
    !^ l ⊢ *l,b,i 
			`	cmp rax,0 
			`	jz err 
			`	bsr rsi,rax 
			`	add rsi,1 
			`	xor rdi,rdi
			`	bts rdi,rsi 
			//
		_imul_im◂◂C b ⊢ b 
		!^ b ⊢ r 
			`	lea rsi,[8+8*rax]
			`	mov rdi,1 
			`	CALLOC_SF
			//
		!^ l,r,i ⊢ *l,*r 
			`	mov QWORD [rdi],rax 
			`	mov BYTE [rdi+7],sil
      //
		∎ { h { l r } }
	§ alc_x = _cnc_siz◂◂alc_x
  § @.mk_i { { n k r } i } 
    ∐ n'<>i' .
      $ k ⊢ k,k0 
      _cnc_sto { r k0 } ⊢ r 
      _inc i ⊢ i 
      mk_i { { n k r } i } ⊢|
    ∐. .
      ∎ { n k } 
  §: i1 t',k' = { k' _hp◂(_arr0◂t'◂k') } 
  § mk◂◂{ ALC I } { n k }
    _hp.ini {} ⊢ h 
    i0 { k h } ⊢ { k h } 
    ALC { h n } ⊢ { h { n r } }
    $ r ⊢ r,r0 
    _add_im◂◂8r r0 ⊢ r0 
    mk_i { { n k r0 } %[ 0r ] } ⊢ { n k }
    _hp.ini {} ⊢ ha 
    i1 { k ha } ⊢ { k ha } 
    _hp.to { r ha } ⊢ a 
    I a ⊢ a 
    ∎ { n k a }
  ∎∎

§ _mk_arr = _arr.mk◂◂{ alc _id.arr }
§ _mk_arr_x = _arr.mk◂◂{ _arr.alc_x _id.arr_x }
§: i1 k' = { k' _hp◂(_arr◂k') } 
§ _mk_stk◂◂F { { n k } p }
  _hp.ini {} ⊢ h 
  i0 { k h } ⊢ { k h } 
  $ n ⊢ n,b 
  siz_arr { h b } ⊢ { _ b }
  !^ n,b ⊢ *n,*b,r,r0 
    ` sub rsp,rdi 
    ` bts rax,63 
    ` mov QWORD [rsp],rax
    ` mov rsi,rsp 
    ` lea rdx,[rsi+8]
    //    
  _arr.mk_i { { n k r0 } %[ 0r ] } ⊢ { n k }
  _hp.ini {} ⊢ ha 
  i1 { k ha } ⊢ { k ha } 
  _hp.to { r ha } ⊢ a
  F { { n k a } p } ⊢ d 
  !^ b ⊢ {} 
    ` mov rsi,QWORD [rsp]
    ` mov rsi,QWORD [rsi]
    ` add rsp,rax 
    //
  ∎ d 
§: i2 k' = { k' _hp◂(_pt◂k') }
§ _clp0◂◂N { h { C k } }
  _hp.of C ⊢ { rC hC } 
  !^ rC ⊢ *rC,r,b 
    "\tALC_RCD (0x" (_ct.pf_x◂◂N) "+3),rdi\n"
    ` mov QWORD [rdi+8],rdi 
    ` mov QWORD [rdi+16],1 
    ` lea rsi,[rdi+24] 
    //
  _hp.ini {} ⊢ hp 
  i2 { k hp } ⊢ { k hp } 
  _cnc_sto { b k } ⊢ _ 
  _hp.to { r hp } ⊢ p 
  _hp.to { rC hC } ⊢ C 
  ∎ { h { C p } }
-\
§ _clp # { C k }
  _hp.mk k ⊢ { k h }
  _cnc_siz◂◂_clp0 { h { C k } } ⊢ { _ { C p } }
  ∎ { C p }
-/
>>>>>>> e99538e0eafc51efb79e811cb3fb8eaca8f20be8
